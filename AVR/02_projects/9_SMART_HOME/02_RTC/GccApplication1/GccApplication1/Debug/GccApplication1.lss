
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000009aa  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800070  00800070  00000a4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c4  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e0  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dab  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00003b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074f  00000000  00000000  00003eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e2c  00000000  00000000  000045fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005427  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  14:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_5>
  18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  54:	1b 01       	movw	r2, r22
  56:	21 01       	movw	r4, r2
  58:	27 01       	movw	r4, r14
  5a:	2d 01       	movw	r4, r26
  5c:	32 01       	movw	r6, r4
  5e:	32 01       	movw	r6, r4
  60:	32 01       	movw	r6, r4
  62:	32 01       	movw	r6, r4
  64:	32 01       	movw	r6, r4
  66:	32 01       	movw	r6, r4
  68:	32 01       	movw	r6, r4
  6a:	32 01       	movw	r6, r4
  6c:	32 01       	movw	r6, r4
  6e:	32 01       	movw	r6, r4
  70:	32 01       	movw	r6, r4
  72:	32 01       	movw	r6, r4
  74:	32 01       	movw	r6, r4
  76:	32 01       	movw	r6, r4
  78:	32 01       	movw	r6, r4
  7a:	32 01       	movw	r6, r4
  7c:	32 01       	movw	r6, r4
  7e:	32 01       	movw	r6, r4
  80:	32 01       	movw	r6, r4
  82:	32 01       	movw	r6, r4
  84:	32 01       	movw	r6, r4
  86:	32 01       	movw	r6, r4
  88:	32 01       	movw	r6, r4
  8a:	32 01       	movw	r6, r4
  8c:	32 01       	movw	r6, r4
  8e:	32 01       	movw	r6, r4
  90:	32 01       	movw	r6, r4
  92:	32 01       	movw	r6, r4
  94:	1b 01       	movw	r2, r22
  96:	21 01       	movw	r4, r2
  98:	27 01       	movw	r4, r14
  9a:	2d 01       	movw	r4, r26
  9c:	4a 01       	movw	r8, r20
  9e:	63 01       	movw	r12, r6
  a0:	7c 01       	movw	r14, r24
  a2:	95 01       	movw	r18, r10
  a4:	ad 01       	movw	r20, r26
  a6:	ad 01       	movw	r20, r26
  a8:	ad 01       	movw	r20, r26
  aa:	ad 01       	movw	r20, r26
  ac:	ad 01       	movw	r20, r26
  ae:	ad 01       	movw	r20, r26
  b0:	ad 01       	movw	r20, r26
  b2:	ad 01       	movw	r20, r26
  b4:	ad 01       	movw	r20, r26
  b6:	ad 01       	movw	r20, r26
  b8:	ad 01       	movw	r20, r26
  ba:	ad 01       	movw	r20, r26
  bc:	ad 01       	movw	r20, r26
  be:	ad 01       	movw	r20, r26
  c0:	ad 01       	movw	r20, r26
  c2:	ad 01       	movw	r20, r26
  c4:	ad 01       	movw	r20, r26
  c6:	ad 01       	movw	r20, r26
  c8:	ad 01       	movw	r20, r26
  ca:	ad 01       	movw	r20, r26
  cc:	ad 01       	movw	r20, r26
  ce:	ad 01       	movw	r20, r26
  d0:	ad 01       	movw	r20, r26
  d2:	ad 01       	movw	r20, r26
  d4:	ad 01       	movw	r20, r26
  d6:	ad 01       	movw	r20, r26
  d8:	ad 01       	movw	r20, r26
  da:	ad 01       	movw	r20, r26
  dc:	4a 01       	movw	r8, r20
  de:	63 01       	movw	r12, r6
  e0:	7c 01       	movw	r14, r24
  e2:	95 01       	movw	r18, r10
  e4:	ba 01       	movw	r22, r20
  e6:	d3 01       	movw	r26, r6
  e8:	ec 01       	movw	r28, r24
  ea:	05 02       	muls	r16, r21
  ec:	1d 02       	muls	r17, r29
  ee:	1d 02       	muls	r17, r29
  f0:	1d 02       	muls	r17, r29
  f2:	1d 02       	muls	r17, r29
  f4:	1d 02       	muls	r17, r29
  f6:	1d 02       	muls	r17, r29
  f8:	1d 02       	muls	r17, r29
  fa:	1d 02       	muls	r17, r29
  fc:	1d 02       	muls	r17, r29
  fe:	1d 02       	muls	r17, r29
 100:	1d 02       	muls	r17, r29
 102:	1d 02       	muls	r17, r29
 104:	1d 02       	muls	r17, r29
 106:	1d 02       	muls	r17, r29
 108:	1d 02       	muls	r17, r29
 10a:	1d 02       	muls	r17, r29
 10c:	1d 02       	muls	r17, r29
 10e:	1d 02       	muls	r17, r29
 110:	1d 02       	muls	r17, r29
 112:	1d 02       	muls	r17, r29
 114:	1d 02       	muls	r17, r29
 116:	1d 02       	muls	r17, r29
 118:	1d 02       	muls	r17, r29
 11a:	1d 02       	muls	r17, r29
 11c:	1d 02       	muls	r17, r29
 11e:	1d 02       	muls	r17, r29
 120:	1d 02       	muls	r17, r29
 122:	1d 02       	muls	r17, r29
 124:	ba 01       	movw	r22, r20
 126:	d3 01       	movw	r26, r6
 128:	ec 01       	movw	r28, r24
 12a:	05 02       	muls	r16, r21
 12c:	2c 02       	muls	r18, r28
 12e:	3f 02       	muls	r19, r31
 130:	52 02       	muls	r21, r18
 132:	65 02       	muls	r22, r21
 134:	77 02       	muls	r23, r23
 136:	77 02       	muls	r23, r23
 138:	77 02       	muls	r23, r23
 13a:	77 02       	muls	r23, r23
 13c:	77 02       	muls	r23, r23
 13e:	77 02       	muls	r23, r23
 140:	77 02       	muls	r23, r23
 142:	77 02       	muls	r23, r23
 144:	77 02       	muls	r23, r23
 146:	77 02       	muls	r23, r23
 148:	77 02       	muls	r23, r23
 14a:	77 02       	muls	r23, r23
 14c:	77 02       	muls	r23, r23
 14e:	77 02       	muls	r23, r23
 150:	77 02       	muls	r23, r23
 152:	77 02       	muls	r23, r23
 154:	77 02       	muls	r23, r23
 156:	77 02       	muls	r23, r23
 158:	77 02       	muls	r23, r23
 15a:	77 02       	muls	r23, r23
 15c:	77 02       	muls	r23, r23
 15e:	77 02       	muls	r23, r23
 160:	77 02       	muls	r23, r23
 162:	77 02       	muls	r23, r23
 164:	77 02       	muls	r23, r23
 166:	77 02       	muls	r23, r23
 168:	77 02       	muls	r23, r23
 16a:	77 02       	muls	r23, r23
 16c:	2c 02       	muls	r18, r28
 16e:	3f 02       	muls	r19, r31
 170:	52 02       	muls	r21, r18
 172:	65 02       	muls	r22, r21
 174:	84 02       	muls	r24, r20
 176:	86 02       	muls	r24, r22
 178:	88 02       	muls	r24, r24
 17a:	8a 02       	muls	r24, r26
 17c:	8b 02       	muls	r24, r27
 17e:	8b 02       	muls	r24, r27
 180:	8b 02       	muls	r24, r27
 182:	8b 02       	muls	r24, r27
 184:	8b 02       	muls	r24, r27
 186:	8b 02       	muls	r24, r27
 188:	8b 02       	muls	r24, r27
 18a:	8b 02       	muls	r24, r27
 18c:	8b 02       	muls	r24, r27
 18e:	8b 02       	muls	r24, r27
 190:	8b 02       	muls	r24, r27
 192:	8b 02       	muls	r24, r27
 194:	8b 02       	muls	r24, r27
 196:	8b 02       	muls	r24, r27
 198:	8b 02       	muls	r24, r27
 19a:	8b 02       	muls	r24, r27
 19c:	8b 02       	muls	r24, r27
 19e:	8b 02       	muls	r24, r27
 1a0:	8b 02       	muls	r24, r27
 1a2:	8b 02       	muls	r24, r27
 1a4:	8b 02       	muls	r24, r27
 1a6:	8b 02       	muls	r24, r27
 1a8:	8b 02       	muls	r24, r27
 1aa:	8b 02       	muls	r24, r27
 1ac:	8b 02       	muls	r24, r27
 1ae:	8b 02       	muls	r24, r27
 1b0:	8b 02       	muls	r24, r27
 1b2:	8b 02       	muls	r24, r27
 1b4:	84 02       	muls	r24, r20
 1b6:	86 02       	muls	r24, r22
 1b8:	88 02       	muls	r24, r24
 1ba:	8a 02       	muls	r24, r26

000001bc <__ctors_end>:
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf e5       	ldi	r28, 0x5F	; 95
 1c2:	d8 e0       	ldi	r29, 0x08	; 8
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	a0 e6       	ldi	r26, 0x60	; 96
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	ea ea       	ldi	r30, 0xAA	; 170
 1d0:	f9 e0       	ldi	r31, 0x09	; 9
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
 1d4:	05 90       	lpm	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	a0 37       	cpi	r26, 0x70	; 112
 1da:	b1 07       	cpc	r27, r17
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	a0 e7       	ldi	r26, 0x70	; 112
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
 1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
 1e8:	a5 37       	cpi	r26, 0x75	; 117
 1ea:	b2 07       	cpc	r27, r18
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
 1ee:	0e 94 a2 02 	call	0x544	; 0x544 <main>
 1f2:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <_exit>

000001f6 <__bad_interrupt>:
 1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <seven_segment_vWrite>:
    }
}

// 7-seg write
void seven_segment_vWrite(unsigned char port_name, unsigned char value)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	60 97       	sbiw	r28, 0x10	; 16
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
    #if defined  cc
    unsigned char seven_segment[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
 20e:	90 e1       	ldi	r25, 0x10	; 16
 210:	e0 e6       	ldi	r30, 0x60	; 96
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	de 01       	movw	r26, r28
 216:	11 96       	adiw	r26, 0x01	; 1
 218:	01 90       	ld	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	9a 95       	dec	r25
 21e:	e1 f7       	brne	.-8      	; 0x218 <seven_segment_vWrite+0x1e>
    #elif defined ca
    unsigned char seven_segment[16] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d,~0x7d, ~0x07, ~0x7f, ~0x6f, ~0x77, ~0x7c, ~0x39, ~0x5e, ~0x79, ~0x71};
    #endif
    switch (port_name)
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	e1 54       	subi	r30, 0x41	; 65
 226:	f1 09       	sbc	r31, r1
 228:	e4 32       	cpi	r30, 0x24	; 36
 22a:	f1 05       	cpc	r31, r1
 22c:	d8 f4       	brcc	.+54     	; 0x264 <seven_segment_vWrite+0x6a>
 22e:	e6 5d       	subi	r30, 0xD6	; 214
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__tablejump2__>
    {
    case 'a':
    case 'A':
        PORTA = seven_segment[value];
 236:	fe 01       	movw	r30, r28
 238:	e6 0f       	add	r30, r22
 23a:	f1 1d       	adc	r31, r1
 23c:	81 81       	ldd	r24, Z+1	; 0x01
 23e:	8b bb       	out	0x1b, r24	; 27
        break;
 240:	11 c0       	rjmp	.+34     	; 0x264 <seven_segment_vWrite+0x6a>

    case 'b':
    case 'B':
        PORTB = seven_segment[value];
 242:	fe 01       	movw	r30, r28
 244:	e6 0f       	add	r30, r22
 246:	f1 1d       	adc	r31, r1
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	88 bb       	out	0x18, r24	; 24
        break;
 24c:	0b c0       	rjmp	.+22     	; 0x264 <seven_segment_vWrite+0x6a>

    case 'c':
    case 'C':
        PORTC = seven_segment[value];
 24e:	fe 01       	movw	r30, r28
 250:	e6 0f       	add	r30, r22
 252:	f1 1d       	adc	r31, r1
 254:	81 81       	ldd	r24, Z+1	; 0x01
 256:	85 bb       	out	0x15, r24	; 21
        break;
 258:	05 c0       	rjmp	.+10     	; 0x264 <seven_segment_vWrite+0x6a>

    case 'd':
    case 'D':
        PORTD = seven_segment[value];
 25a:	fe 01       	movw	r30, r28
 25c:	e6 0f       	add	r30, r22
 25e:	f1 1d       	adc	r31, r1
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	82 bb       	out	0x12, r24	; 18
        break;

    default:
        break;
    }
 264:	60 96       	adiw	r28, 0x10	; 16
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <button_ucRead>:
}

//button read
unsigned char button_ucRead(unsigned char port_name,unsigned char pin_num)
{
    return DIO_u8ReadPin(port_name,pin_num);
 276:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_u8ReadPin>
}
 27a:	08 95       	ret

0000027c <DIO_vSetPinDir>:
	{
		DIO_vWritePinValue(port_name, pin_number, 1);
	}
	else
	{
		DIO_vWritePinValue(port_name, pin_number, 1);
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	fc 01       	movw	r30, r24
 280:	e1 54       	subi	r30, 0x41	; 65
 282:	f1 09       	sbc	r31, r1
 284:	e4 32       	cpi	r30, 0x24	; 36
 286:	f1 05       	cpc	r31, r1
 288:	08 f0       	brcs	.+2      	; 0x28c <DIO_vSetPinDir+0x10>
 28a:	67 c0       	rjmp	.+206    	; 0x35a <DIO_vSetPinDir+0xde>
 28c:	e2 5b       	subi	r30, 0xB2	; 178
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__tablejump2__>
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	59 f4       	brne	.+22     	; 0x2ae <DIO_vSetPinDir+0x32>
 298:	2a b3       	in	r18, 0x1a	; 26
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vSetPinDir+0x28>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vSetPinDir+0x24>
 2a8:	82 2b       	or	r24, r18
 2aa:	8a bb       	out	0x1a, r24	; 26
 2ac:	08 95       	ret
 2ae:	2a b3       	in	r18, 0x1a	; 26
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_vSetPinDir+0x3e>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_vSetPinDir+0x3a>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	8a bb       	out	0x1a, r24	; 26
 2c4:	08 95       	ret
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	59 f4       	brne	.+22     	; 0x2e0 <DIO_vSetPinDir+0x64>
 2ca:	27 b3       	in	r18, 0x17	; 23
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vSetPinDir+0x5a>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vSetPinDir+0x56>
 2da:	82 2b       	or	r24, r18
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	08 95       	ret
 2e0:	27 b3       	in	r18, 0x17	; 23
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vSetPinDir+0x70>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vSetPinDir+0x6c>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	87 bb       	out	0x17, r24	; 23
 2f6:	08 95       	ret
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	59 f4       	brne	.+22     	; 0x312 <DIO_vSetPinDir+0x96>
 2fc:	24 b3       	in	r18, 0x14	; 20
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_vSetPinDir+0x8c>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_vSetPinDir+0x88>
 30c:	82 2b       	or	r24, r18
 30e:	84 bb       	out	0x14, r24	; 20
 310:	08 95       	ret
 312:	24 b3       	in	r18, 0x14	; 20
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_vSetPinDir+0xa2>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_vSetPinDir+0x9e>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	84 bb       	out	0x14, r24	; 20
 328:	08 95       	ret
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	59 f4       	brne	.+22     	; 0x344 <DIO_vSetPinDir+0xc8>
 32e:	21 b3       	in	r18, 0x11	; 17
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_vSetPinDir+0xbe>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_vSetPinDir+0xba>
 33e:	82 2b       	or	r24, r18
 340:	81 bb       	out	0x11, r24	; 17
 342:	08 95       	ret
 344:	21 b3       	in	r18, 0x11	; 17
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vSetPinDir+0xd4>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vSetPinDir+0xd0>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	81 bb       	out	0x11, r24	; 17
 35a:	08 95       	ret

0000035c <DIO_vWritePinValue>:
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	e1 54       	subi	r30, 0x41	; 65
 362:	f1 09       	sbc	r31, r1
 364:	e4 32       	cpi	r30, 0x24	; 36
 366:	f1 05       	cpc	r31, r1
 368:	08 f0       	brcs	.+2      	; 0x36c <DIO_vWritePinValue+0x10>
 36a:	67 c0       	rjmp	.+206    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 36c:	ee 58       	subi	r30, 0x8E	; 142
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__tablejump2__>
 374:	41 30       	cpi	r20, 0x01	; 1
 376:	59 f4       	brne	.+22     	; 0x38e <DIO_vWritePinValue+0x32>
 378:	2b b3       	in	r18, 0x1b	; 27
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_vWritePinValue+0x28>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_vWritePinValue+0x24>
 388:	82 2b       	or	r24, r18
 38a:	8b bb       	out	0x1b, r24	; 27
 38c:	08 95       	ret
 38e:	2b b3       	in	r18, 0x1b	; 27
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_vWritePinValue+0x3e>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_vWritePinValue+0x3a>
 39e:	80 95       	com	r24
 3a0:	82 23       	and	r24, r18
 3a2:	8b bb       	out	0x1b, r24	; 27
 3a4:	08 95       	ret
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	59 f4       	brne	.+22     	; 0x3c0 <DIO_vWritePinValue+0x64>
 3aa:	28 b3       	in	r18, 0x18	; 24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_vWritePinValue+0x5a>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_vWritePinValue+0x56>
 3ba:	82 2b       	or	r24, r18
 3bc:	88 bb       	out	0x18, r24	; 24
 3be:	08 95       	ret
 3c0:	28 b3       	in	r18, 0x18	; 24
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_vWritePinValue+0x70>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_vWritePinValue+0x6c>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	88 bb       	out	0x18, r24	; 24
 3d6:	08 95       	ret
 3d8:	41 30       	cpi	r20, 0x01	; 1
 3da:	59 f4       	brne	.+22     	; 0x3f2 <DIO_vWritePinValue+0x96>
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_vWritePinValue+0x8c>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_vWritePinValue+0x88>
 3ec:	82 2b       	or	r24, r18
 3ee:	85 bb       	out	0x15, r24	; 21
 3f0:	08 95       	ret
 3f2:	25 b3       	in	r18, 0x15	; 21
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_vWritePinValue+0xa2>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_vWritePinValue+0x9e>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	85 bb       	out	0x15, r24	; 21
 408:	08 95       	ret
 40a:	41 30       	cpi	r20, 0x01	; 1
 40c:	59 f4       	brne	.+22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40e:	22 b3       	in	r18, 0x12	; 18
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	82 2b       	or	r24, r18
 420:	82 bb       	out	0x12, r24	; 18
 422:	08 95       	ret
 424:	22 b3       	in	r18, 0x12	; 18
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	80 95       	com	r24
 436:	82 23       	and	r24, r18
 438:	82 bb       	out	0x12, r24	; 18
 43a:	08 95       	ret

0000043c <DIO_u8ReadPin>:
 43c:	a6 2f       	mov	r26, r22
 43e:	48 2f       	mov	r20, r24
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	fa 01       	movw	r30, r20
 444:	e1 54       	subi	r30, 0x41	; 65
 446:	f1 09       	sbc	r31, r1
 448:	e4 32       	cpi	r30, 0x24	; 36
 44a:	f1 05       	cpc	r31, r1
 44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_u8ReadPin+0x14>
 44e:	4f c0       	rjmp	.+158    	; 0x4ee <DIO_u8ReadPin+0xb2>
 450:	ea 56       	subi	r30, 0x6A	; 106
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__tablejump2__>
 458:	29 b3       	in	r18, 0x19	; 25
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0a 2e       	mov	r0, r26
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_u8ReadPin+0x2a>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_u8ReadPin+0x26>
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	82 23       	and	r24, r18
 46e:	93 23       	and	r25, r19
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8ReadPin+0x3a>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	aa 95       	dec	r26
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8ReadPin+0x36>
 47a:	98 2f       	mov	r25, r24
 47c:	38 c0       	rjmp	.+112    	; 0x4ee <DIO_u8ReadPin+0xb2>
 47e:	26 b3       	in	r18, 0x16	; 22
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0a 2e       	mov	r0, r26
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_u8ReadPin+0x50>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_u8ReadPin+0x4c>
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	82 23       	and	r24, r18
 494:	93 23       	and	r25, r19
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_u8ReadPin+0x60>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	aa 95       	dec	r26
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_u8ReadPin+0x5c>
 4a0:	98 2f       	mov	r25, r24
 4a2:	25 c0       	rjmp	.+74     	; 0x4ee <DIO_u8ReadPin+0xb2>
 4a4:	23 b3       	in	r18, 0x13	; 19
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0a 2e       	mov	r0, r26
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_u8ReadPin+0x76>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_u8ReadPin+0x72>
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	82 23       	and	r24, r18
 4ba:	93 23       	and	r25, r19
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8ReadPin+0x86>
 4be:	95 95       	asr	r25
 4c0:	87 95       	ror	r24
 4c2:	aa 95       	dec	r26
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8ReadPin+0x82>
 4c6:	98 2f       	mov	r25, r24
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <DIO_u8ReadPin+0xb2>
 4ca:	20 b3       	in	r18, 0x10	; 16
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0a 2e       	mov	r0, r26
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8ReadPin+0x9c>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8ReadPin+0x98>
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	82 23       	and	r24, r18
 4e0:	93 23       	and	r25, r19
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8ReadPin+0xac>
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	aa 95       	dec	r26
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8ReadPin+0xa8>
 4ec:	98 2f       	mov	r25, r24
 4ee:	89 2f       	mov	r24, r25
 4f0:	08 95       	ret

000004f2 <DIO_vSetPortDir>:
}

// Port Direction
void DIO_vSetPortDir(unsigned char port_name, unsigned char port_direction)
{
	switch (port_name)
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	fc 01       	movw	r30, r24
 4f6:	e1 54       	subi	r30, 0x41	; 65
 4f8:	f1 09       	sbc	r31, r1
 4fa:	e4 32       	cpi	r30, 0x24	; 36
 4fc:	f1 05       	cpc	r31, r1
 4fe:	58 f4       	brcc	.+22     	; 0x516 <DIO_vSetPortDir+0x24>
 500:	e6 54       	subi	r30, 0x46	; 70
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__tablejump2__>
	{
	case 'a':
	case 'A':
		DDRA = port_direction;
 508:	6a bb       	out	0x1a, r22	; 26
		break;
 50a:	08 95       	ret

	case 'b':
	case 'B':
		DDRB = port_direction;
 50c:	67 bb       	out	0x17, r22	; 23
		break;
 50e:	08 95       	ret

	case 'c':
	case 'C':
		DDRC = port_direction;
 510:	64 bb       	out	0x14, r22	; 20
		break;
 512:	08 95       	ret

	case 'd':
	case 'D':
		DDRD = port_direction;
 514:	61 bb       	out	0x11, r22	; 17
 516:	08 95       	ret

00000518 <I2C_vSET_ADDRESS>:
{
	TWDR=data;
	TWCR=(1<<TWINT)|(1<<TWEN);
	while(READ_BIT(TWCR,TWINT)==0); //wait to finish
	
}
 518:	82 b9       	out	0x02, r24	; 2
 51a:	08 95       	ret

0000051c <I2C_u8SLAVE_READ>:

unsigned char I2C_u8SLAVE_READ(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 51c:	84 ec       	ldi	r24, 0xC4	; 196
 51e:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 520:	06 b6       	in	r0, 0x36	; 54
 522:	07 fe       	sbrs	r0, 7
 524:	fd cf       	rjmp	.-6      	; 0x520 <I2C_u8SLAVE_READ+0x4>
	while ((TWSR & 0XF8) != 0x60); // own SLA+W has been received and ACK has been returned
 526:	81 b1       	in	r24, 0x01	; 1
 528:	88 7f       	andi	r24, 0xF8	; 248
 52a:	80 36       	cpi	r24, 0x60	; 96
 52c:	e1 f7       	brne	.-8      	; 0x526 <I2C_u8SLAVE_READ+0xa>
	
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 52e:	84 ec       	ldi	r24, 0xC4	; 196
 530:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 532:	06 b6       	in	r0, 0x36	; 54
 534:	07 fe       	sbrs	r0, 7
 536:	fd cf       	rjmp	.-6      	; 0x532 <I2C_u8SLAVE_READ+0x16>
	while ((TWSR & 0XF8) != 0x80); // previously addressed with own SLA+W : data has been received : ACK has been returned
 538:	81 b1       	in	r24, 0x01	; 1
 53a:	88 7f       	andi	r24, 0xF8	; 248
 53c:	80 38       	cpi	r24, 0x80	; 128
 53e:	e1 f7       	brne	.-8      	; 0x538 <I2C_u8SLAVE_READ+0x1c>
	return TWDR ;
 540:	83 b1       	in	r24, 0x03	; 3
	
}
 542:	08 95       	ret

00000544 <main>:
unsigned char pressed_value;
unsigned char mode;
int main(void)
{
	
	I2C_vSET_ADDRESS(0x06);
 544:	86 e0       	ldi	r24, 0x06	; 6
 546:	0e 94 8c 02 	call	0x518	; 0x518 <I2C_vSET_ADDRESS>
	DIO_vSetPinDir('c',2,0);//input for configuration from master
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	83 e6       	ldi	r24, 0x63	; 99
 550:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>
	
	
	DIO_vSetPortDir('a',0xff);
 554:	6f ef       	ldi	r22, 0xFF	; 255
 556:	81 e6       	ldi	r24, 0x61	; 97
 558:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_vSetPortDir>
	DIO_vSetPortDir('b',0xff);
 55c:	6f ef       	ldi	r22, 0xFF	; 255
 55e:	82 e6       	ldi	r24, 0x62	; 98
 560:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_vSetPortDir>
	timer_vSelect_mode(2,TIMER_OVERFLOW_EXT_OSC,TIMER_OCR0_DEFAULT_VALUE);
 564:	4f ef       	ldi	r20, 0xFF	; 255
 566:	65 e0       	ldi	r22, 0x05	; 5
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	0e 94 4c 04 	call	0x898	; 0x898 <timer_vSelect_mode>
			DIO_vWritePinValue('b',1,1);
			DIO_vWritePinValue('b',2,1);
			DIO_vWritePinValue('b',3,1);
			DIO_vWritePinValue('b',4,1);
			
			seven_segment_vWrite('a',seconds_counter%10);
 56e:	cd ec       	ldi	r28, 0xCD	; 205
	timer_vSelect_mode(2,TIMER_OVERFLOW_EXT_OSC,TIMER_OCR0_DEFAULT_VALUE);
	
	
	while (1)
	{
		mode=button_ucRead('c',2);		
 570:	62 e0       	ldi	r22, 0x02	; 2
 572:	83 e6       	ldi	r24, 0x63	; 99
 574:	0e 94 3b 01 	call	0x276	; 0x276 <button_ucRead>
 578:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <mode>
		
		/*segment multiplexing*/
		
		if(mode==0)
 57c:	81 11       	cpse	r24, r1
 57e:	4a c1       	rjmp	.+660    	; 0x814 <main+0x2d0>
		{
			DIO_vWritePinValue('b',5,0);
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	65 e0       	ldi	r22, 0x05	; 5
 584:	82 e6       	ldi	r24, 0x62	; 98
 586:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',0,1);
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e6       	ldi	r24, 0x62	; 98
 590:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',1,1);
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	82 e6       	ldi	r24, 0x62	; 98
 59a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',2,1);
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	62 e0       	ldi	r22, 0x02	; 2
 5a2:	82 e6       	ldi	r24, 0x62	; 98
 5a4:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',3,1);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	82 e6       	ldi	r24, 0x62	; 98
 5ae:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',4,1);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	64 e0       	ldi	r22, 0x04	; 4
 5b6:	82 e6       	ldi	r24, 0x62	; 98
 5b8:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			
			seven_segment_vWrite('a',seconds_counter%10);
 5bc:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <seconds_counter>
 5c0:	6c 9f       	mul	r22, r28
 5c2:	81 2d       	mov	r24, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	86 95       	lsr	r24
 5c8:	86 95       	lsr	r24
 5ca:	86 95       	lsr	r24
 5cc:	88 0f       	add	r24, r24
 5ce:	98 2f       	mov	r25, r24
 5d0:	99 0f       	add	r25, r25
 5d2:	99 0f       	add	r25, r25
 5d4:	89 0f       	add	r24, r25
 5d6:	68 1b       	sub	r22, r24
 5d8:	81 e6       	ldi	r24, 0x61	; 97
 5da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5de:	8f e0       	ldi	r24, 0x0F	; 15
 5e0:	97 e2       	ldi	r25, 0x27	; 39
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <main+0x9e>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0xa4>
 5e8:	00 00       	nop
			_delay_ms(5);
			
			DIO_vWritePinValue('b',5,1);
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	65 e0       	ldi	r22, 0x05	; 5
 5ee:	82 e6       	ldi	r24, 0x62	; 98
 5f0:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',0,0);
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	82 e6       	ldi	r24, 0x62	; 98
 5fa:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',1,1);
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	82 e6       	ldi	r24, 0x62	; 98
 604:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',2,1);
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	62 e0       	ldi	r22, 0x02	; 2
 60c:	82 e6       	ldi	r24, 0x62	; 98
 60e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',3,1);
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	63 e0       	ldi	r22, 0x03	; 3
 616:	82 e6       	ldi	r24, 0x62	; 98
 618:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',4,1);
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	64 e0       	ldi	r22, 0x04	; 4
 620:	82 e6       	ldi	r24, 0x62	; 98
 622:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			
			seven_segment_vWrite('a',seconds_counter/10);
 626:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <seconds_counter>
 62a:	6c 9f       	mul	r22, r28
 62c:	61 2d       	mov	r22, r1
 62e:	11 24       	eor	r1, r1
 630:	66 95       	lsr	r22
 632:	66 95       	lsr	r22
 634:	66 95       	lsr	r22
 636:	81 e6       	ldi	r24, 0x61	; 97
 638:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 63c:	8f e0       	ldi	r24, 0x0F	; 15
 63e:	97 e2       	ldi	r25, 0x27	; 39
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <main+0xfc>
 644:	00 c0       	rjmp	.+0      	; 0x646 <main+0x102>
 646:	00 00       	nop
			_delay_ms(5);
			
			
			DIO_vWritePinValue('b',5,1);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	65 e0       	ldi	r22, 0x05	; 5
 64c:	82 e6       	ldi	r24, 0x62	; 98
 64e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',0,1);
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	82 e6       	ldi	r24, 0x62	; 98
 658:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',1,0);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	82 e6       	ldi	r24, 0x62	; 98
 662:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',2,1);
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	62 e0       	ldi	r22, 0x02	; 2
 66a:	82 e6       	ldi	r24, 0x62	; 98
 66c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',3,1);
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	63 e0       	ldi	r22, 0x03	; 3
 674:	82 e6       	ldi	r24, 0x62	; 98
 676:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',4,1);
 67a:	41 e0       	ldi	r20, 0x01	; 1
 67c:	64 e0       	ldi	r22, 0x04	; 4
 67e:	82 e6       	ldi	r24, 0x62	; 98
 680:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			
			seven_segment_vWrite('a',minutes_counter%10);
 684:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <minutes_counter>
 688:	6c 9f       	mul	r22, r28
 68a:	81 2d       	mov	r24, r1
 68c:	11 24       	eor	r1, r1
 68e:	86 95       	lsr	r24
 690:	86 95       	lsr	r24
 692:	86 95       	lsr	r24
 694:	88 0f       	add	r24, r24
 696:	98 2f       	mov	r25, r24
 698:	99 0f       	add	r25, r25
 69a:	99 0f       	add	r25, r25
 69c:	89 0f       	add	r24, r25
 69e:	68 1b       	sub	r22, r24
 6a0:	81 e6       	ldi	r24, 0x61	; 97
 6a2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 6a6:	8f e0       	ldi	r24, 0x0F	; 15
 6a8:	97 e2       	ldi	r25, 0x27	; 39
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <main+0x166>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x16c>
 6b0:	00 00       	nop
			_delay_ms(5);
			
			DIO_vWritePinValue('b',5,1);
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	65 e0       	ldi	r22, 0x05	; 5
 6b6:	82 e6       	ldi	r24, 0x62	; 98
 6b8:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',0,1);
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	82 e6       	ldi	r24, 0x62	; 98
 6c2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',1,1);
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	61 e0       	ldi	r22, 0x01	; 1
 6ca:	82 e6       	ldi	r24, 0x62	; 98
 6cc:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',2,0);
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	62 e0       	ldi	r22, 0x02	; 2
 6d4:	82 e6       	ldi	r24, 0x62	; 98
 6d6:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',3,1);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	63 e0       	ldi	r22, 0x03	; 3
 6de:	82 e6       	ldi	r24, 0x62	; 98
 6e0:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',4,1);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	82 e6       	ldi	r24, 0x62	; 98
 6ea:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			
			seven_segment_vWrite('a',minutes_counter/10);
 6ee:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <minutes_counter>
 6f2:	6c 9f       	mul	r22, r28
 6f4:	61 2d       	mov	r22, r1
 6f6:	11 24       	eor	r1, r1
 6f8:	66 95       	lsr	r22
 6fa:	66 95       	lsr	r22
 6fc:	66 95       	lsr	r22
 6fe:	81 e6       	ldi	r24, 0x61	; 97
 700:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 704:	8f e0       	ldi	r24, 0x0F	; 15
 706:	97 e2       	ldi	r25, 0x27	; 39
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	f1 f7       	brne	.-4      	; 0x708 <main+0x1c4>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x1ca>
 70e:	00 00       	nop
			_delay_ms(5);
			
			DIO_vWritePinValue('b',5,1);
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	65 e0       	ldi	r22, 0x05	; 5
 714:	82 e6       	ldi	r24, 0x62	; 98
 716:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',0,1);
 71a:	41 e0       	ldi	r20, 0x01	; 1
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	82 e6       	ldi	r24, 0x62	; 98
 720:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',1,1);
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	61 e0       	ldi	r22, 0x01	; 1
 728:	82 e6       	ldi	r24, 0x62	; 98
 72a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',2,1);
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	82 e6       	ldi	r24, 0x62	; 98
 734:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',3,0);
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	63 e0       	ldi	r22, 0x03	; 3
 73c:	82 e6       	ldi	r24, 0x62	; 98
 73e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',4,1);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	64 e0       	ldi	r22, 0x04	; 4
 746:	82 e6       	ldi	r24, 0x62	; 98
 748:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			
			seven_segment_vWrite('a',hours_counter%10);
 74c:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <__data_end>
 750:	6c 9f       	mul	r22, r28
 752:	81 2d       	mov	r24, r1
 754:	11 24       	eor	r1, r1
 756:	86 95       	lsr	r24
 758:	86 95       	lsr	r24
 75a:	86 95       	lsr	r24
 75c:	88 0f       	add	r24, r24
 75e:	98 2f       	mov	r25, r24
 760:	99 0f       	add	r25, r25
 762:	99 0f       	add	r25, r25
 764:	89 0f       	add	r24, r25
 766:	68 1b       	sub	r22, r24
 768:	81 e6       	ldi	r24, 0x61	; 97
 76a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 76e:	8f e0       	ldi	r24, 0x0F	; 15
 770:	97 e2       	ldi	r25, 0x27	; 39
 772:	01 97       	sbiw	r24, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <main+0x22e>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x234>
 778:	00 00       	nop
			_delay_ms(5);
			
			DIO_vWritePinValue('b',5,1);
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	65 e0       	ldi	r22, 0x05	; 5
 77e:	82 e6       	ldi	r24, 0x62	; 98
 780:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',0,1);
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	82 e6       	ldi	r24, 0x62	; 98
 78a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',1,1);
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	82 e6       	ldi	r24, 0x62	; 98
 794:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',2,1);
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	62 e0       	ldi	r22, 0x02	; 2
 79c:	82 e6       	ldi	r24, 0x62	; 98
 79e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',3,1);
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	63 e0       	ldi	r22, 0x03	; 3
 7a6:	82 e6       	ldi	r24, 0x62	; 98
 7a8:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			DIO_vWritePinValue('b',4,0);
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	64 e0       	ldi	r22, 0x04	; 4
 7b0:	82 e6       	ldi	r24, 0x62	; 98
 7b2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
			seven_segment_vWrite('a',hours_counter/10);
 7b6:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <__data_end>
 7ba:	6c 9f       	mul	r22, r28
 7bc:	61 2d       	mov	r22, r1
 7be:	11 24       	eor	r1, r1
 7c0:	66 95       	lsr	r22
 7c2:	66 95       	lsr	r22
 7c4:	66 95       	lsr	r22
 7c6:	81 e6       	ldi	r24, 0x61	; 97
 7c8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 7cc:	8f e0       	ldi	r24, 0x0F	; 15
 7ce:	97 e2       	ldi	r25, 0x27	; 39
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <main+0x28c>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x292>
 7d6:	00 00       	nop
			_delay_ms(5);
			
			if(seconds_counter>=60)
 7d8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <seconds_counter>
 7dc:	8c 33       	cpi	r24, 0x3C	; 60
 7de:	38 f0       	brcs	.+14     	; 0x7ee <main+0x2aa>
			{
				seconds_counter=0;
 7e0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <seconds_counter>
				minutes_counter++;
 7e4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <minutes_counter>
 7e8:	8f 5f       	subi	r24, 0xFF	; 255
 7ea:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <minutes_counter>
			}
			if(minutes_counter>=60)
 7ee:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <minutes_counter>
 7f2:	8c 33       	cpi	r24, 0x3C	; 60
 7f4:	38 f0       	brcs	.+14     	; 0x804 <main+0x2c0>
			{
				minutes_counter=0;
 7f6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <minutes_counter>
				hours_counter++;
 7fa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 7fe:	8f 5f       	subi	r24, 0xFF	; 255
 800:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
			}
			if(hours_counter>=24)
 804:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 808:	88 31       	cpi	r24, 0x18	; 24
 80a:	08 f4       	brcc	.+2      	; 0x80e <main+0x2ca>
 80c:	b1 ce       	rjmp	.-670    	; 0x570 <main+0x2c>
			{
				hours_counter=0;
 80e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
 812:	ae ce       	rjmp	.-676    	; 0x570 <main+0x2c>
			}
		}
		
		else if(mode == 1)//select configuration mode
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	09 f0       	breq	.+2      	; 0x81a <main+0x2d6>
 818:	ab ce       	rjmp	.-682    	; 0x570 <main+0x2c>
		{
			RESET_BIT(TIMSK, TOIE2);
 81a:	89 b7       	in	r24, 0x39	; 57
 81c:	8f 7b       	andi	r24, 0xBF	; 191
 81e:	89 bf       	out	0x39, r24	; 57
			hours_counter=I2C_u8SLAVE_READ();
 820:	0e 94 8e 02 	call	0x51c	; 0x51c <I2C_u8SLAVE_READ>
 824:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 828:	9f ef       	ldi	r25, 0xFF	; 255
 82a:	21 ee       	ldi	r18, 0xE1	; 225
 82c:	84 e0       	ldi	r24, 0x04	; 4
 82e:	91 50       	subi	r25, 0x01	; 1
 830:	20 40       	sbci	r18, 0x00	; 0
 832:	80 40       	sbci	r24, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <main+0x2ea>
 836:	00 c0       	rjmp	.+0      	; 0x838 <main+0x2f4>
 838:	00 00       	nop
			_delay_ms(200);//mandatory
			
			minutes_counter=I2C_u8SLAVE_READ();
 83a:	0e 94 8e 02 	call	0x51c	; 0x51c <I2C_u8SLAVE_READ>
 83e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <minutes_counter>
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	21 ee       	ldi	r18, 0xE1	; 225
 846:	84 e0       	ldi	r24, 0x04	; 4
 848:	91 50       	subi	r25, 0x01	; 1
 84a:	20 40       	sbci	r18, 0x00	; 0
 84c:	80 40       	sbci	r24, 0x00	; 0
 84e:	e1 f7       	brne	.-8      	; 0x848 <main+0x304>
 850:	00 c0       	rjmp	.+0      	; 0x852 <main+0x30e>
 852:	00 00       	nop
			_delay_ms(200);//mandatory
			
			seconds_counter=I2C_u8SLAVE_READ();
 854:	0e 94 8e 02 	call	0x51c	; 0x51c <I2C_u8SLAVE_READ>
 858:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <seconds_counter>
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	21 ee       	ldi	r18, 0xE1	; 225
 860:	84 e0       	ldi	r24, 0x04	; 4
 862:	91 50       	subi	r25, 0x01	; 1
 864:	20 40       	sbci	r18, 0x00	; 0
 866:	80 40       	sbci	r24, 0x00	; 0
 868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x3>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
 86c:	00 00       	nop
			_delay_ms(200);//mandatory
			
			
			SET_BIT(TIMSK, TOIE2);
 86e:	89 b7       	in	r24, 0x39	; 57
 870:	80 64       	ori	r24, 0x40	; 64
 872:	89 bf       	out	0x39, r24	; 57
 874:	7d ce       	rjmp	.-774    	; 0x570 <main+0x2c>

00000876 <__vector_5>:
	}
}


ISR(TIMER2_OVF_vect)
{
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	8f 93       	push	r24
	seconds_counter++;
 882:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <seconds_counter>
 886:	8f 5f       	subi	r24, 0xFF	; 255
 888:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <seconds_counter>
}
 88c:	8f 91       	pop	r24
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <timer_vSelect_mode>:
#include "timer.h"
#include "DIO.h"

// note if you are using overflow mode you can put any value for OCR
timer_vSelect_mode(unsigned char timer_num_select, unsigned char timer_mode_select, unsigned char timer_pwm_value)
{
 898:	cf 93       	push	r28

    switch (timer_num_select)
 89a:	88 23       	and	r24, r24
 89c:	21 f0       	breq	.+8      	; 0x8a6 <timer_vSelect_mode+0xe>
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <timer_vSelect_mode+0xc>
 8a2:	6a c0       	rjmp	.+212    	; 0x978 <timer_vSelect_mode+0xe0>
 8a4:	78 c0       	rjmp	.+240    	; 0x996 <timer_vSelect_mode+0xfe>
    {
    case 0:
    {
        switch (timer_mode_select)
 8a6:	62 30       	cpi	r22, 0x02	; 2
 8a8:	41 f1       	breq	.+80     	; 0x8fa <timer_vSelect_mode+0x62>
 8aa:	28 f4       	brcc	.+10     	; 0x8b6 <timer_vSelect_mode+0x1e>
 8ac:	66 23       	and	r22, r22
 8ae:	51 f0       	breq	.+20     	; 0x8c4 <timer_vSelect_mode+0x2c>
 8b0:	61 30       	cpi	r22, 0x01	; 1
 8b2:	99 f0       	breq	.+38     	; 0x8da <timer_vSelect_mode+0x42>
 8b4:	70 c0       	rjmp	.+224    	; 0x996 <timer_vSelect_mode+0xfe>
 8b6:	c4 2f       	mov	r28, r20
 8b8:	63 30       	cpi	r22, 0x03	; 3
 8ba:	79 f1       	breq	.+94     	; 0x91a <timer_vSelect_mode+0x82>
 8bc:	64 30       	cpi	r22, 0x04	; 4
 8be:	09 f4       	brne	.+2      	; 0x8c2 <timer_vSelect_mode+0x2a>
 8c0:	45 c0       	rjmp	.+138    	; 0x94c <timer_vSelect_mode+0xb4>
 8c2:	69 c0       	rjmp	.+210    	; 0x996 <timer_vSelect_mode+0xfe>
            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            /*the timer overflow time = 256 * 128uT = 32.768ms */
            SET_BIT(TCCR0, CS00);
 8c4:	83 b7       	in	r24, 0x33	; 51
 8c6:	81 60       	ori	r24, 0x01	; 1
 8c8:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	83 bf       	out	0x33, r24	; 51

            sei();                 // enable interrupt in system
 8d0:	78 94       	sei
            SET_BIT(TIMSK, TOIE0); // enable interrupt of OVERFLOW timer0
 8d2:	89 b7       	in	r24, 0x39	; 57
 8d4:	81 60       	ori	r24, 0x01	; 1
 8d6:	89 bf       	out	0x39, r24	; 57

            break;
 8d8:	5e c0       	rjmp	.+188    	; 0x996 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_CTC: // user choosed ctc mode.

            /*set bits of TCCR0 to choose ctc mode*/
            /*to enable that wgm01 = 1 and wgm00 = 0*/
            SET_BIT(TCCR0, WGM01);
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	88 60       	ori	r24, 0x08	; 8
 8de:	83 bf       	out	0x33, r24	; 51

            OCR0 = 80; // to make it 10ms so it can be configurable
 8e0:	80 e5       	ldi	r24, 0x50	; 80
 8e2:	8c bf       	out	0x3c, r24	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 8e4:	83 b7       	in	r24, 0x33	; 51
 8e6:	81 60       	ori	r24, 0x01	; 1
 8e8:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 8ea:	83 b7       	in	r24, 0x33	; 51
 8ec:	84 60       	ori	r24, 0x04	; 4
 8ee:	83 bf       	out	0x33, r24	; 51

            sei();                 // enable interrupt in system
 8f0:	78 94       	sei
            SET_BIT(TIMSK, OCIE0); // enable interrupt of CTC timer0
 8f2:	89 b7       	in	r24, 0x39	; 57
 8f4:	82 60       	ori	r24, 0x02	; 2
 8f6:	89 bf       	out	0x39, r24	; 57
            break;
 8f8:	4e c0       	rjmp	.+156    	; 0x996 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_NON_PWM:

            SET_BIT(DDRB, 3); // set bin 3B as output
 8fa:	bb 9a       	sbi	0x17, 3	; 23

            /*set bits of TCCR0 to choose ctc mode*/
            /*to enable that wgm01 = 1 and wgm00 = 0*/
            SET_BIT(TCCR0, WGM01);
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	88 60       	ori	r24, 0x08	; 8
 900:	83 bf       	out	0x33, r24	; 51

            OCR0 = 64; // value of ocr0 to decide frequency
 902:	80 e4       	ldi	r24, 0x40	; 64
 904:	8c bf       	out	0x3c, r24	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 906:	83 b7       	in	r24, 0x33	; 51
 908:	81 60       	ori	r24, 0x01	; 1
 90a:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 90c:	83 b7       	in	r24, 0x33	; 51
 90e:	84 60       	ori	r24, 0x04	; 4
 910:	83 bf       	out	0x33, r24	; 51

            SET_BIT(TCCR0, COM00); // toggle oc0 on compare match
 912:	83 b7       	in	r24, 0x33	; 51
 914:	80 61       	ori	r24, 0x10	; 16
 916:	83 bf       	out	0x33, r24	; 51
            break;
 918:	3e c0       	rjmp	.+124    	; 0x996 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_FAST_PWM_INVERTING:

            DIO_vSetPinDir('b', 3, 1); // set pinB3 as O/P
 91a:	41 e0       	ldi	r20, 0x01	; 1
 91c:	63 e0       	ldi	r22, 0x03	; 3
 91e:	82 e6       	ldi	r24, 0x62	; 98
 920:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>

            /*select fast pwm mode*/
            SET_BIT(TCCR0, WGM00);
 924:	83 b7       	in	r24, 0x33	; 51
 926:	80 64       	ori	r24, 0x40	; 64
 928:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 92a:	83 b7       	in	r24, 0x33	; 51
 92c:	88 60       	ori	r24, 0x08	; 8
 92e:	83 bf       	out	0x33, r24	; 51

            OCR0 = timer_pwm_value;
 930:	cc bf       	out	0x3c, r28	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 932:	83 b7       	in	r24, 0x33	; 51
 934:	81 60       	ori	r24, 0x01	; 1
 936:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 938:	83 b7       	in	r24, 0x33	; 51
 93a:	84 60       	ori	r24, 0x04	; 4
 93c:	83 bf       	out	0x33, r24	; 51

            /*set oc0 compare on compare match,clear on overflow*/
            SET_BIT(TCCR0, COM00);
 93e:	83 b7       	in	r24, 0x33	; 51
 940:	80 61       	ori	r24, 0x10	; 16
 942:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, COM01);
 944:	83 b7       	in	r24, 0x33	; 51
 946:	80 62       	ori	r24, 0x20	; 32
 948:	83 bf       	out	0x33, r24	; 51
            break;
 94a:	25 c0       	rjmp	.+74     	; 0x996 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_FAST_PWM:
            DIO_vSetPinDir('b', 3, 1); // set pinB3 as O/P
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	63 e0       	ldi	r22, 0x03	; 3
 950:	82 e6       	ldi	r24, 0x62	; 98
 952:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>

            /*select fast pwm mode*/
            SET_BIT(TCCR0, WGM00);
 956:	83 b7       	in	r24, 0x33	; 51
 958:	80 64       	ori	r24, 0x40	; 64
 95a:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	88 60       	ori	r24, 0x08	; 8
 960:	83 bf       	out	0x33, r24	; 51

            OCR0 = timer_pwm_value;
 962:	cc bf       	out	0x3c, r28	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 964:	83 b7       	in	r24, 0x33	; 51
 966:	81 60       	ori	r24, 0x01	; 1
 968:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 96a:	83 b7       	in	r24, 0x33	; 51
 96c:	84 60       	ori	r24, 0x04	; 4
 96e:	83 bf       	out	0x33, r24	; 51

            /*set oc0 compare on compare match,clear on overflow*/
            SET_BIT(TCCR0, COM01);
 970:	83 b7       	in	r24, 0x33	; 51
 972:	80 62       	ori	r24, 0x20	; 32
 974:	83 bf       	out	0x33, r24	; 51
            break;
 976:	0f c0       	rjmp	.+30     	; 0x996 <timer_vSelect_mode+0xfe>
    }
    break;

    case 2:
    {
        switch (timer_mode_select)
 978:	65 30       	cpi	r22, 0x05	; 5
 97a:	69 f4       	brne	.+26     	; 0x996 <timer_vSelect_mode+0xfe>
        {
			case TIMER_OVERFLOW_EXT_OSC:
			{
				/*this driver is built as it will be used in Real Time Clock */
				/*set bit AS2 to choose external clk on pin TOSC1*/
				SET_BIT(ASSR, AS2);
 97c:	82 b5       	in	r24, 0x22	; 34
 97e:	88 60       	ori	r24, 0x08	; 8
 980:	82 bd       	out	0x22, r24	; 34

				/*set timer prescaller to 128 */
				SET_BIT(TCCR2, CS20);
 982:	85 b5       	in	r24, 0x25	; 37
 984:	81 60       	ori	r24, 0x01	; 1
 986:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2, CS22);
 988:	85 b5       	in	r24, 0x25	; 37
 98a:	84 60       	ori	r24, 0x04	; 4
 98c:	85 bd       	out	0x25, r24	; 37

				/*enable interrupt*/
				sei(); // global interrupt
 98e:	78 94       	sei
				SET_BIT(TIMSK, TOIE2);
 990:	89 b7       	in	r24, 0x39	; 57
 992:	80 64       	ori	r24, 0x40	; 64
 994:	89 bf       	out	0x39, r24	; 57
			default:
				break;
			}
    }
    }
}
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <__tablejump2__>:
 99a:	ee 0f       	add	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	05 90       	lpm	r0, Z+
 9a0:	f4 91       	lpm	r31, Z
 9a2:	e0 2d       	mov	r30, r0
 9a4:	09 94       	ijmp

000009a6 <_exit>:
 9a6:	f8 94       	cli

000009a8 <__stop_program>:
 9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <__stop_program>
