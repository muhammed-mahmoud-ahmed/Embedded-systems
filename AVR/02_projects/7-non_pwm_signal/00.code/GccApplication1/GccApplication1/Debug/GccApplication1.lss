
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062d  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  0000080d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "timer.h"

int main(void)
{

	timer_vSelect_mode(0,TIMER_MODE_NON_PWM);
  6c:	62 e0       	ldi	r22, 0x02	; 2
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	0e 94 3b 00 	call	0x76	; 0x76 <timer_vSelect_mode>
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <timer_vSelect_mode>:

// note if you are using overflow mode you can put any value for OCR
timer_vSelect_mode(unsigned char timer_num_select, unsigned char timer_mode_select)
{

    switch (timer_num_select)
  76:	81 11       	cpse	r24, r1
  78:	30 c0       	rjmp	.+96     	; 0xda <timer_vSelect_mode+0x64>
    {
        case 0:
        {
            switch (timer_mode_select)
  7a:	61 30       	cpi	r22, 0x01	; 1
  7c:	79 f0       	breq	.+30     	; 0x9c <timer_vSelect_mode+0x26>
  7e:	18 f0       	brcs	.+6      	; 0x86 <timer_vSelect_mode+0x10>
  80:	62 30       	cpi	r22, 0x02	; 2
  82:	e1 f0       	breq	.+56     	; 0xbc <timer_vSelect_mode+0x46>
  84:	08 95       	ret
                /*set timer clk*/
                /*assume 8MHZ is the mcu clk*/
                /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
                /*timer tick time --> 1/timer_clk = 128uT */
                /*the timer overflow time = 256 * 128uT = 32.768ms */
                SET_BIT(TCCR0, CS00);
  86:	83 b7       	in	r24, 0x33	; 51
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0, CS02);
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	83 bf       	out	0x33, r24	; 51

                sei();//enable interrupt in system
  92:	78 94       	sei
                SET_BIT(TIMSK,TOIE0);//enable interrupt of OVERFLOW timer0
  94:	89 b7       	in	r24, 0x39	; 57
  96:	81 60       	ori	r24, 0x01	; 1
  98:	89 bf       	out	0x39, r24	; 57
                
            break;
  9a:	08 95       	ret

            case TIMER_MODE_CTC: // user choosed ctc mode.

                /*set bits of TCCR0 to choose ctc mode*/
                /*to enable that wgm01 = 1 and wgm00 = 0*/
                SET_BIT(TCCR0, WGM01);
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	83 bf       	out	0x33, r24	; 51

                OCR0 = 80;//to make it 10ms so it can be configurable 
  a2:	80 e5       	ldi	r24, 0x50	; 80
  a4:	8c bf       	out	0x3c, r24	; 60

                /*set timer clk*/
                /*assume 8MHZ is the mcu clk*/
                /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
                /*timer tick time --> 1/timer_clk = 128uT */
                SET_BIT(TCCR0, CS00);
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0, CS02);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	83 bf       	out	0x33, r24	; 51

                
                
                sei();//enable interrupt in system
  b2:	78 94       	sei
                SET_BIT(TIMSK,OCIE0);//enable interrupt of CTC timer0
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	89 bf       	out	0x39, r24	; 57
            break;
  ba:	08 95       	ret

            case TIMER_MODE_NON_PWM :
            
                SET_BIT(DDRB,3);//set bin 3B as output
  bc:	bb 9a       	sbi	0x17, 3	; 23

                /*set bits of TCCR0 to choose ctc mode*/
                /*to enable that wgm01 = 1 and wgm00 = 0*/
                SET_BIT(TCCR0, WGM01);
  be:	83 b7       	in	r24, 0x33	; 51
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	83 bf       	out	0x33, r24	; 51
                
				OCR0=64;//value of ocr0 to decide frequency
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	8c bf       	out	0x3c, r24	; 60
                /*set timer clk*/
                /*assume 8MHZ is the mcu clk*/
                /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
                /*timer tick time --> 1/timer_clk = 128uT */
                SET_BIT(TCCR0, CS00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0, CS02);
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	83 bf       	out	0x33, r24	; 51

				SET_BIT(TCCR0,COM00);//toggle oc0 on compare match
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	83 bf       	out	0x33, r24	; 51
                break;            
            }
        }
        break;
    }
}
  da:	08 95       	ret

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
