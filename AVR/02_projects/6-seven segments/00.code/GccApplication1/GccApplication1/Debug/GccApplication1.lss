
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000056c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5f  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b9  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000683  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000540  00000000  00000000  00002849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_10>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0e 01       	movw	r0, r28
  56:	27 01       	movw	r4, r14
  58:	40 01       	movw	r8, r0
  5a:	59 01       	movw	r10, r18
  5c:	71 01       	movw	r14, r2
  5e:	71 01       	movw	r14, r2
  60:	71 01       	movw	r14, r2
  62:	71 01       	movw	r14, r2
  64:	71 01       	movw	r14, r2
  66:	71 01       	movw	r14, r2
  68:	71 01       	movw	r14, r2
  6a:	71 01       	movw	r14, r2
  6c:	71 01       	movw	r14, r2
  6e:	71 01       	movw	r14, r2
  70:	71 01       	movw	r14, r2
  72:	71 01       	movw	r14, r2
  74:	71 01       	movw	r14, r2
  76:	71 01       	movw	r14, r2
  78:	71 01       	movw	r14, r2
  7a:	71 01       	movw	r14, r2
  7c:	71 01       	movw	r14, r2
  7e:	71 01       	movw	r14, r2
  80:	71 01       	movw	r14, r2
  82:	71 01       	movw	r14, r2
  84:	71 01       	movw	r14, r2
  86:	71 01       	movw	r14, r2
  88:	71 01       	movw	r14, r2
  8a:	71 01       	movw	r14, r2
  8c:	71 01       	movw	r14, r2
  8e:	71 01       	movw	r14, r2
  90:	71 01       	movw	r14, r2
  92:	71 01       	movw	r14, r2
  94:	0e 01       	movw	r0, r28
  96:	27 01       	movw	r4, r14
  98:	40 01       	movw	r8, r0
  9a:	59 01       	movw	r10, r18
  9c:	7e 01       	movw	r14, r28
  9e:	97 01       	movw	r18, r14
  a0:	b0 01       	movw	r22, r0
  a2:	c9 01       	movw	r24, r18
  a4:	e1 01       	movw	r28, r2
  a6:	e1 01       	movw	r28, r2
  a8:	e1 01       	movw	r28, r2
  aa:	e1 01       	movw	r28, r2
  ac:	e1 01       	movw	r28, r2
  ae:	e1 01       	movw	r28, r2
  b0:	e1 01       	movw	r28, r2
  b2:	e1 01       	movw	r28, r2
  b4:	e1 01       	movw	r28, r2
  b6:	e1 01       	movw	r28, r2
  b8:	e1 01       	movw	r28, r2
  ba:	e1 01       	movw	r28, r2
  bc:	e1 01       	movw	r28, r2
  be:	e1 01       	movw	r28, r2
  c0:	e1 01       	movw	r28, r2
  c2:	e1 01       	movw	r28, r2
  c4:	e1 01       	movw	r28, r2
  c6:	e1 01       	movw	r28, r2
  c8:	e1 01       	movw	r28, r2
  ca:	e1 01       	movw	r28, r2
  cc:	e1 01       	movw	r28, r2
  ce:	e1 01       	movw	r28, r2
  d0:	e1 01       	movw	r28, r2
  d2:	e1 01       	movw	r28, r2
  d4:	e1 01       	movw	r28, r2
  d6:	e1 01       	movw	r28, r2
  d8:	e1 01       	movw	r28, r2
  da:	e1 01       	movw	r28, r2
  dc:	7e 01       	movw	r14, r28
  de:	97 01       	movw	r18, r14
  e0:	b0 01       	movw	r22, r0
  e2:	c9 01       	movw	r24, r18
  e4:	ed 01       	movw	r28, r26
  e6:	ef 01       	movw	r28, r30
  e8:	f1 01       	movw	r30, r2
  ea:	f3 01       	movw	r30, r6
  ec:	f4 01       	movw	r30, r8
  ee:	f4 01       	movw	r30, r8
  f0:	f4 01       	movw	r30, r8
  f2:	f4 01       	movw	r30, r8
  f4:	f4 01       	movw	r30, r8
  f6:	f4 01       	movw	r30, r8
  f8:	f4 01       	movw	r30, r8
  fa:	f4 01       	movw	r30, r8
  fc:	f4 01       	movw	r30, r8
  fe:	f4 01       	movw	r30, r8
 100:	f4 01       	movw	r30, r8
 102:	f4 01       	movw	r30, r8
 104:	f4 01       	movw	r30, r8
 106:	f4 01       	movw	r30, r8
 108:	f4 01       	movw	r30, r8
 10a:	f4 01       	movw	r30, r8
 10c:	f4 01       	movw	r30, r8
 10e:	f4 01       	movw	r30, r8
 110:	f4 01       	movw	r30, r8
 112:	f4 01       	movw	r30, r8
 114:	f4 01       	movw	r30, r8
 116:	f4 01       	movw	r30, r8
 118:	f4 01       	movw	r30, r8
 11a:	f4 01       	movw	r30, r8
 11c:	f4 01       	movw	r30, r8
 11e:	f4 01       	movw	r30, r8
 120:	f4 01       	movw	r30, r8
 122:	f4 01       	movw	r30, r8
 124:	ed 01       	movw	r28, r26
 126:	ef 01       	movw	r28, r30
 128:	f1 01       	movw	r30, r2
 12a:	f3 01       	movw	r30, r6
 12c:	00 02       	muls	r16, r16
 12e:	02 02       	muls	r16, r18
 130:	04 02       	muls	r16, r20
 132:	06 02       	muls	r16, r22
 134:	07 02       	muls	r16, r23
 136:	07 02       	muls	r16, r23
 138:	07 02       	muls	r16, r23
 13a:	07 02       	muls	r16, r23
 13c:	07 02       	muls	r16, r23
 13e:	07 02       	muls	r16, r23
 140:	07 02       	muls	r16, r23
 142:	07 02       	muls	r16, r23
 144:	07 02       	muls	r16, r23
 146:	07 02       	muls	r16, r23
 148:	07 02       	muls	r16, r23
 14a:	07 02       	muls	r16, r23
 14c:	07 02       	muls	r16, r23
 14e:	07 02       	muls	r16, r23
 150:	07 02       	muls	r16, r23
 152:	07 02       	muls	r16, r23
 154:	07 02       	muls	r16, r23
 156:	07 02       	muls	r16, r23
 158:	07 02       	muls	r16, r23
 15a:	07 02       	muls	r16, r23
 15c:	07 02       	muls	r16, r23
 15e:	07 02       	muls	r16, r23
 160:	07 02       	muls	r16, r23
 162:	07 02       	muls	r16, r23
 164:	07 02       	muls	r16, r23
 166:	07 02       	muls	r16, r23
 168:	07 02       	muls	r16, r23
 16a:	07 02       	muls	r16, r23
 16c:	00 02       	muls	r16, r16
 16e:	02 02       	muls	r16, r18
 170:	04 02       	muls	r16, r20
 172:	06 02       	muls	r16, r22

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ec e6       	ldi	r30, 0x6C	; 108
 188:	f5 e0       	ldi	r31, 0x05	; 5
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a0 37       	cpi	r26, 0x70	; 112
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	a0 e7       	ldi	r26, 0x70	; 112
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	a3 37       	cpi	r26, 0x73	; 115
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 08 02 	call	0x410	; 0x410 <main>
 1aa:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <seven_segment_vIinitialize>:
#include "DIO.h"

//7-seg initialize
void seven_segment_vIinitialize(unsigned char port_name)
{
    DIO_vSetPortDir(port_name,0xff);
 1b2:	6f ef       	ldi	r22, 0xFF	; 255
 1b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_vSetPortDir>
 1b8:	08 95       	ret

000001ba <seven_segment_vWrite>:
} 

//7-seg write
void seven_segment_vWrite(unsigned char port_name,unsigned char value)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	60 97       	sbiw	r28, 0x10	; 16
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
    unsigned char seven_segment[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
 1ce:	90 e1       	ldi	r25, 0x10	; 16
 1d0:	e0 e6       	ldi	r30, 0x60	; 96
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	de 01       	movw	r26, r28
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	9a 95       	dec	r25
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <seven_segment_vWrite+0x1e>
    DIO_vWritePortValue(port_name,seven_segment[value]);
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e6 0f       	add	r30, r22
 1ea:	f1 1d       	adc	r31, r1
 1ec:	60 81       	ld	r22, Z
 1ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vWritePortValue>
 1f2:	60 96       	adiw	r28, 0x10	; 16
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <DIO_vSetPinDir>:
	{
		DIO_vWritePinValue(port_name, pin_number, 1);
	}
	else
	{
		DIO_vWritePinValue(port_name, pin_number, 1);
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	e1 54       	subi	r30, 0x41	; 65
 20a:	f1 09       	sbc	r31, r1
 20c:	e4 32       	cpi	r30, 0x24	; 36
 20e:	f1 05       	cpc	r31, r1
 210:	08 f0       	brcs	.+2      	; 0x214 <DIO_vSetPinDir+0x10>
 212:	67 c0       	rjmp	.+206    	; 0x2e2 <DIO_vSetPinDir+0xde>
 214:	e6 5d       	subi	r30, 0xD6	; 214
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__tablejump2__>
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	59 f4       	brne	.+22     	; 0x236 <DIO_vSetPinDir+0x32>
 220:	2a b3       	in	r18, 0x1a	; 26
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_vSetPinDir+0x28>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_vSetPinDir+0x24>
 230:	82 2b       	or	r24, r18
 232:	8a bb       	out	0x1a, r24	; 26
 234:	08 95       	ret
 236:	2a b3       	in	r18, 0x1a	; 26
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_vSetPinDir+0x3e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_vSetPinDir+0x3a>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	8a bb       	out	0x1a, r24	; 26
 24c:	08 95       	ret
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	59 f4       	brne	.+22     	; 0x268 <DIO_vSetPinDir+0x64>
 252:	27 b3       	in	r18, 0x17	; 23
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_vSetPinDir+0x5a>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_vSetPinDir+0x56>
 262:	82 2b       	or	r24, r18
 264:	87 bb       	out	0x17, r24	; 23
 266:	08 95       	ret
 268:	27 b3       	in	r18, 0x17	; 23
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vSetPinDir+0x70>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vSetPinDir+0x6c>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	87 bb       	out	0x17, r24	; 23
 27e:	08 95       	ret
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	59 f4       	brne	.+22     	; 0x29a <DIO_vSetPinDir+0x96>
 284:	24 b3       	in	r18, 0x14	; 20
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_vSetPinDir+0x8c>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_vSetPinDir+0x88>
 294:	82 2b       	or	r24, r18
 296:	84 bb       	out	0x14, r24	; 20
 298:	08 95       	ret
 29a:	24 b3       	in	r18, 0x14	; 20
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_vSetPinDir+0xa2>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_vSetPinDir+0x9e>
 2aa:	80 95       	com	r24
 2ac:	82 23       	and	r24, r18
 2ae:	84 bb       	out	0x14, r24	; 20
 2b0:	08 95       	ret
 2b2:	41 30       	cpi	r20, 0x01	; 1
 2b4:	59 f4       	brne	.+22     	; 0x2cc <DIO_vSetPinDir+0xc8>
 2b6:	21 b3       	in	r18, 0x11	; 17
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_vSetPinDir+0xbe>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_vSetPinDir+0xba>
 2c6:	82 2b       	or	r24, r18
 2c8:	81 bb       	out	0x11, r24	; 17
 2ca:	08 95       	ret
 2cc:	21 b3       	in	r18, 0x11	; 17
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_vSetPinDir+0xd4>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_vSetPinDir+0xd0>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	81 bb       	out	0x11, r24	; 17
 2e2:	08 95       	ret

000002e4 <DIO_vWritePinValue>:
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	e1 54       	subi	r30, 0x41	; 65
 2ea:	f1 09       	sbc	r31, r1
 2ec:	e4 32       	cpi	r30, 0x24	; 36
 2ee:	f1 05       	cpc	r31, r1
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <DIO_vWritePinValue+0x10>
 2f2:	67 c0       	rjmp	.+206    	; 0x3c2 <DIO_vWritePinValue+0xde>
 2f4:	e2 5b       	subi	r30, 0xB2	; 178
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__tablejump2__>
 2fc:	41 30       	cpi	r20, 0x01	; 1
 2fe:	59 f4       	brne	.+22     	; 0x316 <DIO_vWritePinValue+0x32>
 300:	2b b3       	in	r18, 0x1b	; 27
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_vWritePinValue+0x28>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_vWritePinValue+0x24>
 310:	82 2b       	or	r24, r18
 312:	8b bb       	out	0x1b, r24	; 27
 314:	08 95       	ret
 316:	2b b3       	in	r18, 0x1b	; 27
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_vWritePinValue+0x3e>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_vWritePinValue+0x3a>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	8b bb       	out	0x1b, r24	; 27
 32c:	08 95       	ret
 32e:	41 30       	cpi	r20, 0x01	; 1
 330:	59 f4       	brne	.+22     	; 0x348 <DIO_vWritePinValue+0x64>
 332:	28 b3       	in	r18, 0x18	; 24
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_vWritePinValue+0x5a>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_vWritePinValue+0x56>
 342:	82 2b       	or	r24, r18
 344:	88 bb       	out	0x18, r24	; 24
 346:	08 95       	ret
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_vWritePinValue+0x70>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_vWritePinValue+0x6c>
 358:	80 95       	com	r24
 35a:	82 23       	and	r24, r18
 35c:	88 bb       	out	0x18, r24	; 24
 35e:	08 95       	ret
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	59 f4       	brne	.+22     	; 0x37a <DIO_vWritePinValue+0x96>
 364:	25 b3       	in	r18, 0x15	; 21
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_vWritePinValue+0x8c>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_vWritePinValue+0x88>
 374:	82 2b       	or	r24, r18
 376:	85 bb       	out	0x15, r24	; 21
 378:	08 95       	ret
 37a:	25 b3       	in	r18, 0x15	; 21
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_vWritePinValue+0xa2>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_vWritePinValue+0x9e>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	85 bb       	out	0x15, r24	; 21
 390:	08 95       	ret
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	59 f4       	brne	.+22     	; 0x3ac <DIO_vWritePinValue+0xc8>
 396:	22 b3       	in	r18, 0x12	; 18
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_vWritePinValue+0xbe>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_vWritePinValue+0xba>
 3a6:	82 2b       	or	r24, r18
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	08 95       	ret
 3ac:	22 b3       	in	r18, 0x12	; 18
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_vWritePinValue+0xd4>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_vWritePinValue+0xd0>
 3bc:	80 95       	com	r24
 3be:	82 23       	and	r24, r18
 3c0:	82 bb       	out	0x12, r24	; 18
 3c2:	08 95       	ret

000003c4 <DIO_vSetPortDir>:
}

// Port Direction
void DIO_vSetPortDir(unsigned char port_name, unsigned char port_direction)
{
	switch (port_name)
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	fc 01       	movw	r30, r24
 3c8:	e1 54       	subi	r30, 0x41	; 65
 3ca:	f1 09       	sbc	r31, r1
 3cc:	e4 32       	cpi	r30, 0x24	; 36
 3ce:	f1 05       	cpc	r31, r1
 3d0:	58 f4       	brcc	.+22     	; 0x3e8 <DIO_vSetPortDir+0x24>
 3d2:	ee 58       	subi	r30, 0x8E	; 142
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__tablejump2__>
	{
	case 'a':
	case 'A':
		DDRA = port_direction;
 3da:	6a bb       	out	0x1a, r22	; 26
		break;
 3dc:	08 95       	ret

	case 'b':
	case 'B':
		DDRB = port_direction;
 3de:	67 bb       	out	0x17, r22	; 23
		break;
 3e0:	08 95       	ret

	case 'c':
	case 'C':
		DDRC = port_direction;
 3e2:	64 bb       	out	0x14, r22	; 20
		break;
 3e4:	08 95       	ret

	case 'd':
	case 'D':
		DDRD = port_direction;
 3e6:	61 bb       	out	0x11, r22	; 17
 3e8:	08 95       	ret

000003ea <DIO_vWritePortValue>:
}

// Write Port
void DIO_vWritePortValue(unsigned char port_name, unsigned char port_value)
{
	switch (port_name)
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	e1 54       	subi	r30, 0x41	; 65
 3f0:	f1 09       	sbc	r31, r1
 3f2:	e4 32       	cpi	r30, 0x24	; 36
 3f4:	f1 05       	cpc	r31, r1
 3f6:	58 f4       	brcc	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f8:	ea 56       	subi	r30, 0x6A	; 106
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__tablejump2__>
	{
	case 'a':
	case 'A':
		PORTA = port_value;
 400:	6b bb       	out	0x1b, r22	; 27
		break;
 402:	08 95       	ret

	case 'b':
	case 'B':
		PORTB = port_value;
 404:	68 bb       	out	0x18, r22	; 24
		break;
 406:	08 95       	ret

	case 'c':
	case 'C':
		PORTC = port_value;
 408:	65 bb       	out	0x15, r22	; 21
		break;
 40a:	08 95       	ret

	case 'd':
	case 'D':
		PORTD = port_value;
 40c:	62 bb       	out	0x12, r22	; 18
 40e:	08 95       	ret

00000410 <main>:
unsigned char seven_segment_counter =0;
volatile unsigned char flag =0;

int main(void)
{
	timer_vSelect_mode(0,TIMER_MODE_CTC);
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 8c 02 	call	0x518	; 0x518 <timer_vSelect_mode>
	seven_segment_vIinitialize('c');
 418:	83 e6       	ldi	r24, 0x63	; 99
 41a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <seven_segment_vIinitialize>
	DIO_vSetPinDir('d',0,1);
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	84 e6       	ldi	r24, 0x64	; 100
 424:	0e 94 02 01 	call	0x204	; 0x204 <DIO_vSetPinDir>
	DIO_vSetPinDir('d',1,1);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	84 e6       	ldi	r24, 0x64	; 100
 42e:	0e 94 02 01 	call	0x204	; 0x204 <DIO_vSetPinDir>
	DIO_vWritePinValue('d',0,0);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	84 e6       	ldi	r24, 0x64	; 100
 438:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_vWritePinValue>
	DIO_vWritePinValue('d',1,0);
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	84 e6       	ldi	r24, 0x64	; 100
 442:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_vWritePinValue>
	seven_segment_vWrite('c',0);
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	83 e6       	ldi	r24, 0x63	; 99
 44a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <seven_segment_vWrite>
	timer_counter=0;
 44e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timer_counter>
    while (1) 
    {
		
		DIO_vWritePinValue('d',0,1);
		DIO_vWritePinValue('d',1,0);
		seven_segment_vWrite('c',seven_segment_counter%10);
 452:	cd ec       	ldi	r28, 0xCD	; 205
	timer_counter=0;
    /* Replace with your application code */
    while (1) 
    {
		
		DIO_vWritePinValue('d',0,1);
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	84 e6       	ldi	r24, 0x64	; 100
 45a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_vWritePinValue>
		DIO_vWritePinValue('d',1,0);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	84 e6       	ldi	r24, 0x64	; 100
 464:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_vWritePinValue>
		seven_segment_vWrite('c',seven_segment_counter%10);
 468:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <seven_segment_counter>
 46c:	6c 9f       	mul	r22, r28
 46e:	81 2d       	mov	r24, r1
 470:	11 24       	eor	r1, r1
 472:	86 95       	lsr	r24
 474:	86 95       	lsr	r24
 476:	86 95       	lsr	r24
 478:	88 0f       	add	r24, r24
 47a:	98 2f       	mov	r25, r24
 47c:	99 0f       	add	r25, r25
 47e:	99 0f       	add	r25, r25
 480:	89 0f       	add	r24, r25
 482:	68 1b       	sub	r22, r24
 484:	83 e6       	ldi	r24, 0x63	; 99
 486:	0e 94 dd 00 	call	0x1ba	; 0x1ba <seven_segment_vWrite>
		while(flag==0);
 48a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 48e:	88 23       	and	r24, r24
 490:	e1 f3       	breq	.-8      	; 0x48a <main+0x7a>
		flag=0;
 492:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
		DIO_vWritePinValue('d',0,0);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	84 e6       	ldi	r24, 0x64	; 100
 49c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_vWritePinValue>
		DIO_vWritePinValue('d',1,1);
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	84 e6       	ldi	r24, 0x64	; 100
 4a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_vWritePinValue>
		seven_segment_vWrite('c',seven_segment_counter/10);
 4aa:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <seven_segment_counter>
 4ae:	6c 9f       	mul	r22, r28
 4b0:	61 2d       	mov	r22, r1
 4b2:	11 24       	eor	r1, r1
 4b4:	66 95       	lsr	r22
 4b6:	66 95       	lsr	r22
 4b8:	66 95       	lsr	r22
 4ba:	83 e6       	ldi	r24, 0x63	; 99
 4bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <seven_segment_vWrite>
		while(flag==0);
 4c0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 4c4:	88 23       	and	r24, r24
 4c6:	e1 f3       	breq	.-8      	; 0x4c0 <main+0xb0>
		flag=0; 
 4c8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
		if(timer_counter>=100)
 4cc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <timer_counter>
 4d0:	84 36       	cpi	r24, 0x64	; 100
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <main+0xc6>
 4d4:	bf cf       	rjmp	.-130    	; 0x454 <main+0x44>
		{
			timer_counter=0;
 4d6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timer_counter>
			seven_segment_counter++;
 4da:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <seven_segment_counter>
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <seven_segment_counter>
			if(seven_segment_counter==21)
 4e4:	85 31       	cpi	r24, 0x15	; 21
 4e6:	09 f0       	breq	.+2      	; 0x4ea <main+0xda>
 4e8:	b5 cf       	rjmp	.-150    	; 0x454 <main+0x44>
			{
				seven_segment_counter=0;
 4ea:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <seven_segment_counter>
 4ee:	b2 cf       	rjmp	.-156    	; 0x454 <main+0x44>

000004f0 <__vector_10>:
    }
}


ISR(TIMER0_COMP_vect)
{
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	8f 93       	push	r24
	timer_counter++;
 4fc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <timer_counter>
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <timer_counter>
	flag=1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
}
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <timer_vSelect_mode>:

// note if you are using overflow mode you can put any value for OCR
timer_vSelect_mode(unsigned char timer_num_select, unsigned char timer_mode_select)
{

    switch (timer_num_select)
 518:	81 11       	cpse	r24, r1
 51a:	1f c0       	rjmp	.+62     	; 0x55a <timer_vSelect_mode+0x42>
    {
        case 0:
        {
            switch (timer_mode_select)
 51c:	66 23       	and	r22, r22
 51e:	19 f0       	breq	.+6      	; 0x526 <timer_vSelect_mode+0xe>
 520:	61 30       	cpi	r22, 0x01	; 1
 522:	61 f0       	breq	.+24     	; 0x53c <timer_vSelect_mode+0x24>
 524:	08 95       	ret
                /*set timer clk*/
                /*assume 8MHZ is the mcu clk*/
                /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
                /*timer tick time --> 1/timer_clk = 128uT */
                /*the timer overflow time = 256 * 128uT = 32.768ms */
                SET_BIT(TCCR0, CS00);
 526:	83 b7       	in	r24, 0x33	; 51
 528:	81 60       	ori	r24, 0x01	; 1
 52a:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0, CS02);
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	84 60       	ori	r24, 0x04	; 4
 530:	83 bf       	out	0x33, r24	; 51

                sei();//enable interrupt in system
 532:	78 94       	sei
                SET_BIT(TIMSK,TOIE0);//enable interrupt of OVERFLOW timer0
 534:	89 b7       	in	r24, 0x39	; 57
 536:	81 60       	ori	r24, 0x01	; 1
 538:	89 bf       	out	0x39, r24	; 57



            break;
 53a:	08 95       	ret

            case TIMER_MODE_CTC: // user choosed ctc mode.

                /*set bits of TCCR0 to choose ctc mode*/
                /*to enable that wgm01 = 1 and wgm00 = 0*/
                SET_BIT(TCCR0, WGM01);
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	88 60       	ori	r24, 0x08	; 8
 540:	83 bf       	out	0x33, r24	; 51

                OCR0 = 80;//to make it 10ms so it can be configurable 
 542:	80 e5       	ldi	r24, 0x50	; 80
 544:	8c bf       	out	0x3c, r24	; 60

                /*set timer clk*/
                /*assume 8MHZ is the mcu clk*/
                /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
                /*timer tick time --> 1/timer_clk = 128uT */
                SET_BIT(TCCR0, CS00);
 546:	83 b7       	in	r24, 0x33	; 51
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0, CS02);
 54c:	83 b7       	in	r24, 0x33	; 51
 54e:	84 60       	ori	r24, 0x04	; 4
 550:	83 bf       	out	0x33, r24	; 51

                
                
                sei();//enable interrupt in system
 552:	78 94       	sei
                SET_BIT(TIMSK,OCIE0);//enable interrupt of CTC timer0
 554:	89 b7       	in	r24, 0x39	; 57
 556:	82 60       	ori	r24, 0x02	; 2
 558:	89 bf       	out	0x39, r24	; 57

            }
        }
        break;
    }
}
 55a:	08 95       	ret

0000055c <__tablejump2__>:
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	05 90       	lpm	r0, Z+
 562:	f4 91       	lpm	r31, Z
 564:	e0 2d       	mov	r30, r0
 566:	09 94       	ijmp

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
