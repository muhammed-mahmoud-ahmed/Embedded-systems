
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000e12  00000ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ca  008000ca  00000f10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002157  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5f  00000000  00000000  00003273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb4  00000000  00000000  00003dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000144e  00000000  00000000  000057d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006c24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  14:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_5>
  18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  54:	1b 01       	movw	r2, r22
  56:	21 01       	movw	r4, r2
  58:	27 01       	movw	r4, r14
  5a:	2d 01       	movw	r4, r26
  5c:	32 01       	movw	r6, r4
  5e:	32 01       	movw	r6, r4
  60:	32 01       	movw	r6, r4
  62:	32 01       	movw	r6, r4
  64:	32 01       	movw	r6, r4
  66:	32 01       	movw	r6, r4
  68:	32 01       	movw	r6, r4
  6a:	32 01       	movw	r6, r4
  6c:	32 01       	movw	r6, r4
  6e:	32 01       	movw	r6, r4
  70:	32 01       	movw	r6, r4
  72:	32 01       	movw	r6, r4
  74:	32 01       	movw	r6, r4
  76:	32 01       	movw	r6, r4
  78:	32 01       	movw	r6, r4
  7a:	32 01       	movw	r6, r4
  7c:	32 01       	movw	r6, r4
  7e:	32 01       	movw	r6, r4
  80:	32 01       	movw	r6, r4
  82:	32 01       	movw	r6, r4
  84:	32 01       	movw	r6, r4
  86:	32 01       	movw	r6, r4
  88:	32 01       	movw	r6, r4
  8a:	32 01       	movw	r6, r4
  8c:	32 01       	movw	r6, r4
  8e:	32 01       	movw	r6, r4
  90:	32 01       	movw	r6, r4
  92:	32 01       	movw	r6, r4
  94:	1b 01       	movw	r2, r22
  96:	21 01       	movw	r4, r2
  98:	27 01       	movw	r4, r14
  9a:	2d 01       	movw	r4, r26
  9c:	4a 01       	movw	r8, r20
  9e:	63 01       	movw	r12, r6
  a0:	7c 01       	movw	r14, r24
  a2:	95 01       	movw	r18, r10
  a4:	ad 01       	movw	r20, r26
  a6:	ad 01       	movw	r20, r26
  a8:	ad 01       	movw	r20, r26
  aa:	ad 01       	movw	r20, r26
  ac:	ad 01       	movw	r20, r26
  ae:	ad 01       	movw	r20, r26
  b0:	ad 01       	movw	r20, r26
  b2:	ad 01       	movw	r20, r26
  b4:	ad 01       	movw	r20, r26
  b6:	ad 01       	movw	r20, r26
  b8:	ad 01       	movw	r20, r26
  ba:	ad 01       	movw	r20, r26
  bc:	ad 01       	movw	r20, r26
  be:	ad 01       	movw	r20, r26
  c0:	ad 01       	movw	r20, r26
  c2:	ad 01       	movw	r20, r26
  c4:	ad 01       	movw	r20, r26
  c6:	ad 01       	movw	r20, r26
  c8:	ad 01       	movw	r20, r26
  ca:	ad 01       	movw	r20, r26
  cc:	ad 01       	movw	r20, r26
  ce:	ad 01       	movw	r20, r26
  d0:	ad 01       	movw	r20, r26
  d2:	ad 01       	movw	r20, r26
  d4:	ad 01       	movw	r20, r26
  d6:	ad 01       	movw	r20, r26
  d8:	ad 01       	movw	r20, r26
  da:	ad 01       	movw	r20, r26
  dc:	4a 01       	movw	r8, r20
  de:	63 01       	movw	r12, r6
  e0:	7c 01       	movw	r14, r24
  e2:	95 01       	movw	r18, r10
  e4:	ba 01       	movw	r22, r20
  e6:	d3 01       	movw	r26, r6
  e8:	ec 01       	movw	r28, r24
  ea:	05 02       	muls	r16, r21
  ec:	1d 02       	muls	r17, r29
  ee:	1d 02       	muls	r17, r29
  f0:	1d 02       	muls	r17, r29
  f2:	1d 02       	muls	r17, r29
  f4:	1d 02       	muls	r17, r29
  f6:	1d 02       	muls	r17, r29
  f8:	1d 02       	muls	r17, r29
  fa:	1d 02       	muls	r17, r29
  fc:	1d 02       	muls	r17, r29
  fe:	1d 02       	muls	r17, r29
 100:	1d 02       	muls	r17, r29
 102:	1d 02       	muls	r17, r29
 104:	1d 02       	muls	r17, r29
 106:	1d 02       	muls	r17, r29
 108:	1d 02       	muls	r17, r29
 10a:	1d 02       	muls	r17, r29
 10c:	1d 02       	muls	r17, r29
 10e:	1d 02       	muls	r17, r29
 110:	1d 02       	muls	r17, r29
 112:	1d 02       	muls	r17, r29
 114:	1d 02       	muls	r17, r29
 116:	1d 02       	muls	r17, r29
 118:	1d 02       	muls	r17, r29
 11a:	1d 02       	muls	r17, r29
 11c:	1d 02       	muls	r17, r29
 11e:	1d 02       	muls	r17, r29
 120:	1d 02       	muls	r17, r29
 122:	1d 02       	muls	r17, r29
 124:	ba 01       	movw	r22, r20
 126:	d3 01       	movw	r26, r6
 128:	ec 01       	movw	r28, r24
 12a:	05 02       	muls	r16, r21
 12c:	2c 02       	muls	r18, r28
 12e:	3f 02       	muls	r19, r31
 130:	52 02       	muls	r21, r18
 132:	65 02       	muls	r22, r21
 134:	77 02       	muls	r23, r23
 136:	77 02       	muls	r23, r23
 138:	77 02       	muls	r23, r23
 13a:	77 02       	muls	r23, r23
 13c:	77 02       	muls	r23, r23
 13e:	77 02       	muls	r23, r23
 140:	77 02       	muls	r23, r23
 142:	77 02       	muls	r23, r23
 144:	77 02       	muls	r23, r23
 146:	77 02       	muls	r23, r23
 148:	77 02       	muls	r23, r23
 14a:	77 02       	muls	r23, r23
 14c:	77 02       	muls	r23, r23
 14e:	77 02       	muls	r23, r23
 150:	77 02       	muls	r23, r23
 152:	77 02       	muls	r23, r23
 154:	77 02       	muls	r23, r23
 156:	77 02       	muls	r23, r23
 158:	77 02       	muls	r23, r23
 15a:	77 02       	muls	r23, r23
 15c:	77 02       	muls	r23, r23
 15e:	77 02       	muls	r23, r23
 160:	77 02       	muls	r23, r23
 162:	77 02       	muls	r23, r23
 164:	77 02       	muls	r23, r23
 166:	77 02       	muls	r23, r23
 168:	77 02       	muls	r23, r23
 16a:	77 02       	muls	r23, r23
 16c:	2c 02       	muls	r18, r28
 16e:	3f 02       	muls	r19, r31
 170:	52 02       	muls	r21, r18
 172:	65 02       	muls	r22, r21
 174:	8d 02       	muls	r24, r29
 176:	8f 02       	muls	r24, r31
 178:	91 02       	muls	r25, r17
 17a:	93 02       	muls	r25, r19
 17c:	94 02       	muls	r25, r20
 17e:	94 02       	muls	r25, r20
 180:	94 02       	muls	r25, r20
 182:	94 02       	muls	r25, r20
 184:	94 02       	muls	r25, r20
 186:	94 02       	muls	r25, r20
 188:	94 02       	muls	r25, r20
 18a:	94 02       	muls	r25, r20
 18c:	94 02       	muls	r25, r20
 18e:	94 02       	muls	r25, r20
 190:	94 02       	muls	r25, r20
 192:	94 02       	muls	r25, r20
 194:	94 02       	muls	r25, r20
 196:	94 02       	muls	r25, r20
 198:	94 02       	muls	r25, r20
 19a:	94 02       	muls	r25, r20
 19c:	94 02       	muls	r25, r20
 19e:	94 02       	muls	r25, r20
 1a0:	94 02       	muls	r25, r20
 1a2:	94 02       	muls	r25, r20
 1a4:	94 02       	muls	r25, r20
 1a6:	94 02       	muls	r25, r20
 1a8:	94 02       	muls	r25, r20
 1aa:	94 02       	muls	r25, r20
 1ac:	94 02       	muls	r25, r20
 1ae:	94 02       	muls	r25, r20
 1b0:	94 02       	muls	r25, r20
 1b2:	94 02       	muls	r25, r20
 1b4:	8d 02       	muls	r24, r29
 1b6:	8f 02       	muls	r24, r31
 1b8:	91 02       	muls	r25, r17
 1ba:	93 02       	muls	r25, r19

000001bc <__ctors_end>:
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf e5       	ldi	r28, 0x5F	; 95
 1c2:	d8 e0       	ldi	r29, 0x08	; 8
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	a0 e6       	ldi	r26, 0x60	; 96
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e2 e1       	ldi	r30, 0x12	; 18
 1d0:	fe e0       	ldi	r31, 0x0E	; 14
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
 1d4:	05 90       	lpm	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	aa 3c       	cpi	r26, 0xCA	; 202
 1da:	b1 07       	cpc	r27, r17
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	aa ec       	ldi	r26, 0xCA	; 202
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
 1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
 1e8:	ae 3c       	cpi	r26, 0xCE	; 206
 1ea:	b2 07       	cpc	r27, r18
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
 1ee:	0e 94 32 04 	call	0x864	; 0x864 <main>
 1f2:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_exit>

000001f6 <__bad_interrupt>:
 1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <seven_segment_vWrite>:
    }
}

// 7-seg write
void seven_segment_vWrite(unsigned char port_name, unsigned char value)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	60 97       	sbiw	r28, 0x10	; 16
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
    #if defined  cc
    unsigned char seven_segment[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
 20e:	90 e1       	ldi	r25, 0x10	; 16
 210:	e0 e6       	ldi	r30, 0x60	; 96
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	de 01       	movw	r26, r28
 216:	11 96       	adiw	r26, 0x01	; 1
 218:	01 90       	ld	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	9a 95       	dec	r25
 21e:	e1 f7       	brne	.-8      	; 0x218 <seven_segment_vWrite+0x1e>
    #elif defined ca
    unsigned char seven_segment[16] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d,~0x7d, ~0x07, ~0x7f, ~0x6f, ~0x77, ~0x7c, ~0x39, ~0x5e, ~0x79, ~0x71};
    #endif
    switch (port_name)
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	e1 54       	subi	r30, 0x41	; 65
 226:	f1 09       	sbc	r31, r1
 228:	e4 32       	cpi	r30, 0x24	; 36
 22a:	f1 05       	cpc	r31, r1
 22c:	d8 f4       	brcc	.+54     	; 0x264 <seven_segment_vWrite+0x6a>
 22e:	e6 5d       	subi	r30, 0xD6	; 214
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__tablejump2__>
    {
    case 'a':
    case 'A':
        PORTA = seven_segment[value];
 236:	fe 01       	movw	r30, r28
 238:	e6 0f       	add	r30, r22
 23a:	f1 1d       	adc	r31, r1
 23c:	81 81       	ldd	r24, Z+1	; 0x01
 23e:	8b bb       	out	0x1b, r24	; 27
        break;
 240:	11 c0       	rjmp	.+34     	; 0x264 <seven_segment_vWrite+0x6a>

    case 'b':
    case 'B':
        PORTB = seven_segment[value];
 242:	fe 01       	movw	r30, r28
 244:	e6 0f       	add	r30, r22
 246:	f1 1d       	adc	r31, r1
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	88 bb       	out	0x18, r24	; 24
        break;
 24c:	0b c0       	rjmp	.+22     	; 0x264 <seven_segment_vWrite+0x6a>

    case 'c':
    case 'C':
        PORTC = seven_segment[value];
 24e:	fe 01       	movw	r30, r28
 250:	e6 0f       	add	r30, r22
 252:	f1 1d       	adc	r31, r1
 254:	81 81       	ldd	r24, Z+1	; 0x01
 256:	85 bb       	out	0x15, r24	; 21
        break;
 258:	05 c0       	rjmp	.+10     	; 0x264 <seven_segment_vWrite+0x6a>

    case 'd':
    case 'D':
        PORTD = seven_segment[value];
 25a:	fe 01       	movw	r30, r28
 25c:	e6 0f       	add	r30, r22
 25e:	f1 1d       	adc	r31, r1
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	82 bb       	out	0x12, r24	; 18
        break;

    default:
        break;
    }
 264:	60 96       	adiw	r28, 0x10	; 16
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <button_ucRead>:
}

//button read
unsigned char button_ucRead(unsigned char port_name,unsigned char pin_num)
{
    return DIO_u8ReadPin(port_name,pin_num);
 276:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_u8ReadPin>
}
 27a:	08 95       	ret

0000027c <DIO_vSetPinDir>:
	{
		DIO_vWritePortValue(port_name, 255);
	}
	else
	{
		DIO_vWritePortValue(port_name, 0);
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	fc 01       	movw	r30, r24
 280:	e1 54       	subi	r30, 0x41	; 65
 282:	f1 09       	sbc	r31, r1
 284:	e4 32       	cpi	r30, 0x24	; 36
 286:	f1 05       	cpc	r31, r1
 288:	08 f0       	brcs	.+2      	; 0x28c <DIO_vSetPinDir+0x10>
 28a:	67 c0       	rjmp	.+206    	; 0x35a <DIO_vSetPinDir+0xde>
 28c:	e2 5b       	subi	r30, 0xB2	; 178
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__tablejump2__>
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	59 f4       	brne	.+22     	; 0x2ae <DIO_vSetPinDir+0x32>
 298:	2a b3       	in	r18, 0x1a	; 26
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vSetPinDir+0x28>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vSetPinDir+0x24>
 2a8:	82 2b       	or	r24, r18
 2aa:	8a bb       	out	0x1a, r24	; 26
 2ac:	08 95       	ret
 2ae:	2a b3       	in	r18, 0x1a	; 26
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_vSetPinDir+0x3e>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_vSetPinDir+0x3a>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	8a bb       	out	0x1a, r24	; 26
 2c4:	08 95       	ret
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	59 f4       	brne	.+22     	; 0x2e0 <DIO_vSetPinDir+0x64>
 2ca:	27 b3       	in	r18, 0x17	; 23
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vSetPinDir+0x5a>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vSetPinDir+0x56>
 2da:	82 2b       	or	r24, r18
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	08 95       	ret
 2e0:	27 b3       	in	r18, 0x17	; 23
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vSetPinDir+0x70>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vSetPinDir+0x6c>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	87 bb       	out	0x17, r24	; 23
 2f6:	08 95       	ret
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	59 f4       	brne	.+22     	; 0x312 <DIO_vSetPinDir+0x96>
 2fc:	24 b3       	in	r18, 0x14	; 20
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_vSetPinDir+0x8c>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_vSetPinDir+0x88>
 30c:	82 2b       	or	r24, r18
 30e:	84 bb       	out	0x14, r24	; 20
 310:	08 95       	ret
 312:	24 b3       	in	r18, 0x14	; 20
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_vSetPinDir+0xa2>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_vSetPinDir+0x9e>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	84 bb       	out	0x14, r24	; 20
 328:	08 95       	ret
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	59 f4       	brne	.+22     	; 0x344 <DIO_vSetPinDir+0xc8>
 32e:	21 b3       	in	r18, 0x11	; 17
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_vSetPinDir+0xbe>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_vSetPinDir+0xba>
 33e:	82 2b       	or	r24, r18
 340:	81 bb       	out	0x11, r24	; 17
 342:	08 95       	ret
 344:	21 b3       	in	r18, 0x11	; 17
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vSetPinDir+0xd4>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vSetPinDir+0xd0>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	81 bb       	out	0x11, r24	; 17
 35a:	08 95       	ret

0000035c <DIO_vWritePinValue>:
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	e1 54       	subi	r30, 0x41	; 65
 362:	f1 09       	sbc	r31, r1
 364:	e4 32       	cpi	r30, 0x24	; 36
 366:	f1 05       	cpc	r31, r1
 368:	08 f0       	brcs	.+2      	; 0x36c <DIO_vWritePinValue+0x10>
 36a:	67 c0       	rjmp	.+206    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 36c:	ee 58       	subi	r30, 0x8E	; 142
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__tablejump2__>
 374:	41 30       	cpi	r20, 0x01	; 1
 376:	59 f4       	brne	.+22     	; 0x38e <DIO_vWritePinValue+0x32>
 378:	2b b3       	in	r18, 0x1b	; 27
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_vWritePinValue+0x28>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_vWritePinValue+0x24>
 388:	82 2b       	or	r24, r18
 38a:	8b bb       	out	0x1b, r24	; 27
 38c:	08 95       	ret
 38e:	2b b3       	in	r18, 0x1b	; 27
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_vWritePinValue+0x3e>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_vWritePinValue+0x3a>
 39e:	80 95       	com	r24
 3a0:	82 23       	and	r24, r18
 3a2:	8b bb       	out	0x1b, r24	; 27
 3a4:	08 95       	ret
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	59 f4       	brne	.+22     	; 0x3c0 <DIO_vWritePinValue+0x64>
 3aa:	28 b3       	in	r18, 0x18	; 24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_vWritePinValue+0x5a>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_vWritePinValue+0x56>
 3ba:	82 2b       	or	r24, r18
 3bc:	88 bb       	out	0x18, r24	; 24
 3be:	08 95       	ret
 3c0:	28 b3       	in	r18, 0x18	; 24
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_vWritePinValue+0x70>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_vWritePinValue+0x6c>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	88 bb       	out	0x18, r24	; 24
 3d6:	08 95       	ret
 3d8:	41 30       	cpi	r20, 0x01	; 1
 3da:	59 f4       	brne	.+22     	; 0x3f2 <DIO_vWritePinValue+0x96>
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_vWritePinValue+0x8c>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_vWritePinValue+0x88>
 3ec:	82 2b       	or	r24, r18
 3ee:	85 bb       	out	0x15, r24	; 21
 3f0:	08 95       	ret
 3f2:	25 b3       	in	r18, 0x15	; 21
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_vWritePinValue+0xa2>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_vWritePinValue+0x9e>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	85 bb       	out	0x15, r24	; 21
 408:	08 95       	ret
 40a:	41 30       	cpi	r20, 0x01	; 1
 40c:	59 f4       	brne	.+22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40e:	22 b3       	in	r18, 0x12	; 18
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	82 2b       	or	r24, r18
 420:	82 bb       	out	0x12, r24	; 18
 422:	08 95       	ret
 424:	22 b3       	in	r18, 0x12	; 18
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	80 95       	com	r24
 436:	82 23       	and	r24, r18
 438:	82 bb       	out	0x12, r24	; 18
 43a:	08 95       	ret

0000043c <DIO_u8ReadPin>:
 43c:	a6 2f       	mov	r26, r22
 43e:	48 2f       	mov	r20, r24
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	fa 01       	movw	r30, r20
 444:	e1 54       	subi	r30, 0x41	; 65
 446:	f1 09       	sbc	r31, r1
 448:	e4 32       	cpi	r30, 0x24	; 36
 44a:	f1 05       	cpc	r31, r1
 44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_u8ReadPin+0x14>
 44e:	4f c0       	rjmp	.+158    	; 0x4ee <DIO_u8ReadPin+0xb2>
 450:	ea 56       	subi	r30, 0x6A	; 106
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__tablejump2__>
 458:	29 b3       	in	r18, 0x19	; 25
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0a 2e       	mov	r0, r26
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_u8ReadPin+0x2a>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_u8ReadPin+0x26>
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	82 23       	and	r24, r18
 46e:	93 23       	and	r25, r19
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8ReadPin+0x3a>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	aa 95       	dec	r26
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8ReadPin+0x36>
 47a:	98 2f       	mov	r25, r24
 47c:	38 c0       	rjmp	.+112    	; 0x4ee <DIO_u8ReadPin+0xb2>
 47e:	26 b3       	in	r18, 0x16	; 22
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0a 2e       	mov	r0, r26
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_u8ReadPin+0x50>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_u8ReadPin+0x4c>
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	82 23       	and	r24, r18
 494:	93 23       	and	r25, r19
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_u8ReadPin+0x60>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	aa 95       	dec	r26
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_u8ReadPin+0x5c>
 4a0:	98 2f       	mov	r25, r24
 4a2:	25 c0       	rjmp	.+74     	; 0x4ee <DIO_u8ReadPin+0xb2>
 4a4:	23 b3       	in	r18, 0x13	; 19
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0a 2e       	mov	r0, r26
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_u8ReadPin+0x76>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_u8ReadPin+0x72>
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	82 23       	and	r24, r18
 4ba:	93 23       	and	r25, r19
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8ReadPin+0x86>
 4be:	95 95       	asr	r25
 4c0:	87 95       	ror	r24
 4c2:	aa 95       	dec	r26
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8ReadPin+0x82>
 4c6:	98 2f       	mov	r25, r24
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <DIO_u8ReadPin+0xb2>
 4ca:	20 b3       	in	r18, 0x10	; 16
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0a 2e       	mov	r0, r26
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8ReadPin+0x9c>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8ReadPin+0x98>
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	82 23       	and	r24, r18
 4e0:	93 23       	and	r25, r19
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8ReadPin+0xac>
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	aa 95       	dec	r26
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8ReadPin+0xa8>
 4ec:	98 2f       	mov	r25, r24
 4ee:	89 2f       	mov	r24, r25
 4f0:	08 95       	ret

000004f2 <DIO_vPinPullUp>:
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	19 f4       	brne	.+6      	; 0x4fc <DIO_vPinPullUp+0xa>
 4f6:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
 4fa:	08 95       	ret
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
 502:	08 95       	ret

00000504 <DIO_vSetPortDir>:
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	fc 01       	movw	r30, r24
 508:	e1 54       	subi	r30, 0x41	; 65
 50a:	f1 09       	sbc	r31, r1
 50c:	e4 32       	cpi	r30, 0x24	; 36
 50e:	f1 05       	cpc	r31, r1
 510:	58 f4       	brcc	.+22     	; 0x528 <DIO_vSetPortDir+0x24>
 512:	e6 54       	subi	r30, 0x46	; 70
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__tablejump2__>
 51a:	6a bb       	out	0x1a, r22	; 26
 51c:	08 95       	ret
 51e:	67 bb       	out	0x17, r22	; 23
 520:	08 95       	ret
 522:	64 bb       	out	0x14, r22	; 20
 524:	08 95       	ret
 526:	61 bb       	out	0x11, r22	; 17
 528:	08 95       	ret

0000052a <DIO_vSetPortLowNibble>:
	}
}

// Set low nibble
void DIO_vSetPortLowNibble(unsigned char port_name, unsigned char port_value)
{
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	f8 2e       	mov	r15, r24
 536:	c0 e0       	ldi	r28, 0x00	; 0
 538:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
 53a:	06 2f       	mov	r16, r22
 53c:	10 e0       	ldi	r17, 0x00	; 0
 53e:	a8 01       	movw	r20, r16
 540:	0c 2e       	mov	r0, r28
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_vSetPortLowNibble+0x1e>
 544:	55 95       	asr	r21
 546:	47 95       	ror	r20
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_vSetPortLowNibble+0x1a>
 54c:	41 70       	andi	r20, 0x01	; 1
 54e:	6c 2f       	mov	r22, r28
 550:	8f 2d       	mov	r24, r15
 552:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>
 556:	21 96       	adiw	r28, 0x01	; 1
}

// Set low nibble
void DIO_vSetPortLowNibble(unsigned char port_name, unsigned char port_value)
{
	for (unsigned char i = 0; i < 4; i++)
 558:	c4 30       	cpi	r28, 0x04	; 4
 55a:	d1 05       	cpc	r29, r1
 55c:	81 f7       	brne	.-32     	; 0x53e <DIO_vSetPortLowNibble+0x14>
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	08 95       	ret

0000056a <DIO_vSetPortHighNibble>:

// set high nibble
void DIO_vSetPortHighNibble(unsigned char port_name, unsigned char port_value)
{
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	f8 2e       	mov	r15, r24
 576:	c4 e0       	ldi	r28, 0x04	; 4
 578:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
 57a:	06 2f       	mov	r16, r22
 57c:	10 e0       	ldi	r17, 0x00	; 0
 57e:	a8 01       	movw	r20, r16
 580:	0c 2e       	mov	r0, r28
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_vSetPortHighNibble+0x1e>
 584:	55 95       	asr	r21
 586:	47 95       	ror	r20
 588:	0a 94       	dec	r0
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_vSetPortHighNibble+0x1a>
 58c:	41 70       	andi	r20, 0x01	; 1
 58e:	6c 2f       	mov	r22, r28
 590:	8f 2d       	mov	r24, r15
 592:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>
 596:	21 96       	adiw	r28, 0x01	; 1
}

// set high nibble
void DIO_vSetPortHighNibble(unsigned char port_name, unsigned char port_value)
{
	for (unsigned char i = 4; i < 8; i++)
 598:	c8 30       	cpi	r28, 0x08	; 8
 59a:	d1 05       	cpc	r29, r1
 59c:	81 f7       	brne	.-32     	; 0x57e <DIO_vSetPortHighNibble+0x14>
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	08 95       	ret

000005aa <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	f8 2e       	mov	r15, r24
 5b6:	c0 e0       	ldi	r28, 0x00	; 0
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 5ba:	06 2f       	mov	r16, r22
 5bc:	10 e0       	ldi	r17, 0x00	; 0
 5be:	a8 01       	movw	r20, r16
 5c0:	0c 2e       	mov	r0, r28
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_vWritePortLowNibble+0x1e>
 5c4:	55 95       	asr	r21
 5c6:	47 95       	ror	r20
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_vWritePortLowNibble+0x1a>
 5cc:	41 70       	andi	r20, 0x01	; 1
 5ce:	6c 2f       	mov	r22, r28
 5d0:	8f 2d       	mov	r24, r15
 5d2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
 5d6:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 5d8:	c4 30       	cpi	r28, 0x04	; 4
 5da:	d1 05       	cpc	r29, r1
 5dc:	81 f7       	brne	.-32     	; 0x5be <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	08 95       	ret

000005ea <key_pad_initialize>:
/* ---------------- Implementation section ---------------- */

/* Key_pad initialization function */
void key_pad_initialize(void)
{
    DIO_vSetPortLowNibble(KEY_PAD_PORT, 0x0F);  /* set low nipple bits of port as output*/
 5ea:	6f e0       	ldi	r22, 0x0F	; 15
 5ec:	84 e4       	ldi	r24, 0x44	; 68
 5ee:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_vSetPortLowNibble>
    DIO_vSetPortHighNibble(KEY_PAD_PORT, 0x0F); /* set high nipple bits of port as input*/
 5f2:	6f e0       	ldi	r22, 0x0F	; 15
 5f4:	84 e4       	ldi	r24, 0x44	; 68
 5f6:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_vSetPortHighNibble>
    DIO_vPinPullUp(KEY_PAD_PORT, 4, 1);         /* enable internal pull up on pin 4*/
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	64 e0       	ldi	r22, 0x04	; 4
 5fe:	84 e4       	ldi	r24, 0x44	; 68
 600:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_vPinPullUp>
    DIO_vPinPullUp(KEY_PAD_PORT, 5, 1);         /* enable internal pull up on pin 5*/
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	65 e0       	ldi	r22, 0x05	; 5
 608:	84 e4       	ldi	r24, 0x44	; 68
 60a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_vPinPullUp>
    DIO_vPinPullUp(KEY_PAD_PORT, 6, 1);         /* enable internal pull up on pin 6*/
 60e:	41 e0       	ldi	r20, 0x01	; 1
 610:	66 e0       	ldi	r22, 0x06	; 6
 612:	84 e4       	ldi	r24, 0x44	; 68
 614:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_vPinPullUp>
    DIO_vPinPullUp(KEY_PAD_PORT, 7, 1);         /* enable internal pull up on pin 7*/
 618:	41 e0       	ldi	r20, 0x01	; 1
 61a:	67 e0       	ldi	r22, 0x07	; 7
 61c:	84 e4       	ldi	r24, 0x44	; 68
 61e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_vPinPullUp>
 622:	08 95       	ret

00000624 <key_pad_read_u8Read>:
}

/* Key_pad read function */
unsigned char key_pad_read_u8Read(void)
{
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	60 97       	sbiw	r28, 0x10	; 16
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
    /* values of buttons to send it lcd as chars */
    unsigned char value[4][4] = {{'1', '2', '3', '+'}, {'4', '5', '6', '-'}, {'7', '8', '9', '*'}, {'%', '0', '=', '/'}};
 63c:	80 e1       	ldi	r24, 0x10	; 16
 63e:	e0 e7       	ldi	r30, 0x70	; 112
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	de 01       	movw	r26, r28
 644:	11 96       	adiw	r26, 0x01	; 1
 646:	01 90       	ld	r0, Z+
 648:	0d 92       	st	X+, r0
 64a:	8a 95       	dec	r24
 64c:	e1 f7       	brne	.-8      	; 0x646 <key_pad_read_u8Read+0x22>
    unsigned char row_counter;                          /* rows counter */
    unsigned char column_counter;                       /* column counter */
    unsigned char pin_value;                            /* pin value */
    unsigned char returned_value = KEY_PAD_NOT_PRESSED; /*any value not included in array is acceptable*/
    unsigned char x;
    for (row_counter = 0; row_counter < 4; row_counter++)
 64e:	00 e0       	ldi	r16, 0x00	; 0
    {
        DIO_vWritePortLowNibble(KEY_PAD_PORT, 0x0F);      /* output high on low nibble of port */
 650:	6f e0       	ldi	r22, 0x0F	; 15
 652:	84 e4       	ldi	r24, 0x44	; 68
 654:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_vWritePortLowNibble>
        DIO_vWritePinValue(KEY_PAD_PORT, row_counter, 0); /* output low on specific row */
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	60 2f       	mov	r22, r16
 65c:	84 e4       	ldi	r24, 0x44	; 68
 65e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
        for (column_counter = 0; column_counter < 4; column_counter++)
 662:	10 e0       	ldi	r17, 0x00	; 0
        {
            x=button_ucRead(KEY_PAD_PORT, column_counter + 4);
 664:	64 e0       	ldi	r22, 0x04	; 4
 666:	61 0f       	add	r22, r17
 668:	84 e4       	ldi	r24, 0x44	; 68
 66a:	0e 94 3b 01 	call	0x276	; 0x276 <button_ucRead>
            if ( x == 0) /* to read pin value & +4 because we are writing on high nipple */
 66e:	81 11       	cpse	r24, r1
 670:	0d c0       	rjmp	.+26     	; 0x68c <key_pad_read_u8Read+0x68>
            {
                returned_value = value[row_counter][column_counter]; /* return saved value of button */
 672:	e1 e0       	ldi	r30, 0x01	; 1
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	ec 0f       	add	r30, r28
 678:	fd 1f       	adc	r31, r29
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	08 9f       	mul	r16, r24
 67e:	e0 0d       	add	r30, r0
 680:	f1 1d       	adc	r31, r1
 682:	11 24       	eor	r1, r1
 684:	e1 0f       	add	r30, r17
 686:	f1 1d       	adc	r31, r1
 688:	80 81       	ld	r24, Z
 68a:	07 c0       	rjmp	.+14     	; 0x69a <key_pad_read_u8Read+0x76>
    unsigned char x;
    for (row_counter = 0; row_counter < 4; row_counter++)
    {
        DIO_vWritePortLowNibble(KEY_PAD_PORT, 0x0F);      /* output high on low nibble of port */
        DIO_vWritePinValue(KEY_PAD_PORT, row_counter, 0); /* output low on specific row */
        for (column_counter = 0; column_counter < 4; column_counter++)
 68c:	1f 5f       	subi	r17, 0xFF	; 255
 68e:	14 30       	cpi	r17, 0x04	; 4
 690:	49 f7       	brne	.-46     	; 0x664 <key_pad_read_u8Read+0x40>
    unsigned char row_counter;                          /* rows counter */
    unsigned char column_counter;                       /* column counter */
    unsigned char pin_value;                            /* pin value */
    unsigned char returned_value = KEY_PAD_NOT_PRESSED; /*any value not included in array is acceptable*/
    unsigned char x;
    for (row_counter = 0; row_counter < 4; row_counter++)
 692:	0f 5f       	subi	r16, 0xFF	; 255
 694:	04 30       	cpi	r16, 0x04	; 4
 696:	e1 f6       	brne	.-72     	; 0x650 <key_pad_read_u8Read+0x2c>
                returned_value = value[row_counter][column_counter]; /* return saved value of button */
                break;
            }
            else
            {
                returned_value = KEY_PAD_NOT_PRESSED; /* if no button is pressed return the default value */
 698:	8f ef       	ldi	r24, 0xFF	; 255
        {
            break;
        }
    }
    return returned_value;
}
 69a:	60 96       	adiw	r28, 0x10	; 16
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	08 95       	ret

000006b0 <LCD_Enable_pulse>:

// enable function
static void LCD_Enable_pulse(void)
{
	/*enable pulse with pulse duration 2ms*/
	DIO_vWritePinValue(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1);
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	64 e0       	ldi	r22, 0x04	; 4
 6b4:	83 e6       	ldi	r24, 0x63	; 99
 6b6:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ba:	8f e9       	ldi	r24, 0x9F	; 159
 6bc:	9f e0       	ldi	r25, 0x0F	; 15
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_Enable_pulse+0xe>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_Enable_pulse+0x14>
 6c4:	00 00       	nop
	_delay_ms(2);
	DIO_vWritePinValue(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 0);
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	64 e0       	ldi	r22, 0x04	; 4
 6ca:	83 e6       	ldi	r24, 0x63	; 99
 6cc:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
 6d0:	8f e9       	ldi	r24, 0x9F	; 159
 6d2:	9f e0       	ldi	r25, 0x0F	; 15
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <LCD_Enable_pulse+0x24>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <LCD_Enable_pulse+0x2a>
 6da:	00 00       	nop
 6dc:	08 95       	ret

000006de <LCD_vSendCommand>:
*/
#elif defined FOUR_BIT_MODE

// LCD 4bit send command on low nibble of port
void LCD_vSendCommand(unsigned char command)
{
 6de:	cf 93       	push	r28
 6e0:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 0);	   // RS command select
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	65 e0       	ldi	r22, 0x05	; 5
 6e6:	83 e6       	ldi	r24, 0x63	; 99
 6e8:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (command >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 6ec:	6c 2f       	mov	r22, r28
 6ee:	62 95       	swap	r22
 6f0:	6f 70       	andi	r22, 0x0F	; 15
 6f2:	83 e6       	ldi	r24, 0x63	; 99
 6f4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								   // send enable pulse
 6f8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, command);		   // write on port low nibble and write 4 least bits of data on data reg on lcd
 6fc:	6c 2f       	mov	r22, r28
 6fe:	83 e6       	ldi	r24, 0x63	; 99
 700:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								   // send enable pulse
 704:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_Enable_pulse>
 708:	8f ec       	ldi	r24, 0xCF	; 207
 70a:	97 e0       	ldi	r25, 0x07	; 7
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <LCD_vSendCommand+0x2e>
 710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_vSendCommand+0x34>
 712:	00 00       	nop
	_delay_ms(1);									   // delay to make sure that command is executed
}
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <LCD_vClearScreen>:
}

// Clear screen
void LCD_vClearScreen()
{
	LCD_vSendCommand(LCD_CLR_SCREEN); // call send command function
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 71e:	08 95       	ret

00000720 <LCD_vMoveCursor>:
}

// LCD move cursor
void LCD_vMoveCursor(unsigned char row_num, unsigned char column_number)
{
	if ((row_num > 2) || (row_num < 1) || (column_number > 16) || (column_number < 1))
 720:	9f ef       	ldi	r25, 0xFF	; 255
 722:	98 0f       	add	r25, r24
 724:	92 30       	cpi	r25, 0x02	; 2
 726:	20 f4       	brcc	.+8      	; 0x730 <LCD_vMoveCursor+0x10>
 728:	9f ef       	ldi	r25, 0xFF	; 255
 72a:	96 0f       	add	r25, r22
 72c:	90 31       	cpi	r25, 0x10	; 16
 72e:	28 f0       	brcs	.+10     	; 0x73a <LCD_vMoveCursor+0x1a>
	{
		LCD_vSendCommand((LCD_FIRST_ROW + (column_number - 1))); // set address counter to this location
 730:	8f e7       	ldi	r24, 0x7F	; 127
 732:	86 0f       	add	r24, r22
 734:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 738:	0d c0       	rjmp	.+26     	; 0x754 <LCD_vMoveCursor+0x34>
	}
	else if (row_num == 1)
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	29 f4       	brne	.+10     	; 0x748 <LCD_vMoveCursor+0x28>
	{
		LCD_vSendCommand((LCD_FIRST_ROW + (column_number - 1))); // set address counter to this location
 73e:	8f e7       	ldi	r24, 0x7F	; 127
 740:	86 0f       	add	r24, r22
 742:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 746:	06 c0       	rjmp	.+12     	; 0x754 <LCD_vMoveCursor+0x34>
	}
	else if (row_num == 2)
 748:	82 30       	cpi	r24, 0x02	; 2
 74a:	21 f4       	brne	.+8      	; 0x754 <LCD_vMoveCursor+0x34>
	{
		LCD_vSendCommand((LCD_SECOND_ROW + (column_number - 1))); // set address counter to this location
 74c:	8f eb       	ldi	r24, 0xBF	; 191
 74e:	86 0f       	add	r24, r22
 750:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 754:	8f ec       	ldi	r24, 0xCF	; 207
 756:	97 e0       	ldi	r25, 0x07	; 7
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_vMoveCursor+0x38>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <LCD_vMoveCursor+0x3e>
 75e:	00 00       	nop
 760:	08 95       	ret

00000762 <LCD_vNewLine>:
}

// new line
void LCD_vNewLine()
{
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 768:	08 95       	ret

0000076a <LCD_vSendChar>:
	LCD_Enable_pulse();								   // send enable pulse
	_delay_ms(1);									   // delay to make sure that command is executed
}

void LCD_vSendChar(unsigned char data)
{
 76a:	cf 93       	push	r28
 76c:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 1); // RS data select
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	65 e0       	ldi	r22, 0x05	; 5
 772:	83 e6       	ldi	r24, 0x63	; 99
 774:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (data >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 778:	6c 2f       	mov	r22, r28
 77a:	62 95       	swap	r22
 77c:	6f 70       	andi	r22, 0x0F	; 15
 77e:	83 e6       	ldi	r24, 0x63	; 99
 780:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 784:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, data);		// write on port low nibble and write  4 least bits of data on data reg on lcd
 788:	6c 2f       	mov	r22, r28
 78a:	83 e6       	ldi	r24, 0x63	; 99
 78c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 790:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_Enable_pulse>
}
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <LCD_vSendString>:
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	ec 01       	movw	r28, r24
	while ((*string_ptr) != 0) // checks null
 79e:	88 81       	ld	r24, Y
 7a0:	88 23       	and	r24, r24
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <LCD_vSendString+0x2a>
 7a4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
 7a6:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
 7aa:	2f ef       	ldi	r18, 0xFF	; 255
 7ac:	80 e7       	ldi	r24, 0x70	; 112
 7ae:	92 e0       	ldi	r25, 0x02	; 2
 7b0:	21 50       	subi	r18, 0x01	; 1
 7b2:	80 40       	sbci	r24, 0x00	; 0
 7b4:	90 40       	sbci	r25, 0x00	; 0
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <LCD_vSendString+0x18>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_vSendString+0x22>
 7ba:	00 00       	nop
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
	while ((*string_ptr) != 0) // checks null
 7bc:	89 91       	ld	r24, Y+
 7be:	81 11       	cpse	r24, r1
 7c0:	f2 cf       	rjmp	.-28     	; 0x7a6 <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 7c8:	6f ef       	ldi	r22, 0xFF	; 255
 7ca:	83 e6       	ldi	r24, 0x63	; 99
 7cc:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 7d0:	41 e0       	ldi	r20, 0x01	; 1
 7d2:	64 e0       	ldi	r22, 0x04	; 4
 7d4:	83 e6       	ldi	r24, 0x63	; 99
 7d6:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 7da:	41 e0       	ldi	r20, 0x01	; 1
 7dc:	65 e0       	ldi	r22, 0x05	; 5
 7de:	83 e6       	ldi	r24, 0x63	; 99
 7e0:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>
 7e4:	2f e7       	ldi	r18, 0x7F	; 127
 7e6:	88 e3       	ldi	r24, 0x38	; 56
 7e8:	91 e0       	ldi	r25, 0x01	; 1
 7ea:	21 50       	subi	r18, 0x01	; 1
 7ec:	80 40       	sbci	r24, 0x00	; 0
 7ee:	90 40       	sbci	r25, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <LCD_vInitialize+0x22>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <LCD_vInitialize+0x2c>
 7f4:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 7fc:	8f e1       	ldi	r24, 0x1F	; 31
 7fe:	9e e4       	ldi	r25, 0x4E	; 78
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	f1 f7       	brne	.-4      	; 0x800 <LCD_vInitialize+0x38>
 804:	00 c0       	rjmp	.+0      	; 0x806 <LCD_vInitialize+0x3e>
 806:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 808:	88 e2       	ldi	r24, 0x28	; 40
 80a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 80e:	8f ec       	ldi	r24, 0xCF	; 207
 810:	97 e0       	ldi	r25, 0x07	; 7
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	f1 f7       	brne	.-4      	; 0x812 <LCD_vInitialize+0x4a>
 816:	00 c0       	rjmp	.+0      	; 0x818 <LCD_vInitialize+0x50>
 818:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 820:	8f ec       	ldi	r24, 0xCF	; 207
 822:	97 e0       	ldi	r25, 0x07	; 7
 824:	01 97       	sbiw	r24, 0x01	; 1
 826:	f1 f7       	brne	.-4      	; 0x824 <LCD_vInitialize+0x5c>
 828:	00 c0       	rjmp	.+0      	; 0x82a <LCD_vInitialize+0x62>
 82a:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 82c:	8e e0       	ldi	r24, 0x0E	; 14
 82e:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 832:	8f ec       	ldi	r24, 0xCF	; 207
 834:	97 e0       	ldi	r25, 0x07	; 7
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <LCD_vInitialize+0x6e>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_vInitialize+0x74>
 83c:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 83e:	86 e0       	ldi	r24, 0x06	; 6
 840:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 844:	8f ec       	ldi	r24, 0xCF	; 207
 846:	97 e0       	ldi	r25, 0x07	; 7
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_vInitialize+0x80>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_vInitialize+0x86>
 84e:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSendCommand>
 856:	8f ec       	ldi	r24, 0xCF	; 207
 858:	97 e0       	ldi	r25, 0x07	; 7
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_vInitialize+0x92>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
 862:	08 95       	ret

00000864 <main>:
unsigned char minutes_counter=0;
unsigned char hours_counter=0;
unsigned char pressed_value;
int main(void)
{
	LCD_vInitialize();
 864:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_vInitialize>
	key_pad_initialize();
 868:	0e 94 f5 02 	call	0x5ea	; 0x5ea <key_pad_initialize>
	DIO_vSetPortDir('a',0xff);
 86c:	6f ef       	ldi	r22, 0xFF	; 255
 86e:	81 e6       	ldi	r24, 0x61	; 97
 870:	0e 94 82 02 	call	0x504	; 0x504 <DIO_vSetPortDir>
	DIO_vSetPortDir('b',0xff);
 874:	6f ef       	ldi	r22, 0xFF	; 255
 876:	82 e6       	ldi	r24, 0x62	; 98
 878:	0e 94 82 02 	call	0x504	; 0x504 <DIO_vSetPortDir>
	LCD_vSendString("to adjust");
 87c:	80 e8       	ldi	r24, 0x80	; 128
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
	LCD_vNewLine();
 884:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_vNewLine>
	LCD_vSendString("press 1");
 888:	8a e8       	ldi	r24, 0x8A	; 138
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
	timer_vSelect_mode(2,TIMER_OVERFLOW_EXT_OSC,TIMER_OCR0_DEFAULT_VALUE);
 890:	4f ef       	ldi	r20, 0xFF	; 255
 892:	65 e0       	ldi	r22, 0x05	; 5
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	0e 94 80 06 	call	0xd00	; 0xd00 <timer_vSelect_mode>
		 DIO_vWritePinValue('b',1,1);
		 DIO_vWritePinValue('b',2,1);
		 DIO_vWritePinValue('b',3,1);
		 DIO_vWritePinValue('b',4,1);
		
		 seven_segment_vWrite('a',seconds_counter%10);
 89a:	cd ec       	ldi	r28, 0xCD	; 205
	timer_vSelect_mode(2,TIMER_OVERFLOW_EXT_OSC,TIMER_OCR0_DEFAULT_VALUE);
	
	
    while (1) 
    {
		pressed_value=key_pad_read_u8Read();
 89c:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 8a0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
		if(pressed_value!=KEY_PAD_NOT_PRESSED)
 8a4:	8f 3f       	cpi	r24, 0xFF	; 255
 8a6:	09 f4       	brne	.+2      	; 0x8aa <main+0x46>
 8a8:	d0 c0       	rjmp	.+416    	; 0xa4a <main+0x1e6>
		{
			LCD_vClearScreen();
 8aa:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vClearScreen>
			if(pressed_value=='1')
 8ae:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <pressed_value>
 8b2:	81 33       	cpi	r24, 0x31	; 49
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <main+0x54>
 8b6:	c5 c0       	rjmp	.+394    	; 0xa42 <main+0x1de>
			{
				LCD_vSendString("Set Hours:--");
 8b8:	82 e9       	ldi	r24, 0x92	; 146
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
				LCD_vMoveCursor(1,11);
 8c0:	6b e0       	ldi	r22, 0x0B	; 11
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	0e 94 90 03 	call	0x720	; 0x720 <LCD_vMoveCursor>
				do 
				{
					pressed_value=key_pad_read_u8Read();
 8c8:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 8cc:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
				} while (pressed_value==KEY_PAD_NOT_PRESSED);
 8d0:	8f 3f       	cpi	r24, 0xFF	; 255
 8d2:	d1 f3       	breq	.-12     	; 0x8c8 <main+0x64>
				LCD_vSendChar(pressed_value);
 8d4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
 8d8:	2f e7       	ldi	r18, 0x7F	; 127
 8da:	8a e1       	ldi	r24, 0x1A	; 26
 8dc:	96 e0       	ldi	r25, 0x06	; 6
 8de:	21 50       	subi	r18, 0x01	; 1
 8e0:	80 40       	sbci	r24, 0x00	; 0
 8e2:	90 40       	sbci	r25, 0x00	; 0
 8e4:	e1 f7       	brne	.-8      	; 0x8de <main+0x7a>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <main+0x84>
 8e8:	00 00       	nop
				_delay_ms(250);
				hours_counter=(pressed_value-48)*10;
 8ea:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <pressed_value>
 8ee:	88 0f       	add	r24, r24
 8f0:	80 56       	subi	r24, 0x60	; 96
 8f2:	98 2f       	mov	r25, r24
 8f4:	99 0f       	add	r25, r25
 8f6:	99 0f       	add	r25, r25
 8f8:	89 0f       	add	r24, r25
 8fa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
				do 
				{
					pressed_value=key_pad_read_u8Read();
 8fe:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 902:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
				} while (pressed_value==KEY_PAD_NOT_PRESSED);
 906:	8f 3f       	cpi	r24, 0xFF	; 255
 908:	d1 f3       	breq	.-12     	; 0x8fe <main+0x9a>
				LCD_vSendChar(pressed_value);
 90a:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
 90e:	2f ef       	ldi	r18, 0xFF	; 255
 910:	84 e3       	ldi	r24, 0x34	; 52
 912:	9c e0       	ldi	r25, 0x0C	; 12
 914:	21 50       	subi	r18, 0x01	; 1
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	e1 f7       	brne	.-8      	; 0x914 <main+0xb0>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <main+0xba>
 91e:	00 00       	nop
				_delay_ms(500);
				hours_counter=hours_counter+(pressed_value-48);
 920:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <pressed_value>
 924:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 928:	89 0f       	add	r24, r25
 92a:	80 53       	subi	r24, 0x30	; 48
 92c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
				
				LCD_vClearScreen();
 930:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vClearScreen>
				LCD_vSendString("Set Minutes:--");
 934:	8f e9       	ldi	r24, 0x9F	; 159
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
				LCD_vMoveCursor(1,13);
 93c:	6d e0       	ldi	r22, 0x0D	; 13
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	0e 94 90 03 	call	0x720	; 0x720 <LCD_vMoveCursor>
				do
				{
					pressed_value=key_pad_read_u8Read();
 944:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 948:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
				} while (pressed_value==KEY_PAD_NOT_PRESSED);
 94c:	8f 3f       	cpi	r24, 0xFF	; 255
 94e:	d1 f3       	breq	.-12     	; 0x944 <main+0xe0>
				LCD_vSendChar(pressed_value);
 950:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
 954:	2f ef       	ldi	r18, 0xFF	; 255
 956:	84 e3       	ldi	r24, 0x34	; 52
 958:	9c e0       	ldi	r25, 0x0C	; 12
 95a:	21 50       	subi	r18, 0x01	; 1
 95c:	80 40       	sbci	r24, 0x00	; 0
 95e:	90 40       	sbci	r25, 0x00	; 0
 960:	e1 f7       	brne	.-8      	; 0x95a <main+0xf6>
 962:	00 c0       	rjmp	.+0      	; 0x964 <main+0x100>
 964:	00 00       	nop
				_delay_ms(500);
				minutes_counter=(pressed_value-48)*10;
 966:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <pressed_value>
 96a:	88 0f       	add	r24, r24
 96c:	80 56       	subi	r24, 0x60	; 96
 96e:	98 2f       	mov	r25, r24
 970:	99 0f       	add	r25, r25
 972:	99 0f       	add	r25, r25
 974:	89 0f       	add	r24, r25
 976:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <minutes_counter>
				do
				{
					pressed_value=key_pad_read_u8Read();
 97a:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 97e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
				} while (pressed_value==KEY_PAD_NOT_PRESSED);
 982:	8f 3f       	cpi	r24, 0xFF	; 255
 984:	d1 f3       	breq	.-12     	; 0x97a <main+0x116>
				LCD_vSendChar(pressed_value);
 986:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
				minutes_counter=minutes_counter+(pressed_value-48);
 98a:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <pressed_value>
 98e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <minutes_counter>
 992:	89 0f       	add	r24, r25
 994:	80 53       	subi	r24, 0x30	; 48
 996:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <minutes_counter>
 99a:	2f ef       	ldi	r18, 0xFF	; 255
 99c:	84 e3       	ldi	r24, 0x34	; 52
 99e:	9c e0       	ldi	r25, 0x0C	; 12
 9a0:	21 50       	subi	r18, 0x01	; 1
 9a2:	80 40       	sbci	r24, 0x00	; 0
 9a4:	90 40       	sbci	r25, 0x00	; 0
 9a6:	e1 f7       	brne	.-8      	; 0x9a0 <main+0x13c>
 9a8:	00 c0       	rjmp	.+0      	; 0x9aa <main+0x146>
 9aa:	00 00       	nop
				_delay_ms(500);
				
				LCD_vClearScreen();
 9ac:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vClearScreen>
				LCD_vSendString("Set Seconds:--");
 9b0:	8e ea       	ldi	r24, 0xAE	; 174
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
				LCD_vMoveCursor(1,13);
 9b8:	6d e0       	ldi	r22, 0x0D	; 13
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	0e 94 90 03 	call	0x720	; 0x720 <LCD_vMoveCursor>
				do
				{
					pressed_value=key_pad_read_u8Read();
 9c0:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 9c4:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
				} while (pressed_value==KEY_PAD_NOT_PRESSED);
 9c8:	8f 3f       	cpi	r24, 0xFF	; 255
 9ca:	d1 f3       	breq	.-12     	; 0x9c0 <main+0x15c>
				LCD_vSendChar(pressed_value);
 9cc:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
 9d0:	2f ef       	ldi	r18, 0xFF	; 255
 9d2:	84 e3       	ldi	r24, 0x34	; 52
 9d4:	9c e0       	ldi	r25, 0x0C	; 12
 9d6:	21 50       	subi	r18, 0x01	; 1
 9d8:	80 40       	sbci	r24, 0x00	; 0
 9da:	90 40       	sbci	r25, 0x00	; 0
 9dc:	e1 f7       	brne	.-8      	; 0x9d6 <main+0x172>
 9de:	00 c0       	rjmp	.+0      	; 0x9e0 <main+0x17c>
 9e0:	00 00       	nop
				_delay_ms(500);
				seconds_counter=(pressed_value-48)*10;
 9e2:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <pressed_value>
 9e6:	88 0f       	add	r24, r24
 9e8:	80 56       	subi	r24, 0x60	; 96
 9ea:	98 2f       	mov	r25, r24
 9ec:	99 0f       	add	r25, r25
 9ee:	99 0f       	add	r25, r25
 9f0:	89 0f       	add	r24, r25
 9f2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <seconds_counter>
				do
				{
					pressed_value=key_pad_read_u8Read();
 9f6:	0e 94 12 03 	call	0x624	; 0x624 <key_pad_read_u8Read>
 9fa:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pressed_value>
				} while (pressed_value==KEY_PAD_NOT_PRESSED);
 9fe:	8f 3f       	cpi	r24, 0xFF	; 255
 a00:	d1 f3       	breq	.-12     	; 0x9f6 <main+0x192>
				LCD_vSendChar(pressed_value);
 a02:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vSendChar>
				seconds_counter=seconds_counter+(pressed_value-48);
 a06:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <seconds_counter>
 a0a:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <pressed_value>
 a0e:	89 0f       	add	r24, r25
 a10:	80 53       	subi	r24, 0x30	; 48
 a12:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <seconds_counter>
 a16:	2f ef       	ldi	r18, 0xFF	; 255
 a18:	84 e3       	ldi	r24, 0x34	; 52
 a1a:	9c e0       	ldi	r25, 0x0C	; 12
 a1c:	21 50       	subi	r18, 0x01	; 1
 a1e:	80 40       	sbci	r24, 0x00	; 0
 a20:	90 40       	sbci	r25, 0x00	; 0
 a22:	e1 f7       	brne	.-8      	; 0xa1c <main+0x1b8>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <main+0x1c2>
 a26:	00 00       	nop
				_delay_ms(500);
				LCD_vClearScreen();
 a28:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vClearScreen>
				LCD_vSendString("to adjust");
 a2c:	80 e8       	ldi	r24, 0x80	; 128
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
				LCD_vNewLine();
 a34:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_vNewLine>
				LCD_vSendString("press 1");
 a38:	8a e8       	ldi	r24, 0x8A	; 138
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <main+0x1e6>
			}
			else 
			{
				LCD_vSendString("wrong choice");
 a42:	8d eb       	ldi	r24, 0xBD	; 189
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_vSendString>
		 
		 
		 /*segment multiplexing*/
		 
		 
         DIO_vWritePinValue('b',5,0);
 a4a:	40 e0       	ldi	r20, 0x00	; 0
 a4c:	65 e0       	ldi	r22, 0x05	; 5
 a4e:	82 e6       	ldi	r24, 0x62	; 98
 a50:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',0,1);
 a54:	41 e0       	ldi	r20, 0x01	; 1
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	82 e6       	ldi	r24, 0x62	; 98
 a5a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',1,1);
 a5e:	41 e0       	ldi	r20, 0x01	; 1
 a60:	61 e0       	ldi	r22, 0x01	; 1
 a62:	82 e6       	ldi	r24, 0x62	; 98
 a64:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',2,1);
 a68:	41 e0       	ldi	r20, 0x01	; 1
 a6a:	62 e0       	ldi	r22, 0x02	; 2
 a6c:	82 e6       	ldi	r24, 0x62	; 98
 a6e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',3,1);
 a72:	41 e0       	ldi	r20, 0x01	; 1
 a74:	63 e0       	ldi	r22, 0x03	; 3
 a76:	82 e6       	ldi	r24, 0x62	; 98
 a78:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',4,1);
 a7c:	41 e0       	ldi	r20, 0x01	; 1
 a7e:	64 e0       	ldi	r22, 0x04	; 4
 a80:	82 e6       	ldi	r24, 0x62	; 98
 a82:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		
		 seven_segment_vWrite('a',seconds_counter%10);
 a86:	60 91 cc 00 	lds	r22, 0x00CC	; 0x8000cc <seconds_counter>
 a8a:	6c 9f       	mul	r22, r28
 a8c:	81 2d       	mov	r24, r1
 a8e:	11 24       	eor	r1, r1
 a90:	86 95       	lsr	r24
 a92:	86 95       	lsr	r24
 a94:	86 95       	lsr	r24
 a96:	88 0f       	add	r24, r24
 a98:	98 2f       	mov	r25, r24
 a9a:	99 0f       	add	r25, r25
 a9c:	99 0f       	add	r25, r25
 a9e:	89 0f       	add	r24, r25
 aa0:	68 1b       	sub	r22, r24
 aa2:	81 e6       	ldi	r24, 0x61	; 97
 aa4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 aa8:	8f e0       	ldi	r24, 0x0F	; 15
 aaa:	97 e2       	ldi	r25, 0x27	; 39
 aac:	01 97       	sbiw	r24, 0x01	; 1
 aae:	f1 f7       	brne	.-4      	; 0xaac <main+0x248>
 ab0:	00 c0       	rjmp	.+0      	; 0xab2 <main+0x24e>
 ab2:	00 00       	nop
		 _delay_ms(5);
		 
		 DIO_vWritePinValue('b',5,1);
 ab4:	41 e0       	ldi	r20, 0x01	; 1
 ab6:	65 e0       	ldi	r22, 0x05	; 5
 ab8:	82 e6       	ldi	r24, 0x62	; 98
 aba:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',0,0);
 abe:	40 e0       	ldi	r20, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	82 e6       	ldi	r24, 0x62	; 98
 ac4:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',1,1);
 ac8:	41 e0       	ldi	r20, 0x01	; 1
 aca:	61 e0       	ldi	r22, 0x01	; 1
 acc:	82 e6       	ldi	r24, 0x62	; 98
 ace:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',2,1);
 ad2:	41 e0       	ldi	r20, 0x01	; 1
 ad4:	62 e0       	ldi	r22, 0x02	; 2
 ad6:	82 e6       	ldi	r24, 0x62	; 98
 ad8:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',3,1);
 adc:	41 e0       	ldi	r20, 0x01	; 1
 ade:	63 e0       	ldi	r22, 0x03	; 3
 ae0:	82 e6       	ldi	r24, 0x62	; 98
 ae2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',4,1);
 ae6:	41 e0       	ldi	r20, 0x01	; 1
 ae8:	64 e0       	ldi	r22, 0x04	; 4
 aea:	82 e6       	ldi	r24, 0x62	; 98
 aec:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 
		 seven_segment_vWrite('a',seconds_counter/10);
 af0:	60 91 cc 00 	lds	r22, 0x00CC	; 0x8000cc <seconds_counter>
 af4:	6c 9f       	mul	r22, r28
 af6:	61 2d       	mov	r22, r1
 af8:	11 24       	eor	r1, r1
 afa:	66 95       	lsr	r22
 afc:	66 95       	lsr	r22
 afe:	66 95       	lsr	r22
 b00:	81 e6       	ldi	r24, 0x61	; 97
 b02:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 b06:	8f e0       	ldi	r24, 0x0F	; 15
 b08:	97 e2       	ldi	r25, 0x27	; 39
 b0a:	01 97       	sbiw	r24, 0x01	; 1
 b0c:	f1 f7       	brne	.-4      	; 0xb0a <main+0x2a6>
 b0e:	00 c0       	rjmp	.+0      	; 0xb10 <main+0x2ac>
 b10:	00 00       	nop
		 _delay_ms(5);
		
		 
		 DIO_vWritePinValue('b',5,1);
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	65 e0       	ldi	r22, 0x05	; 5
 b16:	82 e6       	ldi	r24, 0x62	; 98
 b18:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',0,1);
 b1c:	41 e0       	ldi	r20, 0x01	; 1
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	82 e6       	ldi	r24, 0x62	; 98
 b22:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',1,0);
 b26:	40 e0       	ldi	r20, 0x00	; 0
 b28:	61 e0       	ldi	r22, 0x01	; 1
 b2a:	82 e6       	ldi	r24, 0x62	; 98
 b2c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',2,1);
 b30:	41 e0       	ldi	r20, 0x01	; 1
 b32:	62 e0       	ldi	r22, 0x02	; 2
 b34:	82 e6       	ldi	r24, 0x62	; 98
 b36:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',3,1);
 b3a:	41 e0       	ldi	r20, 0x01	; 1
 b3c:	63 e0       	ldi	r22, 0x03	; 3
 b3e:	82 e6       	ldi	r24, 0x62	; 98
 b40:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',4,1);
 b44:	41 e0       	ldi	r20, 0x01	; 1
 b46:	64 e0       	ldi	r22, 0x04	; 4
 b48:	82 e6       	ldi	r24, 0x62	; 98
 b4a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 
		 seven_segment_vWrite('a',minutes_counter%10);
 b4e:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <minutes_counter>
 b52:	6c 9f       	mul	r22, r28
 b54:	81 2d       	mov	r24, r1
 b56:	11 24       	eor	r1, r1
 b58:	86 95       	lsr	r24
 b5a:	86 95       	lsr	r24
 b5c:	86 95       	lsr	r24
 b5e:	88 0f       	add	r24, r24
 b60:	98 2f       	mov	r25, r24
 b62:	99 0f       	add	r25, r25
 b64:	99 0f       	add	r25, r25
 b66:	89 0f       	add	r24, r25
 b68:	68 1b       	sub	r22, r24
 b6a:	81 e6       	ldi	r24, 0x61	; 97
 b6c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 b70:	8f e0       	ldi	r24, 0x0F	; 15
 b72:	97 e2       	ldi	r25, 0x27	; 39
 b74:	01 97       	sbiw	r24, 0x01	; 1
 b76:	f1 f7       	brne	.-4      	; 0xb74 <main+0x310>
 b78:	00 c0       	rjmp	.+0      	; 0xb7a <main+0x316>
 b7a:	00 00       	nop
		 _delay_ms(5);
		 
		 DIO_vWritePinValue('b',5,1);
 b7c:	41 e0       	ldi	r20, 0x01	; 1
 b7e:	65 e0       	ldi	r22, 0x05	; 5
 b80:	82 e6       	ldi	r24, 0x62	; 98
 b82:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',0,1);
 b86:	41 e0       	ldi	r20, 0x01	; 1
 b88:	60 e0       	ldi	r22, 0x00	; 0
 b8a:	82 e6       	ldi	r24, 0x62	; 98
 b8c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',1,1);
 b90:	41 e0       	ldi	r20, 0x01	; 1
 b92:	61 e0       	ldi	r22, 0x01	; 1
 b94:	82 e6       	ldi	r24, 0x62	; 98
 b96:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',2,0);
 b9a:	40 e0       	ldi	r20, 0x00	; 0
 b9c:	62 e0       	ldi	r22, 0x02	; 2
 b9e:	82 e6       	ldi	r24, 0x62	; 98
 ba0:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',3,1);
 ba4:	41 e0       	ldi	r20, 0x01	; 1
 ba6:	63 e0       	ldi	r22, 0x03	; 3
 ba8:	82 e6       	ldi	r24, 0x62	; 98
 baa:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',4,1);
 bae:	41 e0       	ldi	r20, 0x01	; 1
 bb0:	64 e0       	ldi	r22, 0x04	; 4
 bb2:	82 e6       	ldi	r24, 0x62	; 98
 bb4:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 
		 seven_segment_vWrite('a',minutes_counter/10);
 bb8:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <minutes_counter>
 bbc:	6c 9f       	mul	r22, r28
 bbe:	61 2d       	mov	r22, r1
 bc0:	11 24       	eor	r1, r1
 bc2:	66 95       	lsr	r22
 bc4:	66 95       	lsr	r22
 bc6:	66 95       	lsr	r22
 bc8:	81 e6       	ldi	r24, 0x61	; 97
 bca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 bce:	8f e0       	ldi	r24, 0x0F	; 15
 bd0:	97 e2       	ldi	r25, 0x27	; 39
 bd2:	01 97       	sbiw	r24, 0x01	; 1
 bd4:	f1 f7       	brne	.-4      	; 0xbd2 <main+0x36e>
 bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <main+0x374>
 bd8:	00 00       	nop
		 _delay_ms(5);
		 
		 DIO_vWritePinValue('b',5,1);
 bda:	41 e0       	ldi	r20, 0x01	; 1
 bdc:	65 e0       	ldi	r22, 0x05	; 5
 bde:	82 e6       	ldi	r24, 0x62	; 98
 be0:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',0,1);
 be4:	41 e0       	ldi	r20, 0x01	; 1
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	82 e6       	ldi	r24, 0x62	; 98
 bea:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',1,1);
 bee:	41 e0       	ldi	r20, 0x01	; 1
 bf0:	61 e0       	ldi	r22, 0x01	; 1
 bf2:	82 e6       	ldi	r24, 0x62	; 98
 bf4:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',2,1);
 bf8:	41 e0       	ldi	r20, 0x01	; 1
 bfa:	62 e0       	ldi	r22, 0x02	; 2
 bfc:	82 e6       	ldi	r24, 0x62	; 98
 bfe:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',3,0);
 c02:	40 e0       	ldi	r20, 0x00	; 0
 c04:	63 e0       	ldi	r22, 0x03	; 3
 c06:	82 e6       	ldi	r24, 0x62	; 98
 c08:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',4,1);
 c0c:	41 e0       	ldi	r20, 0x01	; 1
 c0e:	64 e0       	ldi	r22, 0x04	; 4
 c10:	82 e6       	ldi	r24, 0x62	; 98
 c12:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 
		 seven_segment_vWrite('a',hours_counter%10);
 c16:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <__data_end>
 c1a:	6c 9f       	mul	r22, r28
 c1c:	81 2d       	mov	r24, r1
 c1e:	11 24       	eor	r1, r1
 c20:	86 95       	lsr	r24
 c22:	86 95       	lsr	r24
 c24:	86 95       	lsr	r24
 c26:	88 0f       	add	r24, r24
 c28:	98 2f       	mov	r25, r24
 c2a:	99 0f       	add	r25, r25
 c2c:	99 0f       	add	r25, r25
 c2e:	89 0f       	add	r24, r25
 c30:	68 1b       	sub	r22, r24
 c32:	81 e6       	ldi	r24, 0x61	; 97
 c34:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 c38:	8f e0       	ldi	r24, 0x0F	; 15
 c3a:	97 e2       	ldi	r25, 0x27	; 39
 c3c:	01 97       	sbiw	r24, 0x01	; 1
 c3e:	f1 f7       	brne	.-4      	; 0xc3c <main+0x3d8>
 c40:	00 c0       	rjmp	.+0      	; 0xc42 <main+0x3de>
 c42:	00 00       	nop
		 _delay_ms(5);
		 
		 DIO_vWritePinValue('b',5,1);
 c44:	41 e0       	ldi	r20, 0x01	; 1
 c46:	65 e0       	ldi	r22, 0x05	; 5
 c48:	82 e6       	ldi	r24, 0x62	; 98
 c4a:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',0,1);
 c4e:	41 e0       	ldi	r20, 0x01	; 1
 c50:	60 e0       	ldi	r22, 0x00	; 0
 c52:	82 e6       	ldi	r24, 0x62	; 98
 c54:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',1,1);
 c58:	41 e0       	ldi	r20, 0x01	; 1
 c5a:	61 e0       	ldi	r22, 0x01	; 1
 c5c:	82 e6       	ldi	r24, 0x62	; 98
 c5e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',2,1);
 c62:	41 e0       	ldi	r20, 0x01	; 1
 c64:	62 e0       	ldi	r22, 0x02	; 2
 c66:	82 e6       	ldi	r24, 0x62	; 98
 c68:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',3,1);
 c6c:	41 e0       	ldi	r20, 0x01	; 1
 c6e:	63 e0       	ldi	r22, 0x03	; 3
 c70:	82 e6       	ldi	r24, 0x62	; 98
 c72:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 DIO_vWritePinValue('b',4,0);
 c76:	40 e0       	ldi	r20, 0x00	; 0
 c78:	64 e0       	ldi	r22, 0x04	; 4
 c7a:	82 e6       	ldi	r24, 0x62	; 98
 c7c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_vWritePinValue>
		 seven_segment_vWrite('a',hours_counter/10);
 c80:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <__data_end>
 c84:	6c 9f       	mul	r22, r28
 c86:	61 2d       	mov	r22, r1
 c88:	11 24       	eor	r1, r1
 c8a:	66 95       	lsr	r22
 c8c:	66 95       	lsr	r22
 c8e:	66 95       	lsr	r22
 c90:	81 e6       	ldi	r24, 0x61	; 97
 c92:	0e 94 fd 00 	call	0x1fa	; 0x1fa <seven_segment_vWrite>
 c96:	8f e0       	ldi	r24, 0x0F	; 15
 c98:	97 e2       	ldi	r25, 0x27	; 39
 c9a:	01 97       	sbiw	r24, 0x01	; 1
 c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0x436>
 c9e:	00 c0       	rjmp	.+0      	; 0xca0 <main+0x43c>
 ca0:	00 00       	nop
		 _delay_ms(5);
		 
		 if(seconds_counter>=60)
 ca2:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <seconds_counter>
 ca6:	8c 33       	cpi	r24, 0x3C	; 60
 ca8:	38 f0       	brcs	.+14     	; 0xcb8 <main+0x454>
		 {
			 seconds_counter=0;
 caa:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <seconds_counter>
			 minutes_counter++;
 cae:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <minutes_counter>
 cb2:	8f 5f       	subi	r24, 0xFF	; 255
 cb4:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <minutes_counter>
		 }
		 if(minutes_counter>=60)
 cb8:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <minutes_counter>
 cbc:	8c 33       	cpi	r24, 0x3C	; 60
 cbe:	38 f0       	brcs	.+14     	; 0xcce <main+0x46a>
		 {
			 minutes_counter=0;
 cc0:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <minutes_counter>
			 hours_counter++;
 cc4:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 cc8:	8f 5f       	subi	r24, 0xFF	; 255
 cca:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
		 }
		 if(hours_counter>=24)
 cce:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 cd2:	88 31       	cpi	r24, 0x18	; 24
 cd4:	08 f4       	brcc	.+2      	; 0xcd8 <main+0x474>
 cd6:	e2 cd       	rjmp	.-1084   	; 0x89c <main+0x38>
		 {
			 hours_counter=0;
 cd8:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__data_end>
 cdc:	df cd       	rjmp	.-1090   	; 0x89c <main+0x38>

00000cde <__vector_5>:
		 
    }
}

ISR(TIMER2_OVF_vect)
{
 cde:	1f 92       	push	r1
 ce0:	0f 92       	push	r0
 ce2:	0f b6       	in	r0, 0x3f	; 63
 ce4:	0f 92       	push	r0
 ce6:	11 24       	eor	r1, r1
 ce8:	8f 93       	push	r24
	seconds_counter++;
 cea:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <seconds_counter>
 cee:	8f 5f       	subi	r24, 0xFF	; 255
 cf0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <seconds_counter>
}
 cf4:	8f 91       	pop	r24
 cf6:	0f 90       	pop	r0
 cf8:	0f be       	out	0x3f, r0	; 63
 cfa:	0f 90       	pop	r0
 cfc:	1f 90       	pop	r1
 cfe:	18 95       	reti

00000d00 <timer_vSelect_mode>:
#include "timer.h"
#include "DIO.h"

// note if you are using overflow mode you can put any value for OCR
timer_vSelect_mode(unsigned char timer_num_select, unsigned char timer_mode_select, unsigned char timer_pwm_value)
{
 d00:	cf 93       	push	r28

    switch (timer_num_select)
 d02:	88 23       	and	r24, r24
 d04:	21 f0       	breq	.+8      	; 0xd0e <timer_vSelect_mode+0xe>
 d06:	82 30       	cpi	r24, 0x02	; 2
 d08:	09 f4       	brne	.+2      	; 0xd0c <timer_vSelect_mode+0xc>
 d0a:	6a c0       	rjmp	.+212    	; 0xde0 <timer_vSelect_mode+0xe0>
 d0c:	78 c0       	rjmp	.+240    	; 0xdfe <timer_vSelect_mode+0xfe>
    {
    case 0:
    {
        switch (timer_mode_select)
 d0e:	62 30       	cpi	r22, 0x02	; 2
 d10:	41 f1       	breq	.+80     	; 0xd62 <timer_vSelect_mode+0x62>
 d12:	28 f4       	brcc	.+10     	; 0xd1e <timer_vSelect_mode+0x1e>
 d14:	66 23       	and	r22, r22
 d16:	51 f0       	breq	.+20     	; 0xd2c <timer_vSelect_mode+0x2c>
 d18:	61 30       	cpi	r22, 0x01	; 1
 d1a:	99 f0       	breq	.+38     	; 0xd42 <timer_vSelect_mode+0x42>
 d1c:	70 c0       	rjmp	.+224    	; 0xdfe <timer_vSelect_mode+0xfe>
 d1e:	c4 2f       	mov	r28, r20
 d20:	63 30       	cpi	r22, 0x03	; 3
 d22:	79 f1       	breq	.+94     	; 0xd82 <timer_vSelect_mode+0x82>
 d24:	64 30       	cpi	r22, 0x04	; 4
 d26:	09 f4       	brne	.+2      	; 0xd2a <timer_vSelect_mode+0x2a>
 d28:	45 c0       	rjmp	.+138    	; 0xdb4 <timer_vSelect_mode+0xb4>
 d2a:	69 c0       	rjmp	.+210    	; 0xdfe <timer_vSelect_mode+0xfe>
            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            /*the timer overflow time = 256 * 128uT = 32.768ms */
            SET_BIT(TCCR0, CS00);
 d2c:	83 b7       	in	r24, 0x33	; 51
 d2e:	81 60       	ori	r24, 0x01	; 1
 d30:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 d32:	83 b7       	in	r24, 0x33	; 51
 d34:	84 60       	ori	r24, 0x04	; 4
 d36:	83 bf       	out	0x33, r24	; 51

            sei();                 // enable interrupt in system
 d38:	78 94       	sei
            SET_BIT(TIMSK, TOIE0); // enable interrupt of OVERFLOW timer0
 d3a:	89 b7       	in	r24, 0x39	; 57
 d3c:	81 60       	ori	r24, 0x01	; 1
 d3e:	89 bf       	out	0x39, r24	; 57

            break;
 d40:	5e c0       	rjmp	.+188    	; 0xdfe <timer_vSelect_mode+0xfe>

        case TIMER_MODE_CTC: // user choosed ctc mode.

            /*set bits of TCCR0 to choose ctc mode*/
            /*to enable that wgm01 = 1 and wgm00 = 0*/
            SET_BIT(TCCR0, WGM01);
 d42:	83 b7       	in	r24, 0x33	; 51
 d44:	88 60       	ori	r24, 0x08	; 8
 d46:	83 bf       	out	0x33, r24	; 51

            OCR0 = 80; // to make it 10ms so it can be configurable
 d48:	80 e5       	ldi	r24, 0x50	; 80
 d4a:	8c bf       	out	0x3c, r24	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 d4c:	83 b7       	in	r24, 0x33	; 51
 d4e:	81 60       	ori	r24, 0x01	; 1
 d50:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 d52:	83 b7       	in	r24, 0x33	; 51
 d54:	84 60       	ori	r24, 0x04	; 4
 d56:	83 bf       	out	0x33, r24	; 51

            sei();                 // enable interrupt in system
 d58:	78 94       	sei
            SET_BIT(TIMSK, OCIE0); // enable interrupt of CTC timer0
 d5a:	89 b7       	in	r24, 0x39	; 57
 d5c:	82 60       	ori	r24, 0x02	; 2
 d5e:	89 bf       	out	0x39, r24	; 57
            break;
 d60:	4e c0       	rjmp	.+156    	; 0xdfe <timer_vSelect_mode+0xfe>

        case TIMER_MODE_NON_PWM:

            SET_BIT(DDRB, 3); // set bin 3B as output
 d62:	bb 9a       	sbi	0x17, 3	; 23

            /*set bits of TCCR0 to choose ctc mode*/
            /*to enable that wgm01 = 1 and wgm00 = 0*/
            SET_BIT(TCCR0, WGM01);
 d64:	83 b7       	in	r24, 0x33	; 51
 d66:	88 60       	ori	r24, 0x08	; 8
 d68:	83 bf       	out	0x33, r24	; 51

            OCR0 = 64; // value of ocr0 to decide frequency
 d6a:	80 e4       	ldi	r24, 0x40	; 64
 d6c:	8c bf       	out	0x3c, r24	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 d6e:	83 b7       	in	r24, 0x33	; 51
 d70:	81 60       	ori	r24, 0x01	; 1
 d72:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 d74:	83 b7       	in	r24, 0x33	; 51
 d76:	84 60       	ori	r24, 0x04	; 4
 d78:	83 bf       	out	0x33, r24	; 51

            SET_BIT(TCCR0, COM00); // toggle oc0 on compare match
 d7a:	83 b7       	in	r24, 0x33	; 51
 d7c:	80 61       	ori	r24, 0x10	; 16
 d7e:	83 bf       	out	0x33, r24	; 51
            break;
 d80:	3e c0       	rjmp	.+124    	; 0xdfe <timer_vSelect_mode+0xfe>

        case TIMER_MODE_FAST_PWM_INVERTING:

            DIO_vSetPinDir('b', 3, 1); // set pinB3 as O/P
 d82:	41 e0       	ldi	r20, 0x01	; 1
 d84:	63 e0       	ldi	r22, 0x03	; 3
 d86:	82 e6       	ldi	r24, 0x62	; 98
 d88:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>

            /*select fast pwm mode*/
            SET_BIT(TCCR0, WGM00);
 d8c:	83 b7       	in	r24, 0x33	; 51
 d8e:	80 64       	ori	r24, 0x40	; 64
 d90:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 d92:	83 b7       	in	r24, 0x33	; 51
 d94:	88 60       	ori	r24, 0x08	; 8
 d96:	83 bf       	out	0x33, r24	; 51

            OCR0 = timer_pwm_value;
 d98:	cc bf       	out	0x3c, r28	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 d9a:	83 b7       	in	r24, 0x33	; 51
 d9c:	81 60       	ori	r24, 0x01	; 1
 d9e:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 da0:	83 b7       	in	r24, 0x33	; 51
 da2:	84 60       	ori	r24, 0x04	; 4
 da4:	83 bf       	out	0x33, r24	; 51

            /*set oc0 compare on compare match,clear on overflow*/
            SET_BIT(TCCR0, COM00);
 da6:	83 b7       	in	r24, 0x33	; 51
 da8:	80 61       	ori	r24, 0x10	; 16
 daa:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, COM01);
 dac:	83 b7       	in	r24, 0x33	; 51
 dae:	80 62       	ori	r24, 0x20	; 32
 db0:	83 bf       	out	0x33, r24	; 51
            break;
 db2:	25 c0       	rjmp	.+74     	; 0xdfe <timer_vSelect_mode+0xfe>

        case TIMER_MODE_FAST_PWM:
            DIO_vSetPinDir('b', 3, 1); // set pinB3 as O/P
 db4:	41 e0       	ldi	r20, 0x01	; 1
 db6:	63 e0       	ldi	r22, 0x03	; 3
 db8:	82 e6       	ldi	r24, 0x62	; 98
 dba:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_vSetPinDir>

            /*select fast pwm mode*/
            SET_BIT(TCCR0, WGM00);
 dbe:	83 b7       	in	r24, 0x33	; 51
 dc0:	80 64       	ori	r24, 0x40	; 64
 dc2:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 dc4:	83 b7       	in	r24, 0x33	; 51
 dc6:	88 60       	ori	r24, 0x08	; 8
 dc8:	83 bf       	out	0x33, r24	; 51

            OCR0 = timer_pwm_value;
 dca:	cc bf       	out	0x3c, r28	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 dcc:	83 b7       	in	r24, 0x33	; 51
 dce:	81 60       	ori	r24, 0x01	; 1
 dd0:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 dd2:	83 b7       	in	r24, 0x33	; 51
 dd4:	84 60       	ori	r24, 0x04	; 4
 dd6:	83 bf       	out	0x33, r24	; 51

            /*set oc0 compare on compare match,clear on overflow*/
            SET_BIT(TCCR0, COM01);
 dd8:	83 b7       	in	r24, 0x33	; 51
 dda:	80 62       	ori	r24, 0x20	; 32
 ddc:	83 bf       	out	0x33, r24	; 51
            break;
 dde:	0f c0       	rjmp	.+30     	; 0xdfe <timer_vSelect_mode+0xfe>
    }
    break;

    case 2:
    {
        switch (timer_mode_select)
 de0:	65 30       	cpi	r22, 0x05	; 5
 de2:	69 f4       	brne	.+26     	; 0xdfe <timer_vSelect_mode+0xfe>
        {
			case TIMER_OVERFLOW_EXT_OSC:
			{
				/*this driver is built as it will be used in Real Time Clock */
				/*set bit AS2 to choose external clk on pin TOSC1*/
				SET_BIT(ASSR, AS2);
 de4:	82 b5       	in	r24, 0x22	; 34
 de6:	88 60       	ori	r24, 0x08	; 8
 de8:	82 bd       	out	0x22, r24	; 34

				/*set timer prescaller to 128 */
				SET_BIT(TCCR2, CS20);
 dea:	85 b5       	in	r24, 0x25	; 37
 dec:	81 60       	ori	r24, 0x01	; 1
 dee:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2, CS22);
 df0:	85 b5       	in	r24, 0x25	; 37
 df2:	84 60       	ori	r24, 0x04	; 4
 df4:	85 bd       	out	0x25, r24	; 37

				/*enable interrupt*/
				sei(); // global interrupt
 df6:	78 94       	sei
				SET_BIT(TIMSK, TOIE2);
 df8:	89 b7       	in	r24, 0x39	; 57
 dfa:	80 64       	ori	r24, 0x40	; 64
 dfc:	89 bf       	out	0x39, r24	; 57
			default:
				break;
			}
    }
    }
}
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

00000e02 <__tablejump2__>:
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	05 90       	lpm	r0, Z+
 e08:	f4 91       	lpm	r31, Z
 e0a:	e0 2d       	mov	r30, r0
 e0c:	09 94       	ijmp

00000e0e <_exit>:
 e0e:	f8 94       	cli

00000e10 <__stop_program>:
 e10:	ff cf       	rjmp	.-2      	; 0xe10 <__stop_program>
