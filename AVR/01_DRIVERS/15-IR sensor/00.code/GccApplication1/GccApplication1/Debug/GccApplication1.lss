
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000566  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000566  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001372  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  00001aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fa  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000589  00000000  00000000  00002ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d55  00000000  00000000  0000344d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000041a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	9d 00       	.word	0x009d	; ????
  56:	b6 00       	.word	0x00b6	; ????
  58:	cf 00       	.word	0x00cf	; ????
  5a:	e8 00       	.word	0x00e8	; ????
  5c:	00 01       	movw	r0, r0
  5e:	00 01       	movw	r0, r0
  60:	00 01       	movw	r0, r0
  62:	00 01       	movw	r0, r0
  64:	00 01       	movw	r0, r0
  66:	00 01       	movw	r0, r0
  68:	00 01       	movw	r0, r0
  6a:	00 01       	movw	r0, r0
  6c:	00 01       	movw	r0, r0
  6e:	00 01       	movw	r0, r0
  70:	00 01       	movw	r0, r0
  72:	00 01       	movw	r0, r0
  74:	00 01       	movw	r0, r0
  76:	00 01       	movw	r0, r0
  78:	00 01       	movw	r0, r0
  7a:	00 01       	movw	r0, r0
  7c:	00 01       	movw	r0, r0
  7e:	00 01       	movw	r0, r0
  80:	00 01       	movw	r0, r0
  82:	00 01       	movw	r0, r0
  84:	00 01       	movw	r0, r0
  86:	00 01       	movw	r0, r0
  88:	00 01       	movw	r0, r0
  8a:	00 01       	movw	r0, r0
  8c:	00 01       	movw	r0, r0
  8e:	00 01       	movw	r0, r0
  90:	00 01       	movw	r0, r0
  92:	00 01       	movw	r0, r0
  94:	9d 00       	.word	0x009d	; ????
  96:	b6 00       	.word	0x00b6	; ????
  98:	cf 00       	.word	0x00cf	; ????
  9a:	e8 00       	.word	0x00e8	; ????
  9c:	0d 01       	movw	r0, r26
  9e:	26 01       	movw	r4, r12
  a0:	3f 01       	movw	r6, r30
  a2:	58 01       	movw	r10, r16
  a4:	70 01       	movw	r14, r0
  a6:	70 01       	movw	r14, r0
  a8:	70 01       	movw	r14, r0
  aa:	70 01       	movw	r14, r0
  ac:	70 01       	movw	r14, r0
  ae:	70 01       	movw	r14, r0
  b0:	70 01       	movw	r14, r0
  b2:	70 01       	movw	r14, r0
  b4:	70 01       	movw	r14, r0
  b6:	70 01       	movw	r14, r0
  b8:	70 01       	movw	r14, r0
  ba:	70 01       	movw	r14, r0
  bc:	70 01       	movw	r14, r0
  be:	70 01       	movw	r14, r0
  c0:	70 01       	movw	r14, r0
  c2:	70 01       	movw	r14, r0
  c4:	70 01       	movw	r14, r0
  c6:	70 01       	movw	r14, r0
  c8:	70 01       	movw	r14, r0
  ca:	70 01       	movw	r14, r0
  cc:	70 01       	movw	r14, r0
  ce:	70 01       	movw	r14, r0
  d0:	70 01       	movw	r14, r0
  d2:	70 01       	movw	r14, r0
  d4:	70 01       	movw	r14, r0
  d6:	70 01       	movw	r14, r0
  d8:	70 01       	movw	r14, r0
  da:	70 01       	movw	r14, r0
  dc:	0d 01       	movw	r0, r26
  de:	26 01       	movw	r4, r12
  e0:	3f 01       	movw	r6, r30
  e2:	58 01       	movw	r10, r16

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e6 e6       	ldi	r30, 0x66	; 102
  f8:	f5 e0       	ldi	r31, 0x05	; 5
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a4 39       	cpi	r26, 0x94	; 148
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	a4 e9       	ldi	r26, 0x94	; 148
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a4 39       	cpi	r26, 0x94	; 148
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
 11a:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <DIO_vSetPinDir>:
{
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	e1 54       	subi	r30, 0x41	; 65
 128:	f1 09       	sbc	r31, r1
 12a:	e4 32       	cpi	r30, 0x24	; 36
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <DIO_vSetPinDir+0x10>
 130:	67 c0       	rjmp	.+206    	; 0x200 <DIO_vSetPinDir+0xde>
 132:	e6 5d       	subi	r30, 0xD6	; 214
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 ab 02 	jmp	0x556	; 0x556 <__tablejump2__>
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_vSetPinDir+0x32>
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vSetPinDir+0x28>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vSetPinDir+0x24>
 14e:	82 2b       	or	r24, r18
 150:	8a bb       	out	0x1a, r24	; 26
 152:	08 95       	ret
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vSetPinDir+0x3e>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vSetPinDir+0x3a>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	8a bb       	out	0x1a, r24	; 26
 16a:	08 95       	ret
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <DIO_vSetPinDir+0x64>
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vSetPinDir+0x5a>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vSetPinDir+0x56>
 180:	82 2b       	or	r24, r18
 182:	87 bb       	out	0x17, r24	; 23
 184:	08 95       	ret
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vSetPinDir+0x70>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vSetPinDir+0x6c>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_vSetPinDir+0x96>
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vSetPinDir+0x8c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vSetPinDir+0x88>
 1b2:	82 2b       	or	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
 1b6:	08 95       	ret
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_vSetPinDir+0xa2>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_vSetPinDir+0x9e>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	08 95       	ret
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_vSetPinDir+0xc8>
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_vSetPinDir+0xbe>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_vSetPinDir+0xba>
 1e4:	82 2b       	or	r24, r18
 1e6:	81 bb       	out	0x11, r24	; 17
 1e8:	08 95       	ret
 1ea:	21 b3       	in	r18, 0x11	; 17
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_vSetPinDir+0xd4>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_vSetPinDir+0xd0>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	08 95       	ret

00000202 <DIO_vWritePinValue>:
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	e1 54       	subi	r30, 0x41	; 65
 208:	f1 09       	sbc	r31, r1
 20a:	e4 32       	cpi	r30, 0x24	; 36
 20c:	f1 05       	cpc	r31, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <DIO_vWritePinValue+0x10>
 210:	67 c0       	rjmp	.+206    	; 0x2e0 <DIO_vWritePinValue+0xde>
 212:	e2 5b       	subi	r30, 0xB2	; 178
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	0c 94 ab 02 	jmp	0x556	; 0x556 <__tablejump2__>
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	59 f4       	brne	.+22     	; 0x234 <DIO_vWritePinValue+0x32>
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vWritePinValue+0x28>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vWritePinValue+0x24>
 22e:	82 2b       	or	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
 232:	08 95       	ret
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_vWritePinValue+0x3e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_vWritePinValue+0x3a>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <DIO_vWritePinValue+0x64>
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vWritePinValue+0x5a>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vWritePinValue+0x56>
 260:	82 2b       	or	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
 266:	28 b3       	in	r18, 0x18	; 24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_vWritePinValue+0x70>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_vWritePinValue+0x6c>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	08 95       	ret
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <DIO_vWritePinValue+0x96>
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePinValue+0x8c>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePinValue+0x88>
 292:	82 2b       	or	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vWritePinValue+0xa2>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vWritePinValue+0x9e>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_vWritePinValue+0xc8>
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_vWritePinValue+0xbe>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_vWritePinValue+0xba>
 2c4:	82 2b       	or	r24, r18
 2c6:	82 bb       	out	0x12, r24	; 18
 2c8:	08 95       	ret
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vWritePinValue+0xd4>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vWritePinValue+0xd0>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	08 95       	ret

000002e2 <DIO_vSetPortLowNibble>:
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	f8 2e       	mov	r15, r24
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
 2f2:	06 2f       	mov	r16, r22
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	a8 01       	movw	r20, r16
 2f8:	0c 2e       	mov	r0, r28
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_vSetPortLowNibble+0x1e>
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_vSetPortLowNibble+0x1a>
 304:	41 70       	andi	r20, 0x01	; 1
 306:	6c 2f       	mov	r22, r28
 308:	8f 2d       	mov	r24, r15
 30a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
 30e:	21 96       	adiw	r28, 0x01	; 1
 310:	c4 30       	cpi	r28, 0x04	; 4
 312:	d1 05       	cpc	r29, r1
 314:	81 f7       	brne	.-32     	; 0x2f6 <DIO_vSetPortLowNibble+0x14>
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	08 95       	ret

00000322 <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	f8 2e       	mov	r15, r24
 32e:	c0 e0       	ldi	r28, 0x00	; 0
 330:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 332:	06 2f       	mov	r16, r22
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	a8 01       	movw	r20, r16
 338:	0c 2e       	mov	r0, r28
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_vWritePortLowNibble+0x1e>
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_vWritePortLowNibble+0x1a>
 344:	41 70       	andi	r20, 0x01	; 1
 346:	6c 2f       	mov	r22, r28
 348:	8f 2d       	mov	r24, r15
 34a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
 34e:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 350:	c4 30       	cpi	r28, 0x04	; 4
 352:	d1 05       	cpc	r29, r1
 354:	81 f7       	brne	.-32     	; 0x336 <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	08 95       	ret

00000362 <LCD_Enable_pulse>:
}

// new line
void LCD_vNewLine()
{
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	64 e0       	ldi	r22, 0x04	; 4
 366:	83 e6       	ldi	r24, 0x63	; 99
 368:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_Enable_pulse+0xe>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_Enable_pulse+0x14>
 376:	00 00       	nop
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	83 e6       	ldi	r24, 0x63	; 99
 37e:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Enable_pulse+0x24>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Enable_pulse+0x2a>
 38c:	00 00       	nop
 38e:	08 95       	ret

00000390 <LCD_vSendCommand>:
 390:	cf 93       	push	r28
 392:	c8 2f       	mov	r28, r24
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	83 e6       	ldi	r24, 0x63	; 99
 39a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
 39e:	6c 2f       	mov	r22, r28
 3a0:	62 95       	swap	r22
 3a2:	6f 70       	andi	r22, 0x0F	; 15
 3a4:	83 e6       	ldi	r24, 0x63	; 99
 3a6:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
 3aa:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
 3ae:	6c 2f       	mov	r22, r28
 3b0:	83 e6       	ldi	r24, 0x63	; 99
 3b2:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
 3b6:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
 3ba:	8f ec       	ldi	r24, 0xCF	; 207
 3bc:	97 e0       	ldi	r25, 0x07	; 7
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_vSendCommand+0x2e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_vSendCommand+0x34>
 3c4:	00 00       	nop
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <LCD_vClearScreen>:
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 3d0:	08 95       	ret

000003d2 <LCD_vSendChar>:
	LCD_Enable_pulse();								   // send enable pulse
	_delay_ms(1);									   // delay to make sure that command is executed
}

void LCD_vSendChar(unsigned char data)
{
 3d2:	cf 93       	push	r28
 3d4:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 1); // RS data select
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	65 e0       	ldi	r22, 0x05	; 5
 3da:	83 e6       	ldi	r24, 0x63	; 99
 3dc:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (data >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 3e0:	6c 2f       	mov	r22, r28
 3e2:	62 95       	swap	r22
 3e4:	6f 70       	andi	r22, 0x0F	; 15
 3e6:	83 e6       	ldi	r24, 0x63	; 99
 3e8:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 3ec:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, data);		// write on port low nibble and write  4 least bits of data on data reg on lcd
 3f0:	6c 2f       	mov	r22, r28
 3f2:	83 e6       	ldi	r24, 0x63	; 99
 3f4:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 3f8:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
}
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <LCD_vSendString>:
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	ec 01       	movw	r28, r24
	while ((*string_ptr) != 0) // checks null
 406:	88 81       	ld	r24, Y
 408:	88 23       	and	r24, r24
 40a:	79 f0       	breq	.+30     	; 0x42a <LCD_vSendString+0x2a>
 40c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
 40e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_vSendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	80 e7       	ldi	r24, 0x70	; 112
 416:	92 e0       	ldi	r25, 0x02	; 2
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <LCD_vSendString+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <LCD_vSendString+0x22>
 422:	00 00       	nop
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
	while ((*string_ptr) != 0) // checks null
 424:	89 91       	ld	r24, Y+
 426:	81 11       	cpse	r24, r1
 428:	f2 cf       	rjmp	.-28     	; 0x40e <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 430:	6f ef       	ldi	r22, 0xFF	; 255
 432:	83 e6       	ldi	r24, 0x63	; 99
 434:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	64 e0       	ldi	r22, 0x04	; 4
 43c:	83 e6       	ldi	r24, 0x63	; 99
 43e:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	65 e0       	ldi	r22, 0x05	; 5
 446:	83 e6       	ldi	r24, 0x63	; 99
 448:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
 44c:	2f e7       	ldi	r18, 0x7F	; 127
 44e:	88 e3       	ldi	r24, 0x38	; 56
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	21 50       	subi	r18, 0x01	; 1
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <LCD_vInitialize+0x22>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_vInitialize+0x2c>
 45c:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 464:	8f e1       	ldi	r24, 0x1F	; 31
 466:	9e e4       	ldi	r25, 0x4E	; 78
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <LCD_vInitialize+0x38>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <LCD_vInitialize+0x3e>
 46e:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 470:	88 e2       	ldi	r24, 0x28	; 40
 472:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 476:	8f ec       	ldi	r24, 0xCF	; 207
 478:	97 e0       	ldi	r25, 0x07	; 7
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <LCD_vInitialize+0x4a>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_vInitialize+0x50>
 480:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 488:	8f ec       	ldi	r24, 0xCF	; 207
 48a:	97 e0       	ldi	r25, 0x07	; 7
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_vInitialize+0x5c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_vInitialize+0x62>
 492:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 494:	8e e0       	ldi	r24, 0x0E	; 14
 496:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 49a:	8f ec       	ldi	r24, 0xCF	; 207
 49c:	97 e0       	ldi	r25, 0x07	; 7
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD_vInitialize+0x6e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD_vInitialize+0x74>
 4a4:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 4a6:	86 e0       	ldi	r24, 0x06	; 6
 4a8:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4ac:	8f ec       	ldi	r24, 0xCF	; 207
 4ae:	97 e0       	ldi	r25, 0x07	; 7
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_vInitialize+0x80>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_vInitialize+0x86>
 4b6:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4be:	8f ec       	ldi	r24, 0xCF	; 207
 4c0:	97 e0       	ldi	r25, 0x07	; 7
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_vInitialize+0x92>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_vInitialize+0x98>
 4c8:	00 00       	nop
 4ca:	08 95       	ret

000004cc <main>:
unsigned char obstacle;

int main(void)
{
	
	DIO_vSetPinDir('b',2,0);
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	82 e6       	ldi	r24, 0x62	; 98
 4d2:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
	LCD_vInitialize();
 4d6:	0e 94 18 02 	call	0x430	; 0x430 <LCD_vInitialize>
	LCD_vSendString("Hello :)");
 4da:	80 e6       	ldi	r24, 0x60	; 96
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 00 02 	call	0x400	; 0x400 <LCD_vSendString>
 4e2:	2f e3       	ldi	r18, 0x3F	; 63
 4e4:	8d e0       	ldi	r24, 0x0D	; 13
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x1c>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x26>
 4f2:	00 00       	nop
	_delay_ms(1000);
	LCD_vClearScreen();
 4f4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_vClearScreen>
	LCD_vSendString("IR SENSOR proj");
 4f8:	89 e6       	ldi	r24, 0x69	; 105
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 00 02 	call	0x400	; 0x400 <LCD_vSendString>
 500:	2f e3       	ldi	r18, 0x3F	; 63
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	93 e0       	ldi	r25, 0x03	; 3
 506:	21 50       	subi	r18, 0x01	; 1
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x3a>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x44>
 510:	00 00       	nop
	_delay_ms(1000);
    /* Replace with your application code */
    while (1) 
    {
		
		LCD_vClearScreen();
 512:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_vClearScreen>
		if(READ_BIT(PINB,0)==0)
 516:	b0 99       	sbic	0x16, 0	; 22
 518:	0e c0       	rjmp	.+28     	; 0x536 <main+0x6a>
		{
			LCD_vSendString("obstacle found");
 51a:	88 e7       	ldi	r24, 0x78	; 120
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_vSendString>
 522:	2f e3       	ldi	r18, 0x3F	; 63
 524:	8d e0       	ldi	r24, 0x0D	; 13
 526:	93 e0       	ldi	r25, 0x03	; 3
 528:	21 50       	subi	r18, 0x01	; 1
 52a:	80 40       	sbci	r24, 0x00	; 0
 52c:	90 40       	sbci	r25, 0x00	; 0
 52e:	e1 f7       	brne	.-8      	; 0x528 <main+0x5c>
 530:	00 c0       	rjmp	.+0      	; 0x532 <main+0x66>
 532:	00 00       	nop
 534:	ee cf       	rjmp	.-36     	; 0x512 <main+0x46>
			_delay_ms(1000);
		}
		else if(READ_BIT(PINB,0)==1)
 536:	b0 9b       	sbis	0x16, 0	; 22
 538:	ec cf       	rjmp	.-40     	; 0x512 <main+0x46>
		{
			LCD_vSendString("no obstacle");
 53a:	87 e8       	ldi	r24, 0x87	; 135
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_vSendString>
 542:	2f e3       	ldi	r18, 0x3F	; 63
 544:	8d e0       	ldi	r24, 0x0D	; 13
 546:	93 e0       	ldi	r25, 0x03	; 3
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	80 40       	sbci	r24, 0x00	; 0
 54c:	90 40       	sbci	r25, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x7c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <main+0x86>
 552:	00 00       	nop
 554:	de cf       	rjmp	.-68     	; 0x512 <main+0x46>

00000556 <__tablejump2__>:
 556:	ee 0f       	add	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	05 90       	lpm	r0, Z+
 55c:	f4 91       	lpm	r31, Z
 55e:	e0 2d       	mov	r30, r0
 560:	09 94       	ijmp

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
