
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000632  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000632  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df9  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000931  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bc  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d08  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	8b 00       	.word	0x008b	; ????
  56:	a4 00       	.word	0x00a4	; ????
  58:	bd 00       	.word	0x00bd	; ????
  5a:	d6 00       	.word	0x00d6	; ????
  5c:	ee 00       	.word	0x00ee	; ????
  5e:	ee 00       	.word	0x00ee	; ????
  60:	ee 00       	.word	0x00ee	; ????
  62:	ee 00       	.word	0x00ee	; ????
  64:	ee 00       	.word	0x00ee	; ????
  66:	ee 00       	.word	0x00ee	; ????
  68:	ee 00       	.word	0x00ee	; ????
  6a:	ee 00       	.word	0x00ee	; ????
  6c:	ee 00       	.word	0x00ee	; ????
  6e:	ee 00       	.word	0x00ee	; ????
  70:	ee 00       	.word	0x00ee	; ????
  72:	ee 00       	.word	0x00ee	; ????
  74:	ee 00       	.word	0x00ee	; ????
  76:	ee 00       	.word	0x00ee	; ????
  78:	ee 00       	.word	0x00ee	; ????
  7a:	ee 00       	.word	0x00ee	; ????
  7c:	ee 00       	.word	0x00ee	; ????
  7e:	ee 00       	.word	0x00ee	; ????
  80:	ee 00       	.word	0x00ee	; ????
  82:	ee 00       	.word	0x00ee	; ????
  84:	ee 00       	.word	0x00ee	; ????
  86:	ee 00       	.word	0x00ee	; ????
  88:	ee 00       	.word	0x00ee	; ????
  8a:	ee 00       	.word	0x00ee	; ????
  8c:	ee 00       	.word	0x00ee	; ????
  8e:	ee 00       	.word	0x00ee	; ????
  90:	ee 00       	.word	0x00ee	; ????
  92:	ee 00       	.word	0x00ee	; ????
  94:	8b 00       	.word	0x008b	; ????
  96:	a4 00       	.word	0x00a4	; ????
  98:	bd 00       	.word	0x00bd	; ????
  9a:	d6 00       	.word	0x00d6	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e2 e3       	ldi	r30, 0x32	; 50
  b0:	f6 e0       	ldi	r31, 0x06	; 6
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 36       	cpi	r26, 0x62	; 98
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>
  be:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  c2:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <DC_MOTOR_DUTY_CYCLE>:
	//it's connected to timer 0
	//enter duty cycle in percentage like 0:100
	//(ocr/TCNT)*100 = duty_cycle
	//ocr=(duty_cycle/100)*tcnt-->(duty_cycle/100)*255
	unsigned char ocr_value=(duty_cycle/100.0F)*255;//you should convert in number to float in dividing because it will give you zero
	timer_vSelect_mode(0,TIMER_MODE_FAST_PWM,ocr_value);
  ca:	68 2f       	mov	r22, r24
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 18 02 	call	0x430	; 0x430 <__floatsisf>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	48 ec       	ldi	r20, 0xC8	; 200
  dc:	52 e4       	ldi	r21, 0x42	; 66
  de:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divsf3>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	4f e7       	ldi	r20, 0x7F	; 127
  e8:	53 e4       	ldi	r21, 0x43	; 67
  ea:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
  ee:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fixunssfsi>
  f2:	46 2f       	mov	r20, r22
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <timer_vSelect_mode>
  fc:	08 95       	ret

000000fe <DIO_vSetPinDir>:
#include "Common_Macros.h"

// Bin Direction
void DIO_vSetPinDir(unsigned char port_name, unsigned char pin_num, unsigned char pin_direction)
{
	switch (port_name)
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	e1 54       	subi	r30, 0x41	; 65
 104:	f1 09       	sbc	r31, r1
 106:	e4 32       	cpi	r30, 0x24	; 36
 108:	f1 05       	cpc	r31, r1
 10a:	08 f0       	brcs	.+2      	; 0x10e <DIO_vSetPinDir+0x10>
 10c:	67 c0       	rjmp	.+206    	; 0x1dc <DIO_vSetPinDir+0xde>
 10e:	e6 5d       	subi	r30, 0xD6	; 214
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	0c 94 11 03 	jmp	0x622	; 0x622 <__tablejump2__>
	{

	case 'A':
	case 'a':
		if (pin_direction == 1)
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_vSetPinDir+0x32>
		{
			SET_BIT(DDRA, pin_num);
 11a:	2a b3       	in	r18, 0x1a	; 26
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_vSetPinDir+0x28>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_vSetPinDir+0x24>
 12a:	82 2b       	or	r24, r18
 12c:	8a bb       	out	0x1a, r24	; 26
 12e:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRA, pin_num);
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_vSetPinDir+0x3e>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_vSetPinDir+0x3a>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	8a bb       	out	0x1a, r24	; 26
 146:	08 95       	ret
		break;

	case 'b':
	case 'B':

		if (pin_direction == 1)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	59 f4       	brne	.+22     	; 0x162 <DIO_vSetPinDir+0x64>
		{
			SET_BIT(DDRB, pin_num);
 14c:	27 b3       	in	r18, 0x17	; 23
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_vSetPinDir+0x5a>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_vSetPinDir+0x56>
 15c:	82 2b       	or	r24, r18
 15e:	87 bb       	out	0x17, r24	; 23
 160:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRB, pin_num);
 162:	27 b3       	in	r18, 0x17	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_vSetPinDir+0x70>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_vSetPinDir+0x6c>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	87 bb       	out	0x17, r24	; 23
 178:	08 95       	ret
		}
		break;
	case 'c':
	case 'C':

		if (pin_direction == 1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_vSetPinDir+0x96>
		{
			SET_BIT(DDRC, pin_num);
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vSetPinDir+0x8c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vSetPinDir+0x88>
 18e:	82 2b       	or	r24, r18
 190:	84 bb       	out	0x14, r24	; 20
 192:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRC, pin_num);
 194:	24 b3       	in	r18, 0x14	; 20
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_vSetPinDir+0xa2>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_vSetPinDir+0x9e>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	84 bb       	out	0x14, r24	; 20
 1aa:	08 95       	ret
		}
		break;
	case 'd':
	case 'D':

		if (pin_direction == 1)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_vSetPinDir+0xc8>
		{
			SET_BIT(DDRD, pin_num);
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_vSetPinDir+0xbe>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_vSetPinDir+0xba>
 1c0:	82 2b       	or	r24, r18
 1c2:	81 bb       	out	0x11, r24	; 17
 1c4:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRD, pin_num);
 1c6:	21 b3       	in	r18, 0x11	; 17
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_vSetPinDir+0xd4>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_vSetPinDir+0xd0>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	81 bb       	out	0x11, r24	; 17
 1dc:	08 95       	ret

000001de <main>:
#include "DC_MOTOR.h"

unsigned char duty_cycle=100;
int main(void)
{
	DC_MOTOR_DUTY_CYCLE(duty_cycle);
 1de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1e2:	0e 94 65 00 	call	0xca	; 0xca <DC_MOTOR_DUTY_CYCLE>
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x8>

000001e8 <timer_vSelect_mode>:
}


// note if you are using overflow mode you can put any value for OCR
void timer_vSelect_mode(unsigned char timer_num_select, unsigned char timer_mode_select, unsigned char timer_pwm_value)
{
 1e8:	cf 93       	push	r28

    switch (timer_num_select)
 1ea:	88 23       	and	r24, r24
 1ec:	21 f0       	breq	.+8      	; 0x1f6 <timer_vSelect_mode+0xe>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <timer_vSelect_mode+0xc>
 1f2:	6a c0       	rjmp	.+212    	; 0x2c8 <timer_vSelect_mode+0xe0>
 1f4:	78 c0       	rjmp	.+240    	; 0x2e6 <timer_vSelect_mode+0xfe>
    {
    case 0:
    {
        switch (timer_mode_select)
 1f6:	62 30       	cpi	r22, 0x02	; 2
 1f8:	41 f1       	breq	.+80     	; 0x24a <timer_vSelect_mode+0x62>
 1fa:	28 f4       	brcc	.+10     	; 0x206 <timer_vSelect_mode+0x1e>
 1fc:	66 23       	and	r22, r22
 1fe:	51 f0       	breq	.+20     	; 0x214 <timer_vSelect_mode+0x2c>
 200:	61 30       	cpi	r22, 0x01	; 1
 202:	99 f0       	breq	.+38     	; 0x22a <timer_vSelect_mode+0x42>
 204:	70 c0       	rjmp	.+224    	; 0x2e6 <timer_vSelect_mode+0xfe>
 206:	c4 2f       	mov	r28, r20
 208:	63 30       	cpi	r22, 0x03	; 3
 20a:	79 f1       	breq	.+94     	; 0x26a <timer_vSelect_mode+0x82>
 20c:	64 30       	cpi	r22, 0x04	; 4
 20e:	09 f4       	brne	.+2      	; 0x212 <timer_vSelect_mode+0x2a>
 210:	45 c0       	rjmp	.+138    	; 0x29c <timer_vSelect_mode+0xb4>
 212:	69 c0       	rjmp	.+210    	; 0x2e6 <timer_vSelect_mode+0xfe>
            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            /*the timer overflow time = 256 * 128uT = 32.768ms */
            SET_BIT(TCCR0, CS00);
 214:	83 b7       	in	r24, 0x33	; 51
 216:	81 60       	ori	r24, 0x01	; 1
 218:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 21a:	83 b7       	in	r24, 0x33	; 51
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	83 bf       	out	0x33, r24	; 51

            sei();                 // enable interrupt in system
 220:	78 94       	sei
            SET_BIT(TIMSK, TOIE0); // enable interrupt of OVERFLOW timer0
 222:	89 b7       	in	r24, 0x39	; 57
 224:	81 60       	ori	r24, 0x01	; 1
 226:	89 bf       	out	0x39, r24	; 57

            break;
 228:	5e c0       	rjmp	.+188    	; 0x2e6 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_CTC: // user choosed ctc mode.

            /*set bits of TCCR0 to choose ctc mode*/
            /*to enable that wgm01 = 1 and wgm00 = 0*/
            SET_BIT(TCCR0, WGM01);
 22a:	83 b7       	in	r24, 0x33	; 51
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	83 bf       	out	0x33, r24	; 51

            OCR0 = 80; // to make it 10ms so it can be configurable
 230:	80 e5       	ldi	r24, 0x50	; 80
 232:	8c bf       	out	0x3c, r24	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 234:	83 b7       	in	r24, 0x33	; 51
 236:	81 60       	ori	r24, 0x01	; 1
 238:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	83 bf       	out	0x33, r24	; 51

            sei();                 // enable interrupt in system
 240:	78 94       	sei
            SET_BIT(TIMSK, OCIE0); // enable interrupt of CTC timer0
 242:	89 b7       	in	r24, 0x39	; 57
 244:	82 60       	ori	r24, 0x02	; 2
 246:	89 bf       	out	0x39, r24	; 57
            break;
 248:	4e c0       	rjmp	.+156    	; 0x2e6 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_NON_PWM:

            SET_BIT(DDRB, 3); // set bin 3B as output
 24a:	bb 9a       	sbi	0x17, 3	; 23

            /*set bits of TCCR0 to choose ctc mode*/
            /*to enable that wgm01 = 1 and wgm00 = 0*/
            SET_BIT(TCCR0, WGM01);
 24c:	83 b7       	in	r24, 0x33	; 51
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	83 bf       	out	0x33, r24	; 51

            OCR0 = 64; // value of ocr0 to decide frequency
 252:	80 e4       	ldi	r24, 0x40	; 64
 254:	8c bf       	out	0x3c, r24	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 256:	83 b7       	in	r24, 0x33	; 51
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 25c:	83 b7       	in	r24, 0x33	; 51
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	83 bf       	out	0x33, r24	; 51

            SET_BIT(TCCR0, COM00); // toggle oc0 on compare match
 262:	83 b7       	in	r24, 0x33	; 51
 264:	80 61       	ori	r24, 0x10	; 16
 266:	83 bf       	out	0x33, r24	; 51
            break;
 268:	3e c0       	rjmp	.+124    	; 0x2e6 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_FAST_PWM_INVERTING:

            DIO_vSetPinDir('b', 3, 1); // set pinB3 as O/P
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	82 e6       	ldi	r24, 0x62	; 98
 270:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vSetPinDir>

            /*select fast pwm mode*/
            SET_BIT(TCCR0, WGM00);
 274:	83 b7       	in	r24, 0x33	; 51
 276:	80 64       	ori	r24, 0x40	; 64
 278:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 27a:	83 b7       	in	r24, 0x33	; 51
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	83 bf       	out	0x33, r24	; 51

            OCR0 = timer_pwm_value;
 280:	cc bf       	out	0x3c, r28	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 282:	83 b7       	in	r24, 0x33	; 51
 284:	81 60       	ori	r24, 0x01	; 1
 286:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 288:	83 b7       	in	r24, 0x33	; 51
 28a:	84 60       	ori	r24, 0x04	; 4
 28c:	83 bf       	out	0x33, r24	; 51

            /*set oc0 compare on compare match,clear on overflow*/
            SET_BIT(TCCR0, COM00);
 28e:	83 b7       	in	r24, 0x33	; 51
 290:	80 61       	ori	r24, 0x10	; 16
 292:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, COM01);
 294:	83 b7       	in	r24, 0x33	; 51
 296:	80 62       	ori	r24, 0x20	; 32
 298:	83 bf       	out	0x33, r24	; 51
            break;
 29a:	25 c0       	rjmp	.+74     	; 0x2e6 <timer_vSelect_mode+0xfe>

        case TIMER_MODE_FAST_PWM:
            DIO_vSetPinDir('b', 3, 1); // set pinB3 as O/P
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	82 e6       	ldi	r24, 0x62	; 98
 2a2:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vSetPinDir>

            /*select fast pwm mode*/
            SET_BIT(TCCR0, WGM00);
 2a6:	83 b7       	in	r24, 0x33	; 51
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 2ac:	83 b7       	in	r24, 0x33	; 51
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	83 bf       	out	0x33, r24	; 51

            OCR0 = timer_pwm_value;
 2b2:	cc bf       	out	0x3c, r28	; 60

            /*set timer clk*/
            /*assume 8MHZ is the mcu clk*/
            /*timer clk will be 8MHZ/1024 --> 7.8123KHZ */
            /*timer tick time --> 1/timer_clk = 128uT */
            SET_BIT(TCCR0, CS00);
 2b4:	83 b7       	in	r24, 0x33	; 51
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 2ba:	83 b7       	in	r24, 0x33	; 51
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	83 bf       	out	0x33, r24	; 51

            /*set oc0 compare on compare match,clear on overflow*/
            SET_BIT(TCCR0, COM01);
 2c0:	83 b7       	in	r24, 0x33	; 51
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	83 bf       	out	0x33, r24	; 51
            break;
 2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <timer_vSelect_mode+0xfe>
    }
    break;

    case 2:
    {
        switch (timer_mode_select)
 2c8:	65 30       	cpi	r22, 0x05	; 5
 2ca:	69 f4       	brne	.+26     	; 0x2e6 <timer_vSelect_mode+0xfe>
        {
        case TIMER_OVERFLOW_EXT_OSC:
        {
            /*this driver is built as it will be used in Real Time Clock */
            /*set bit AS2 to choose external clk on pin TOSC1*/
            SET_BIT(ASSR, AS2);
 2cc:	82 b5       	in	r24, 0x22	; 34
 2ce:	88 60       	ori	r24, 0x08	; 8
 2d0:	82 bd       	out	0x22, r24	; 34

            /*set timer prescaller to 128 */
            SET_BIT(TCCR2, CS20);
 2d2:	85 b5       	in	r24, 0x25	; 37
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	85 bd       	out	0x25, r24	; 37
            SET_BIT(TCCR2, CS22);
 2d8:	85 b5       	in	r24, 0x25	; 37
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	85 bd       	out	0x25, r24	; 37

            /*enable interrupt*/
            sei(); // global interrupt
 2de:	78 94       	sei
            SET_BIT(TIMSK, TOIE2);
 2e0:	89 b7       	in	r24, 0x39	; 57
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	89 bf       	out	0x39, r24	; 57
        default:
            break;
        }
    }
    }
}
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <__divsf3>:
 2ea:	0e 94 89 01 	call	0x312	; 0x312 <__divsf3x>
 2ee:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_round>
 2f2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscB>
 2f6:	58 f0       	brcs	.+22     	; 0x30e <__divsf3+0x24>
 2f8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscA>
 2fc:	40 f0       	brcs	.+16     	; 0x30e <__divsf3+0x24>
 2fe:	29 f4       	brne	.+10     	; 0x30a <__divsf3+0x20>
 300:	5f 3f       	cpi	r21, 0xFF	; 255
 302:	29 f0       	breq	.+10     	; 0x30e <__divsf3+0x24>
 304:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 308:	51 11       	cpse	r21, r1
 30a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>
 30e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>

00000312 <__divsf3x>:
 312:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_split3>
 316:	68 f3       	brcs	.-38     	; 0x2f2 <__divsf3+0x8>

00000318 <__divsf3_pse>:
 318:	99 23       	and	r25, r25
 31a:	b1 f3       	breq	.-20     	; 0x308 <__divsf3+0x1e>
 31c:	55 23       	and	r21, r21
 31e:	91 f3       	breq	.-28     	; 0x304 <__divsf3+0x1a>
 320:	95 1b       	sub	r25, r21
 322:	55 0b       	sbc	r21, r21
 324:	bb 27       	eor	r27, r27
 326:	aa 27       	eor	r26, r26
 328:	62 17       	cp	r22, r18
 32a:	73 07       	cpc	r23, r19
 32c:	84 07       	cpc	r24, r20
 32e:	38 f0       	brcs	.+14     	; 0x33e <__divsf3_pse+0x26>
 330:	9f 5f       	subi	r25, 0xFF	; 255
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	44 1f       	adc	r20, r20
 33a:	aa 1f       	adc	r26, r26
 33c:	a9 f3       	breq	.-22     	; 0x328 <__divsf3_pse+0x10>
 33e:	35 d0       	rcall	.+106    	; 0x3aa <__divsf3_pse+0x92>
 340:	0e 2e       	mov	r0, r30
 342:	3a f0       	brmi	.+14     	; 0x352 <__divsf3_pse+0x3a>
 344:	e0 e8       	ldi	r30, 0x80	; 128
 346:	32 d0       	rcall	.+100    	; 0x3ac <__divsf3_pse+0x94>
 348:	91 50       	subi	r25, 0x01	; 1
 34a:	50 40       	sbci	r21, 0x00	; 0
 34c:	e6 95       	lsr	r30
 34e:	00 1c       	adc	r0, r0
 350:	ca f7       	brpl	.-14     	; 0x344 <__divsf3_pse+0x2c>
 352:	2b d0       	rcall	.+86     	; 0x3aa <__divsf3_pse+0x92>
 354:	fe 2f       	mov	r31, r30
 356:	29 d0       	rcall	.+82     	; 0x3aa <__divsf3_pse+0x92>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	bb 1f       	adc	r27, r27
 360:	26 17       	cp	r18, r22
 362:	37 07       	cpc	r19, r23
 364:	48 07       	cpc	r20, r24
 366:	ab 07       	cpc	r26, r27
 368:	b0 e8       	ldi	r27, 0x80	; 128
 36a:	09 f0       	breq	.+2      	; 0x36e <__divsf3_pse+0x56>
 36c:	bb 0b       	sbc	r27, r27
 36e:	80 2d       	mov	r24, r0
 370:	bf 01       	movw	r22, r30
 372:	ff 27       	eor	r31, r31
 374:	93 58       	subi	r25, 0x83	; 131
 376:	5f 4f       	sbci	r21, 0xFF	; 255
 378:	3a f0       	brmi	.+14     	; 0x388 <__divsf3_pse+0x70>
 37a:	9e 3f       	cpi	r25, 0xFE	; 254
 37c:	51 05       	cpc	r21, r1
 37e:	78 f0       	brcs	.+30     	; 0x39e <__divsf3_pse+0x86>
 380:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 384:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>
 388:	5f 3f       	cpi	r21, 0xFF	; 255
 38a:	e4 f3       	brlt	.-8      	; 0x384 <__divsf3_pse+0x6c>
 38c:	98 3e       	cpi	r25, 0xE8	; 232
 38e:	d4 f3       	brlt	.-12     	; 0x384 <__divsf3_pse+0x6c>
 390:	86 95       	lsr	r24
 392:	77 95       	ror	r23
 394:	67 95       	ror	r22
 396:	b7 95       	ror	r27
 398:	f7 95       	ror	r31
 39a:	9f 5f       	subi	r25, 0xFF	; 255
 39c:	c9 f7       	brne	.-14     	; 0x390 <__divsf3_pse+0x78>
 39e:	88 0f       	add	r24, r24
 3a0:	91 1d       	adc	r25, r1
 3a2:	96 95       	lsr	r25
 3a4:	87 95       	ror	r24
 3a6:	97 f9       	bld	r25, 7
 3a8:	08 95       	ret
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	bb 1f       	adc	r27, r27
 3b4:	62 17       	cp	r22, r18
 3b6:	73 07       	cpc	r23, r19
 3b8:	84 07       	cpc	r24, r20
 3ba:	ba 07       	cpc	r27, r26
 3bc:	20 f0       	brcs	.+8      	; 0x3c6 <__divsf3_pse+0xae>
 3be:	62 1b       	sub	r22, r18
 3c0:	73 0b       	sbc	r23, r19
 3c2:	84 0b       	sbc	r24, r20
 3c4:	ba 0b       	sbc	r27, r26
 3c6:	ee 1f       	adc	r30, r30
 3c8:	88 f7       	brcc	.-30     	; 0x3ac <__divsf3_pse+0x94>
 3ca:	e0 95       	com	r30
 3cc:	08 95       	ret

000003ce <__fixunssfsi>:
 3ce:	0e 94 83 02 	call	0x506	; 0x506 <__fp_splitA>
 3d2:	88 f0       	brcs	.+34     	; 0x3f6 <__fixunssfsi+0x28>
 3d4:	9f 57       	subi	r25, 0x7F	; 127
 3d6:	98 f0       	brcs	.+38     	; 0x3fe <__fixunssfsi+0x30>
 3d8:	b9 2f       	mov	r27, r25
 3da:	99 27       	eor	r25, r25
 3dc:	b7 51       	subi	r27, 0x17	; 23
 3de:	b0 f0       	brcs	.+44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e0:	e1 f0       	breq	.+56     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	1a f0       	brmi	.+6      	; 0x3f2 <__fixunssfsi+0x24>
 3ec:	ba 95       	dec	r27
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <__fixunssfsi+0x14>
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f2:	b1 30       	cpi	r27, 0x01	; 1
 3f4:	91 f0       	breq	.+36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f6:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_zero>
 3fa:	b1 e0       	ldi	r27, 0x01	; 1
 3fc:	08 95       	ret
 3fe:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_zero>
 402:	67 2f       	mov	r22, r23
 404:	78 2f       	mov	r23, r24
 406:	88 27       	eor	r24, r24
 408:	b8 5f       	subi	r27, 0xF8	; 248
 40a:	39 f0       	breq	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	b9 3f       	cpi	r27, 0xF9	; 249
 40e:	cc f3       	brlt	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 410:	86 95       	lsr	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b3 95       	inc	r27
 418:	d9 f7       	brne	.-10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41a:	3e f4       	brtc	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	90 95       	com	r25
 41e:	80 95       	com	r24
 420:	70 95       	com	r23
 422:	61 95       	neg	r22
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__floatunsisf>:
 42c:	e8 94       	clt
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__floatsisf+0x12>

00000430 <__floatsisf>:
 430:	97 fb       	bst	r25, 7
 432:	3e f4       	brtc	.+14     	; 0x442 <__floatsisf+0x12>
 434:	90 95       	com	r25
 436:	80 95       	com	r24
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	99 23       	and	r25, r25
 444:	a9 f0       	breq	.+42     	; 0x470 <__floatsisf+0x40>
 446:	f9 2f       	mov	r31, r25
 448:	96 e9       	ldi	r25, 0x96	; 150
 44a:	bb 27       	eor	r27, r27
 44c:	93 95       	inc	r25
 44e:	f6 95       	lsr	r31
 450:	87 95       	ror	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	f1 11       	cpse	r31, r1
 45a:	f8 cf       	rjmp	.-16     	; 0x44c <__floatsisf+0x1c>
 45c:	fa f4       	brpl	.+62     	; 0x49c <__floatsisf+0x6c>
 45e:	bb 0f       	add	r27, r27
 460:	11 f4       	brne	.+4      	; 0x466 <__floatsisf+0x36>
 462:	60 ff       	sbrs	r22, 0
 464:	1b c0       	rjmp	.+54     	; 0x49c <__floatsisf+0x6c>
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	16 c0       	rjmp	.+44     	; 0x49c <__floatsisf+0x6c>
 470:	88 23       	and	r24, r24
 472:	11 f0       	breq	.+4      	; 0x478 <__floatsisf+0x48>
 474:	96 e9       	ldi	r25, 0x96	; 150
 476:	11 c0       	rjmp	.+34     	; 0x49a <__floatsisf+0x6a>
 478:	77 23       	and	r23, r23
 47a:	21 f0       	breq	.+8      	; 0x484 <__floatsisf+0x54>
 47c:	9e e8       	ldi	r25, 0x8E	; 142
 47e:	87 2f       	mov	r24, r23
 480:	76 2f       	mov	r23, r22
 482:	05 c0       	rjmp	.+10     	; 0x48e <__floatsisf+0x5e>
 484:	66 23       	and	r22, r22
 486:	71 f0       	breq	.+28     	; 0x4a4 <__floatsisf+0x74>
 488:	96 e8       	ldi	r25, 0x86	; 134
 48a:	86 2f       	mov	r24, r22
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	2a f0       	brmi	.+10     	; 0x49c <__floatsisf+0x6c>
 492:	9a 95       	dec	r25
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	da f7       	brpl	.-10     	; 0x492 <__floatsisf+0x62>
 49c:	88 0f       	add	r24, r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	97 f9       	bld	r25, 7
 4a4:	08 95       	ret

000004a6 <__fp_inf>:
 4a6:	97 f9       	bld	r25, 7
 4a8:	9f 67       	ori	r25, 0x7F	; 127
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	08 95       	ret

000004b2 <__fp_nan>:
 4b2:	9f ef       	ldi	r25, 0xFF	; 255
 4b4:	80 ec       	ldi	r24, 0xC0	; 192
 4b6:	08 95       	ret

000004b8 <__fp_pscA>:
 4b8:	00 24       	eor	r0, r0
 4ba:	0a 94       	dec	r0
 4bc:	16 16       	cp	r1, r22
 4be:	17 06       	cpc	r1, r23
 4c0:	18 06       	cpc	r1, r24
 4c2:	09 06       	cpc	r0, r25
 4c4:	08 95       	ret

000004c6 <__fp_pscB>:
 4c6:	00 24       	eor	r0, r0
 4c8:	0a 94       	dec	r0
 4ca:	12 16       	cp	r1, r18
 4cc:	13 06       	cpc	r1, r19
 4ce:	14 06       	cpc	r1, r20
 4d0:	05 06       	cpc	r0, r21
 4d2:	08 95       	ret

000004d4 <__fp_round>:
 4d4:	09 2e       	mov	r0, r25
 4d6:	03 94       	inc	r0
 4d8:	00 0c       	add	r0, r0
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__fp_round+0xc>
 4dc:	88 23       	and	r24, r24
 4de:	52 f0       	brmi	.+20     	; 0x4f4 <__fp_round+0x20>
 4e0:	bb 0f       	add	r27, r27
 4e2:	40 f4       	brcc	.+16     	; 0x4f4 <__fp_round+0x20>
 4e4:	bf 2b       	or	r27, r31
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0x18>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__fp_round+0x20>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__fp_split3>:
 4f6:	57 fd       	sbrc	r21, 7
 4f8:	90 58       	subi	r25, 0x80	; 128
 4fa:	44 0f       	add	r20, r20
 4fc:	55 1f       	adc	r21, r21
 4fe:	59 f0       	breq	.+22     	; 0x516 <__fp_splitA+0x10>
 500:	5f 3f       	cpi	r21, 0xFF	; 255
 502:	71 f0       	breq	.+28     	; 0x520 <__fp_splitA+0x1a>
 504:	47 95       	ror	r20

00000506 <__fp_splitA>:
 506:	88 0f       	add	r24, r24
 508:	97 fb       	bst	r25, 7
 50a:	99 1f       	adc	r25, r25
 50c:	61 f0       	breq	.+24     	; 0x526 <__fp_splitA+0x20>
 50e:	9f 3f       	cpi	r25, 0xFF	; 255
 510:	79 f0       	breq	.+30     	; 0x530 <__fp_splitA+0x2a>
 512:	87 95       	ror	r24
 514:	08 95       	ret
 516:	12 16       	cp	r1, r18
 518:	13 06       	cpc	r1, r19
 51a:	14 06       	cpc	r1, r20
 51c:	55 1f       	adc	r21, r21
 51e:	f2 cf       	rjmp	.-28     	; 0x504 <__fp_split3+0xe>
 520:	46 95       	lsr	r20
 522:	f1 df       	rcall	.-30     	; 0x506 <__fp_splitA>
 524:	08 c0       	rjmp	.+16     	; 0x536 <__fp_splitA+0x30>
 526:	16 16       	cp	r1, r22
 528:	17 06       	cpc	r1, r23
 52a:	18 06       	cpc	r1, r24
 52c:	99 1f       	adc	r25, r25
 52e:	f1 cf       	rjmp	.-30     	; 0x512 <__fp_splitA+0xc>
 530:	86 95       	lsr	r24
 532:	71 05       	cpc	r23, r1
 534:	61 05       	cpc	r22, r1
 536:	08 94       	sec
 538:	08 95       	ret

0000053a <__fp_zero>:
 53a:	e8 94       	clt

0000053c <__fp_szero>:
 53c:	bb 27       	eor	r27, r27
 53e:	66 27       	eor	r22, r22
 540:	77 27       	eor	r23, r23
 542:	cb 01       	movw	r24, r22
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__mulsf3>:
 548:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3x>
 54c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_round>
 550:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscA>
 554:	38 f0       	brcs	.+14     	; 0x564 <__mulsf3+0x1c>
 556:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscB>
 55a:	20 f0       	brcs	.+8      	; 0x564 <__mulsf3+0x1c>
 55c:	95 23       	and	r25, r21
 55e:	11 f0       	breq	.+4      	; 0x564 <__mulsf3+0x1c>
 560:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 564:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>
 568:	11 24       	eor	r1, r1
 56a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>

0000056e <__mulsf3x>:
 56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_split3>
 572:	70 f3       	brcs	.-36     	; 0x550 <__mulsf3+0x8>

00000574 <__mulsf3_pse>:
 574:	95 9f       	mul	r25, r21
 576:	c1 f3       	breq	.-16     	; 0x568 <__mulsf3+0x20>
 578:	95 0f       	add	r25, r21
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	55 1f       	adc	r21, r21
 57e:	62 9f       	mul	r22, r18
 580:	f0 01       	movw	r30, r0
 582:	72 9f       	mul	r23, r18
 584:	bb 27       	eor	r27, r27
 586:	f0 0d       	add	r31, r0
 588:	b1 1d       	adc	r27, r1
 58a:	63 9f       	mul	r22, r19
 58c:	aa 27       	eor	r26, r26
 58e:	f0 0d       	add	r31, r0
 590:	b1 1d       	adc	r27, r1
 592:	aa 1f       	adc	r26, r26
 594:	64 9f       	mul	r22, r20
 596:	66 27       	eor	r22, r22
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	66 1f       	adc	r22, r22
 59e:	82 9f       	mul	r24, r18
 5a0:	22 27       	eor	r18, r18
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	62 1f       	adc	r22, r18
 5a8:	73 9f       	mul	r23, r19
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	62 1f       	adc	r22, r18
 5b0:	83 9f       	mul	r24, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	22 1f       	adc	r18, r18
 5b8:	74 9f       	mul	r23, r20
 5ba:	33 27       	eor	r19, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	23 1f       	adc	r18, r19
 5c2:	84 9f       	mul	r24, r20
 5c4:	60 0d       	add	r22, r0
 5c6:	21 1d       	adc	r18, r1
 5c8:	82 2f       	mov	r24, r18
 5ca:	76 2f       	mov	r23, r22
 5cc:	6a 2f       	mov	r22, r26
 5ce:	11 24       	eor	r1, r1
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	9a f0       	brmi	.+38     	; 0x5fc <__mulsf3_pse+0x88>
 5d6:	f1 f0       	breq	.+60     	; 0x614 <__mulsf3_pse+0xa0>
 5d8:	88 23       	and	r24, r24
 5da:	4a f0       	brmi	.+18     	; 0x5ee <__mulsf3_pse+0x7a>
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__mulsf3_pse+0x64>
 5ee:	9e 3f       	cpi	r25, 0xFE	; 254
 5f0:	51 05       	cpc	r21, r1
 5f2:	80 f0       	brcs	.+32     	; 0x614 <__mulsf3_pse+0xa0>
 5f4:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 5f8:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	e4 f3       	brlt	.-8      	; 0x5f8 <__mulsf3_pse+0x84>
 600:	98 3e       	cpi	r25, 0xE8	; 232
 602:	d4 f3       	brlt	.-12     	; 0x5f8 <__mulsf3_pse+0x84>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f7 95       	ror	r31
 60e:	e7 95       	ror	r30
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	c1 f7       	brne	.-16     	; 0x604 <__mulsf3_pse+0x90>
 614:	fe 2b       	or	r31, r30
 616:	88 0f       	add	r24, r24
 618:	91 1d       	adc	r25, r1
 61a:	96 95       	lsr	r25
 61c:	87 95       	ror	r24
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret

00000622 <__tablejump2__>:
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	05 90       	lpm	r0, Z+
 628:	f4 91       	lpm	r31, Z
 62a:	e0 2d       	mov	r30, r0
 62c:	09 94       	ijmp

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
