
7-seg autosar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aaf  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079a  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a7  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000526  00000000  00000000  00002151  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	bd 00       	.word	0x00bd	; ????
  56:	bf 00       	.word	0x00bf	; ????
  58:	c1 00       	.word	0x00c1	; ????
  5a:	c3 00       	.word	0x00c3	; ????
  5c:	c4 00       	.word	0x00c4	; ????
  5e:	c4 00       	.word	0x00c4	; ????
  60:	c4 00       	.word	0x00c4	; ????
  62:	c4 00       	.word	0x00c4	; ????
  64:	c4 00       	.word	0x00c4	; ????
  66:	c4 00       	.word	0x00c4	; ????
  68:	c4 00       	.word	0x00c4	; ????
  6a:	c4 00       	.word	0x00c4	; ????
  6c:	c4 00       	.word	0x00c4	; ????
  6e:	c4 00       	.word	0x00c4	; ????
  70:	c4 00       	.word	0x00c4	; ????
  72:	c4 00       	.word	0x00c4	; ????
  74:	c4 00       	.word	0x00c4	; ????
  76:	c4 00       	.word	0x00c4	; ????
  78:	c4 00       	.word	0x00c4	; ????
  7a:	c4 00       	.word	0x00c4	; ????
  7c:	c4 00       	.word	0x00c4	; ????
  7e:	c4 00       	.word	0x00c4	; ????
  80:	c4 00       	.word	0x00c4	; ????
  82:	c4 00       	.word	0x00c4	; ????
  84:	c4 00       	.word	0x00c4	; ????
  86:	c4 00       	.word	0x00c4	; ????
  88:	c4 00       	.word	0x00c4	; ????
  8a:	c4 00       	.word	0x00c4	; ????
  8c:	c4 00       	.word	0x00c4	; ????
  8e:	c4 00       	.word	0x00c4	; ????
  90:	c4 00       	.word	0x00c4	; ????
  92:	c4 00       	.word	0x00c4	; ????
  94:	bd 00       	.word	0x00bd	; ????
  96:	bf 00       	.word	0x00bf	; ????
  98:	c1 00       	.word	0x00c1	; ????
  9a:	c3 00       	.word	0x00c3	; ????
  9c:	d0 00       	.word	0x00d0	; ????
  9e:	d2 00       	.word	0x00d2	; ????
  a0:	d4 00       	.word	0x00d4	; ????
  a2:	d6 00       	.word	0x00d6	; ????
  a4:	d7 00       	.word	0x00d7	; ????
  a6:	d7 00       	.word	0x00d7	; ????
  a8:	d7 00       	.word	0x00d7	; ????
  aa:	d7 00       	.word	0x00d7	; ????
  ac:	d7 00       	.word	0x00d7	; ????
  ae:	d7 00       	.word	0x00d7	; ????
  b0:	d7 00       	.word	0x00d7	; ????
  b2:	d7 00       	.word	0x00d7	; ????
  b4:	d7 00       	.word	0x00d7	; ????
  b6:	d7 00       	.word	0x00d7	; ????
  b8:	d7 00       	.word	0x00d7	; ????
  ba:	d7 00       	.word	0x00d7	; ????
  bc:	d7 00       	.word	0x00d7	; ????
  be:	d7 00       	.word	0x00d7	; ????
  c0:	d7 00       	.word	0x00d7	; ????
  c2:	d7 00       	.word	0x00d7	; ????
  c4:	d7 00       	.word	0x00d7	; ????
  c6:	d7 00       	.word	0x00d7	; ????
  c8:	d7 00       	.word	0x00d7	; ????
  ca:	d7 00       	.word	0x00d7	; ????
  cc:	d7 00       	.word	0x00d7	; ????
  ce:	d7 00       	.word	0x00d7	; ????
  d0:	d7 00       	.word	0x00d7	; ????
  d2:	d7 00       	.word	0x00d7	; ????
  d4:	d7 00       	.word	0x00d7	; ????
  d6:	d7 00       	.word	0x00d7	; ????
  d8:	d7 00       	.word	0x00d7	; ????
  da:	d7 00       	.word	0x00d7	; ????
  dc:	d0 00       	.word	0x00d0	; ????
  de:	d2 00       	.word	0x00d2	; ????
  e0:	d4 00       	.word	0x00d4	; ????
  e2:	d6 00       	.word	0x00d6	; ????

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ea ee       	ldi	r30, 0xEA	; 234
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 37       	cpi	r26, 0x70	; 112
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
 10a:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <seven_segment_vIinitialize>:
#include "DIO.h"

//7-seg initialize
void seven_segment_vIinitialize(unsigned char port_name)
{
    DIO_vSetPortDir(port_name,0xff);
 112:	6f ef       	ldi	r22, 0xFF	; 255
 114:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_vSetPortDir>
 118:	08 95       	ret

0000011a <seven_segment_vWrite>:
} 

//7-seg write
void seven_segment_vWrite(unsigned char port_name,unsigned char value)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	60 97       	sbiw	r28, 0x10	; 16
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
    unsigned char seven_segment[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
 12e:	90 e1       	ldi	r25, 0x10	; 16
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	9a 95       	dec	r25
 13e:	e1 f7       	brne	.-8      	; 0x138 <seven_segment_vWrite+0x1e>
    DIO_vWritePortValue(port_name,seven_segment[value]);
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e6 0f       	add	r30, r22
 14a:	f1 1d       	adc	r31, r1
 14c:	60 81       	ld	r22, Z
 14e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_vWritePortValue>
 152:	60 96       	adiw	r28, 0x10	; 16
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <DIO_vSetPortDir>:
}

// Port Direction
void DIO_vSetPortDir(unsigned char port_name, unsigned char port_direction)
{
	switch (port_name)
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	e1 54       	subi	r30, 0x41	; 65
 16a:	f1 09       	sbc	r31, r1
 16c:	e4 32       	cpi	r30, 0x24	; 36
 16e:	f1 05       	cpc	r31, r1
 170:	58 f4       	brcc	.+22     	; 0x188 <DIO_vSetPortDir+0x24>
 172:	e6 5d       	subi	r30, 0xD6	; 214
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__tablejump2__>
	{
	case 'a':
	case 'A':
		DDRA = port_direction;
 17a:	6a bb       	out	0x1a, r22	; 26
		break;
 17c:	08 95       	ret

	case 'b':
	case 'B':
		DDRB = port_direction;
 17e:	67 bb       	out	0x17, r22	; 23
		break;
 180:	08 95       	ret

	case 'c':
	case 'C':
		DDRC = port_direction;
 182:	64 bb       	out	0x14, r22	; 20
		break;
 184:	08 95       	ret

	case 'd':
	case 'D':
		DDRD = port_direction;
 186:	61 bb       	out	0x11, r22	; 17
 188:	08 95       	ret

0000018a <DIO_vWritePortValue>:
}

// Write Port
void DIO_vWritePortValue(unsigned char port_name, unsigned char port_value)
{
	switch (port_name)
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	e1 54       	subi	r30, 0x41	; 65
 190:	f1 09       	sbc	r31, r1
 192:	e4 32       	cpi	r30, 0x24	; 36
 194:	f1 05       	cpc	r31, r1
 196:	58 f4       	brcc	.+22     	; 0x1ae <DIO_vWritePortValue+0x24>
 198:	e2 5b       	subi	r30, 0xB2	; 178
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__tablejump2__>
	{
	case 'a':
	case 'A':
		PORTA = port_value;
 1a0:	6b bb       	out	0x1b, r22	; 27
		break;
 1a2:	08 95       	ret

	case 'b':
	case 'B':
		PORTB = port_value;
 1a4:	68 bb       	out	0x18, r22	; 24
		break;
 1a6:	08 95       	ret

	case 'c':
	case 'C':
		PORTC = port_value;
 1a8:	65 bb       	out	0x15, r22	; 21
		break;
 1aa:	08 95       	ret

	case 'd':
	case 'D':
		PORTD = port_value;
 1ac:	62 bb       	out	0x12, r22	; 18
 1ae:	08 95       	ret

000001b0 <main>:
#include <util/delay.h>
#include "7_seg_autosar.h"

int main(void)
{
	seven_segment_vIinitialize('c');
 1b0:	83 e6       	ldi	r24, 0x63	; 99
 1b2:	0e 94 89 00 	call	0x112	; 0x112 <seven_segment_vIinitialize>
#define F_CPU 8000000Ul
#include <util/delay.h>
#include "7_seg_autosar.h"

int main(void)
{
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0;i<16;i++)
		{
			seven_segment_vWrite('c',i);
 1b8:	6c 2f       	mov	r22, r28
 1ba:	83 e6       	ldi	r24, 0x63	; 99
 1bc:	0e 94 8d 00 	call	0x11a	; 0x11a <seven_segment_vWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	84 e3       	ldi	r24, 0x34	; 52
 1c4:	9c e0       	ldi	r25, 0x0C	; 12
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x16>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x20>
 1d0:	00 00       	nop
 1d2:	cf 5f       	subi	r28, 0xFF	; 255
{
	seven_segment_vIinitialize('c');
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0;i<16;i++)
 1d4:	c0 31       	cpi	r28, 0x10	; 16
 1d6:	81 f7       	brne	.-32     	; 0x1b8 <main+0x8>
 1d8:	ee cf       	rjmp	.-36     	; 0x1b6 <main+0x6>

000001da <__tablejump2__>:
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	05 90       	lpm	r0, Z+
 1e0:	f4 91       	lpm	r31, Z
 1e2:	e0 2d       	mov	r30, r0
 1e4:	09 94       	ijmp

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
