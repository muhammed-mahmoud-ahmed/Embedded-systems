
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a39  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000513  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ac  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	ae 00       	.word	0x00ae	; ????
  56:	c7 00       	.word	0x00c7	; ????
  58:	e0 00       	.word	0x00e0	; ????
  5a:	f9 00       	.word	0x00f9	; ????
  5c:	11 01       	movw	r2, r2
  5e:	11 01       	movw	r2, r2
  60:	11 01       	movw	r2, r2
  62:	11 01       	movw	r2, r2
  64:	11 01       	movw	r2, r2
  66:	11 01       	movw	r2, r2
  68:	11 01       	movw	r2, r2
  6a:	11 01       	movw	r2, r2
  6c:	11 01       	movw	r2, r2
  6e:	11 01       	movw	r2, r2
  70:	11 01       	movw	r2, r2
  72:	11 01       	movw	r2, r2
  74:	11 01       	movw	r2, r2
  76:	11 01       	movw	r2, r2
  78:	11 01       	movw	r2, r2
  7a:	11 01       	movw	r2, r2
  7c:	11 01       	movw	r2, r2
  7e:	11 01       	movw	r2, r2
  80:	11 01       	movw	r2, r2
  82:	11 01       	movw	r2, r2
  84:	11 01       	movw	r2, r2
  86:	11 01       	movw	r2, r2
  88:	11 01       	movw	r2, r2
  8a:	11 01       	movw	r2, r2
  8c:	11 01       	movw	r2, r2
  8e:	11 01       	movw	r2, r2
  90:	11 01       	movw	r2, r2
  92:	11 01       	movw	r2, r2
  94:	ae 00       	.word	0x00ae	; ????
  96:	c7 00       	.word	0x00c7	; ????
  98:	e0 00       	.word	0x00e0	; ????
  9a:	f9 00       	.word	0x00f9	; ????
  9c:	1e 01       	movw	r2, r28
  9e:	41 01       	movw	r8, r2
  a0:	64 01       	movw	r12, r8
  a2:	87 01       	movw	r16, r14
  a4:	a9 01       	movw	r20, r18
  a6:	a9 01       	movw	r20, r18
  a8:	a9 01       	movw	r20, r18
  aa:	a9 01       	movw	r20, r18
  ac:	a9 01       	movw	r20, r18
  ae:	a9 01       	movw	r20, r18
  b0:	a9 01       	movw	r20, r18
  b2:	a9 01       	movw	r20, r18
  b4:	a9 01       	movw	r20, r18
  b6:	a9 01       	movw	r20, r18
  b8:	a9 01       	movw	r20, r18
  ba:	a9 01       	movw	r20, r18
  bc:	a9 01       	movw	r20, r18
  be:	a9 01       	movw	r20, r18
  c0:	a9 01       	movw	r20, r18
  c2:	a9 01       	movw	r20, r18
  c4:	a9 01       	movw	r20, r18
  c6:	a9 01       	movw	r20, r18
  c8:	a9 01       	movw	r20, r18
  ca:	a9 01       	movw	r20, r18
  cc:	a9 01       	movw	r20, r18
  ce:	a9 01       	movw	r20, r18
  d0:	a9 01       	movw	r20, r18
  d2:	a9 01       	movw	r20, r18
  d4:	a9 01       	movw	r20, r18
  d6:	a9 01       	movw	r20, r18
  d8:	a9 01       	movw	r20, r18
  da:	a9 01       	movw	r20, r18
  dc:	1e 01       	movw	r2, r28
  de:	41 01       	movw	r8, r2
  e0:	64 01       	movw	r12, r8
  e2:	87 01       	movw	r16, r14
  e4:	b5 01       	movw	r22, r10
  e6:	c0 01       	movw	r24, r0
  e8:	cb 01       	movw	r24, r22
  ea:	d6 01       	movw	r26, r12
  ec:	e0 01       	movw	r28, r0
  ee:	e0 01       	movw	r28, r0
  f0:	e0 01       	movw	r28, r0
  f2:	e0 01       	movw	r28, r0
  f4:	e0 01       	movw	r28, r0
  f6:	e0 01       	movw	r28, r0
  f8:	e0 01       	movw	r28, r0
  fa:	e0 01       	movw	r28, r0
  fc:	e0 01       	movw	r28, r0
  fe:	e0 01       	movw	r28, r0
 100:	e0 01       	movw	r28, r0
 102:	e0 01       	movw	r28, r0
 104:	e0 01       	movw	r28, r0
 106:	e0 01       	movw	r28, r0
 108:	e0 01       	movw	r28, r0
 10a:	e0 01       	movw	r28, r0
 10c:	e0 01       	movw	r28, r0
 10e:	e0 01       	movw	r28, r0
 110:	e0 01       	movw	r28, r0
 112:	e0 01       	movw	r28, r0
 114:	e0 01       	movw	r28, r0
 116:	e0 01       	movw	r28, r0
 118:	e0 01       	movw	r28, r0
 11a:	e0 01       	movw	r28, r0
 11c:	e0 01       	movw	r28, r0
 11e:	e0 01       	movw	r28, r0
 120:	e0 01       	movw	r28, r0
 122:	e0 01       	movw	r28, r0
 124:	b5 01       	movw	r22, r10
 126:	c0 01       	movw	r24, r0
 128:	cb 01       	movw	r24, r22
 12a:	d6 01       	movw	r26, r12

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
 13c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <DIO_vSetPinDir>:
#include "Common_Macros.h"

// Bin Direction
void DIO_vSetPinDir(unsigned char port_name, unsigned char pin_num, unsigned char pin_direction)
{
	switch (port_name)
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	e1 54       	subi	r30, 0x41	; 65
 14a:	f1 09       	sbc	r31, r1
 14c:	e4 32       	cpi	r30, 0x24	; 36
 14e:	f1 05       	cpc	r31, r1
 150:	08 f0       	brcs	.+2      	; 0x154 <DIO_vSetPinDir+0x10>
 152:	67 c0       	rjmp	.+206    	; 0x222 <DIO_vSetPinDir+0xde>
 154:	e6 5d       	subi	r30, 0xD6	; 214
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	0c 94 17 02 	jmp	0x42e	; 0x42e <__tablejump2__>
	{

	case 'A':
	case 'a':
		if (pin_direction == 1)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <DIO_vSetPinDir+0x32>
		{
			SET_BIT(DDRA, pin_num);
 160:	2a b3       	in	r18, 0x1a	; 26
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0x28>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0x24>
 170:	82 2b       	or	r24, r18
 172:	8a bb       	out	0x1a, r24	; 26
 174:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRA, pin_num);
 176:	2a b3       	in	r18, 0x1a	; 26
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vSetPinDir+0x3e>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vSetPinDir+0x3a>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	8a bb       	out	0x1a, r24	; 26
 18c:	08 95       	ret
		break;

	case 'b':
	case 'B':

		if (pin_direction == 1)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_vSetPinDir+0x64>
		{
			SET_BIT(DDRB, pin_num);
 192:	27 b3       	in	r18, 0x17	; 23
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vSetPinDir+0x5a>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vSetPinDir+0x56>
 1a2:	82 2b       	or	r24, r18
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRB, pin_num);
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vSetPinDir+0x70>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vSetPinDir+0x6c>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	87 bb       	out	0x17, r24	; 23
 1be:	08 95       	ret
		}
		break;
	case 'c':
	case 'C':

		if (pin_direction == 1)
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_vSetPinDir+0x96>
		{
			SET_BIT(DDRC, pin_num);
 1c4:	24 b3       	in	r18, 0x14	; 20
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDir+0x8c>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDir+0x88>
 1d4:	82 2b       	or	r24, r18
 1d6:	84 bb       	out	0x14, r24	; 20
 1d8:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRC, pin_num);
 1da:	24 b3       	in	r18, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vSetPinDir+0xa2>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vSetPinDir+0x9e>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret
		}
		break;
	case 'd':
	case 'D':

		if (pin_direction == 1)
 1f2:	41 30       	cpi	r20, 0x01	; 1
 1f4:	59 f4       	brne	.+22     	; 0x20c <DIO_vSetPinDir+0xc8>
		{
			SET_BIT(DDRD, pin_num);
 1f6:	21 b3       	in	r18, 0x11	; 17
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vSetPinDir+0xbe>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vSetPinDir+0xba>
 206:	82 2b       	or	r24, r18
 208:	81 bb       	out	0x11, r24	; 17
 20a:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRD, pin_num);
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vSetPinDir+0xd4>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vSetPinDir+0xd0>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	81 bb       	out	0x11, r24	; 17
 222:	08 95       	ret

00000224 <DIO_vWritePinValue>:
}

// write pin value
void DIO_vWritePinValue(unsigned char port_name, unsigned char pin_num, unsigned char pin_value)
{
	switch (port_name)
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	e1 54       	subi	r30, 0x41	; 65
 22a:	f1 09       	sbc	r31, r1
 22c:	e4 32       	cpi	r30, 0x24	; 36
 22e:	f1 05       	cpc	r31, r1
 230:	08 f0       	brcs	.+2      	; 0x234 <DIO_vWritePinValue+0x10>
 232:	8f c0       	rjmp	.+286    	; 0x352 <DIO_vWritePinValue+0x12e>
 234:	e2 5b       	subi	r30, 0xB2	; 178
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	0c 94 17 02 	jmp	0x42e	; 0x42e <__tablejump2__>
	{
	case 'A':
	case 'a':
		if ((DDRA) & (1 << pin_num)) // protection if the pin is input
 23c:	8a b3       	in	r24, 0x1a	; 26
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	06 2e       	mov	r0, r22
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_vWritePinValue+0x24>
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_vWritePinValue+0x20>
 24c:	80 ff       	sbrs	r24, 0
 24e:	81 c0       	rjmp	.+258    	; 0x352 <DIO_vWritePinValue+0x12e>
		{
			if (pin_value == 1)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	59 f4       	brne	.+22     	; 0x26a <DIO_vWritePinValue+0x46>
			{
				SET_BIT(PORTA, pin_num);
 254:	2b b3       	in	r18, 0x1b	; 27
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_vWritePinValue+0x3c>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_vWritePinValue+0x38>
 264:	82 2b       	or	r24, r18
 266:	8b bb       	out	0x1b, r24	; 27
 268:	08 95       	ret
			}
			else
			{
				RESET_BIT(PORTA, pin_num);
 26a:	2b b3       	in	r18, 0x1b	; 27
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vWritePinValue+0x52>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vWritePinValue+0x4e>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	08 95       	ret
		else
			break;

	case 'b':
	case 'B':
		if ((DDRB) & (1 << pin_num)) // protection if the pin is input
 282:	87 b3       	in	r24, 0x17	; 23
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	06 2e       	mov	r0, r22
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePinValue+0x6a>
 28a:	95 95       	asr	r25
 28c:	87 95       	ror	r24
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePinValue+0x66>
 292:	80 ff       	sbrs	r24, 0
 294:	5e c0       	rjmp	.+188    	; 0x352 <DIO_vWritePinValue+0x12e>
		{
			if (pin_value == 1)
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	59 f4       	brne	.+22     	; 0x2b0 <DIO_vWritePinValue+0x8c>
			{
				SET_BIT(PORTB, pin_num);
 29a:	28 b3       	in	r18, 0x18	; 24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_vWritePinValue+0x82>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_vWritePinValue+0x7e>
 2aa:	82 2b       	or	r24, r18
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	08 95       	ret
			}
			else
			{
				RESET_BIT(PORTB, pin_num);
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_vWritePinValue+0x98>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_vWritePinValue+0x94>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	88 bb       	out	0x18, r24	; 24
 2c6:	08 95       	ret
		}
		else
			break;
	case 'c':
	case 'C':
		if ((DDRC) & (1 << pin_num)) // protection if the pin is input
 2c8:	84 b3       	in	r24, 0x14	; 20
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	06 2e       	mov	r0, r22
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vWritePinValue+0xb0>
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vWritePinValue+0xac>
 2d8:	80 ff       	sbrs	r24, 0
 2da:	3b c0       	rjmp	.+118    	; 0x352 <DIO_vWritePinValue+0x12e>

		{
			if (pin_value == 1)
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	59 f4       	brne	.+22     	; 0x2f6 <DIO_vWritePinValue+0xd2>
			{
				SET_BIT(PORTC, pin_num);
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vWritePinValue+0xc8>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vWritePinValue+0xc4>
 2f0:	82 2b       	or	r24, r18
 2f2:	85 bb       	out	0x15, r24	; 21
 2f4:	08 95       	ret
			}
			else
			{
				RESET_BIT(PORTC, pin_num);
 2f6:	25 b3       	in	r18, 0x15	; 21
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_vWritePinValue+0xde>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_vWritePinValue+0xda>
 306:	80 95       	com	r24
 308:	82 23       	and	r24, r18
 30a:	85 bb       	out	0x15, r24	; 21
 30c:	08 95       	ret
		}
		else
			break;
	case 'd':
	case 'D':
		if ((DDRD) & (1 << pin_num)) // protection if the pin is input
 30e:	81 b3       	in	r24, 0x11	; 17
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_vWritePinValue+0xf6>
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_vWritePinValue+0xf2>
 31e:	80 ff       	sbrs	r24, 0
 320:	18 c0       	rjmp	.+48     	; 0x352 <DIO_vWritePinValue+0x12e>
		{
			if (pin_value == 1)
 322:	41 30       	cpi	r20, 0x01	; 1
 324:	59 f4       	brne	.+22     	; 0x33c <DIO_vWritePinValue+0x118>
			{
				SET_BIT(PORTD, pin_num);
 326:	22 b3       	in	r18, 0x12	; 18
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_vWritePinValue+0x10e>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_vWritePinValue+0x10a>
 336:	82 2b       	or	r24, r18
 338:	82 bb       	out	0x12, r24	; 18
 33a:	08 95       	ret
			}
			else
			{
				RESET_BIT(PORTD, pin_num);
 33c:	22 b3       	in	r18, 0x12	; 18
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_vWritePinValue+0x124>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_vWritePinValue+0x120>
 34c:	80 95       	com	r24
 34e:	82 23       	and	r24, r18
 350:	82 bb       	out	0x12, r24	; 18
 352:	08 95       	ret

00000354 <DIO_vTogglePin>:
}

// Toggle pin
void DIO_vTogglePin(unsigned char port_name, unsigned char pin_num)
{
	switch (port_name)
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	fc 01       	movw	r30, r24
 358:	e1 54       	subi	r30, 0x41	; 65
 35a:	f1 09       	sbc	r31, r1
 35c:	e4 32       	cpi	r30, 0x24	; 36
 35e:	f1 05       	cpc	r31, r1
 360:	78 f5       	brcc	.+94     	; 0x3c0 <DIO_vTogglePin+0x6c>
 362:	ee 58       	subi	r30, 0x8E	; 142
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	0c 94 17 02 	jmp	0x42e	; 0x42e <__tablejump2__>
	{
	case 'a':
	case 'A':
		TOGGLE_BIT(PORTA, pin_num);
 36a:	2b b3       	in	r18, 0x1b	; 27
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_vTogglePin+0x22>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_vTogglePin+0x1e>
 37a:	82 27       	eor	r24, r18
 37c:	8b bb       	out	0x1b, r24	; 27
		break;
 37e:	08 95       	ret
	case 'b':
	case 'B':
		TOGGLE_BIT(PORTB, pin_num);
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_vTogglePin+0x38>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_vTogglePin+0x34>
 390:	82 27       	eor	r24, r18
 392:	88 bb       	out	0x18, r24	; 24
		break;
 394:	08 95       	ret

	case 'c':
	case 'C':
		TOGGLE_BIT(PORTC, pin_num);
 396:	25 b3       	in	r18, 0x15	; 21
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_vTogglePin+0x4e>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_vTogglePin+0x4a>
 3a6:	82 27       	eor	r24, r18
 3a8:	85 bb       	out	0x15, r24	; 21
		break;
 3aa:	08 95       	ret

	case 'd':
	case 'D':
		TOGGLE_BIT(PORTD, pin_num);
 3ac:	22 b3       	in	r18, 0x12	; 18
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_vTogglePin+0x64>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_vTogglePin+0x60>
 3bc:	82 27       	eor	r24, r18
 3be:	82 bb       	out	0x12, r24	; 18
 3c0:	08 95       	ret

000003c2 <LED_vInitialize>:

#include "DIO.h"
//led initialize :
void LED_vInitialize(unsigned char port_name,unsigned char pin_num)
{
    DIO_vSetPinDir(port_name,pin_num,1);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vSetPinDir>
 3c8:	08 95       	ret

000003ca <LED_vOn>:


//led on :
void LED_vOn(unsigned char port_name,unsigned char pin_num)
{
    DIO_vWritePinValue(port_name,pin_num,1);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vWritePinValue>
 3d0:	08 95       	ret

000003d2 <LED_vOff>:
}

//led off :
void LED_vOff(unsigned char port_name,unsigned char pin_num)
{
    DIO_vWritePinValue(port_name,pin_num,0);
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vWritePinValue>
 3d8:	08 95       	ret

000003da <LED_vToggle>:
}

//led toggle :
void LED_vToggle(unsigned char port_name,unsigned char pin_num)
{
    DIO_vTogglePin(port_name,pin_num);
 3da:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_vTogglePin>
 3de:	08 95       	ret

000003e0 <main>:
#include <util/delay.h>
#include "LED.h"

int main(void)
{
	LED_vInitialize('a',0);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	81 e6       	ldi	r24, 0x61	; 97
 3e4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_vInitialize>
	LED_vInitialize('b',1);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	82 e6       	ldi	r24, 0x62	; 98
 3ec:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_vInitialize>
    /* Replace with your application code */
    while (1) 
    {
		LED_vOn('a',0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	81 e6       	ldi	r24, 0x61	; 97
 3f4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LED_vOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	2f e7       	ldi	r18, 0x7F	; 127
 3fa:	88 e3       	ldi	r24, 0x38	; 56
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x1e>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
		_delay_ms(50);
		LED_vOff('a',0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	81 e6       	ldi	r24, 0x61	; 97
 40e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LED_vOff>
 412:	2f e7       	ldi	r18, 0x7F	; 127
 414:	88 e3       	ldi	r24, 0x38	; 56
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
		_delay_ms(50);
		LED_vToggle('b',1);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	82 e6       	ldi	r24, 0x62	; 98
 428:	0e 94 ed 01 	call	0x3da	; 0x3da <LED_vToggle>
 42c:	e1 cf       	rjmp	.-62     	; 0x3f0 <main+0x10>

0000042e <__tablejump2__>:
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	05 90       	lpm	r0, Z+
 434:	f4 91       	lpm	r31, Z
 436:	e0 2d       	mov	r30, r0
 438:	09 94       	ijmp

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
