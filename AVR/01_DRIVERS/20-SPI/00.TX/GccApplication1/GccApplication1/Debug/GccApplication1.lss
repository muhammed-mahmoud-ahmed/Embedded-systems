
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000380  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d77  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000876  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b4  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000022f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d5  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000930  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000033f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	95 00       	.word	0x0095	; ????
  56:	ae 00       	.word	0x00ae	; ????
  58:	c7 00       	.word	0x00c7	; ????
  5a:	e0 00       	.word	0x00e0	; ????
  5c:	f8 00       	.word	0x00f8	; ????
  5e:	f8 00       	.word	0x00f8	; ????
  60:	f8 00       	.word	0x00f8	; ????
  62:	f8 00       	.word	0x00f8	; ????
  64:	f8 00       	.word	0x00f8	; ????
  66:	f8 00       	.word	0x00f8	; ????
  68:	f8 00       	.word	0x00f8	; ????
  6a:	f8 00       	.word	0x00f8	; ????
  6c:	f8 00       	.word	0x00f8	; ????
  6e:	f8 00       	.word	0x00f8	; ????
  70:	f8 00       	.word	0x00f8	; ????
  72:	f8 00       	.word	0x00f8	; ????
  74:	f8 00       	.word	0x00f8	; ????
  76:	f8 00       	.word	0x00f8	; ????
  78:	f8 00       	.word	0x00f8	; ????
  7a:	f8 00       	.word	0x00f8	; ????
  7c:	f8 00       	.word	0x00f8	; ????
  7e:	f8 00       	.word	0x00f8	; ????
  80:	f8 00       	.word	0x00f8	; ????
  82:	f8 00       	.word	0x00f8	; ????
  84:	f8 00       	.word	0x00f8	; ????
  86:	f8 00       	.word	0x00f8	; ????
  88:	f8 00       	.word	0x00f8	; ????
  8a:	f8 00       	.word	0x00f8	; ????
  8c:	f8 00       	.word	0x00f8	; ????
  8e:	f8 00       	.word	0x00f8	; ????
  90:	f8 00       	.word	0x00f8	; ????
  92:	f8 00       	.word	0x00f8	; ????
  94:	95 00       	.word	0x0095	; ????
  96:	ae 00       	.word	0x00ae	; ????
  98:	c7 00       	.word	0x00c7	; ????
  9a:	e0 00       	.word	0x00e0	; ????
  9c:	05 01       	movw	r0, r10
  9e:	1e 01       	movw	r2, r28
  a0:	37 01       	movw	r6, r14
  a2:	50 01       	movw	r10, r0
  a4:	68 01       	movw	r12, r16
  a6:	68 01       	movw	r12, r16
  a8:	68 01       	movw	r12, r16
  aa:	68 01       	movw	r12, r16
  ac:	68 01       	movw	r12, r16
  ae:	68 01       	movw	r12, r16
  b0:	68 01       	movw	r12, r16
  b2:	68 01       	movw	r12, r16
  b4:	68 01       	movw	r12, r16
  b6:	68 01       	movw	r12, r16
  b8:	68 01       	movw	r12, r16
  ba:	68 01       	movw	r12, r16
  bc:	68 01       	movw	r12, r16
  be:	68 01       	movw	r12, r16
  c0:	68 01       	movw	r12, r16
  c2:	68 01       	movw	r12, r16
  c4:	68 01       	movw	r12, r16
  c6:	68 01       	movw	r12, r16
  c8:	68 01       	movw	r12, r16
  ca:	68 01       	movw	r12, r16
  cc:	68 01       	movw	r12, r16
  ce:	68 01       	movw	r12, r16
  d0:	68 01       	movw	r12, r16
  d2:	68 01       	movw	r12, r16
  d4:	68 01       	movw	r12, r16
  d6:	68 01       	movw	r12, r16
  d8:	68 01       	movw	r12, r16
  da:	68 01       	movw	r12, r16
  dc:	05 01       	movw	r0, r10
  de:	1e 01       	movw	r2, r28
  e0:	37 01       	movw	r6, r14
  e2:	50 01       	movw	r10, r0

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e0 e8       	ldi	r30, 0x80	; 128
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 36       	cpi	r26, 0x68	; 104
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
 10a:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <DIO_vSetPinDir>:
#include "Common_Macros.h"

// Bin Direction
void DIO_vSetPinDir(unsigned char port_name, unsigned char pin_num, unsigned char pin_direction)
{
	switch (port_name)
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e1 54       	subi	r30, 0x41	; 65
 118:	f1 09       	sbc	r31, r1
 11a:	e4 32       	cpi	r30, 0x24	; 36
 11c:	f1 05       	cpc	r31, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <DIO_vSetPinDir+0x10>
 120:	67 c0       	rjmp	.+206    	; 0x1f0 <DIO_vSetPinDir+0xde>
 122:	e6 5d       	subi	r30, 0xD6	; 214
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 b8 01 	jmp	0x370	; 0x370 <__tablejump2__>
	{

	case 'A':
	case 'a':
		if (pin_direction == 1)
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <DIO_vSetPinDir+0x32>
		{
			SET_BIT(DDRA, pin_num);
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vSetPinDir+0x28>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vSetPinDir+0x24>
 13e:	82 2b       	or	r24, r18
 140:	8a bb       	out	0x1a, r24	; 26
 142:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRA, pin_num);
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vSetPinDir+0x3e>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vSetPinDir+0x3a>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	08 95       	ret
		break;

	case 'b':
	case 'B':

		if (pin_direction == 1)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <DIO_vSetPinDir+0x64>
		{
			SET_BIT(DDRB, pin_num);
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0x5a>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0x56>
 170:	82 2b       	or	r24, r18
 172:	87 bb       	out	0x17, r24	; 23
 174:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRB, pin_num);
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vSetPinDir+0x70>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vSetPinDir+0x6c>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	08 95       	ret
		}
		break;
	case 'c':
	case 'C':

		if (pin_direction == 1)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_vSetPinDir+0x96>
		{
			SET_BIT(DDRC, pin_num);
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vSetPinDir+0x8c>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vSetPinDir+0x88>
 1a2:	82 2b       	or	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRC, pin_num);
 1a8:	24 b3       	in	r18, 0x14	; 20
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vSetPinDir+0xa2>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vSetPinDir+0x9e>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
		}
		break;
	case 'd':
	case 'D':

		if (pin_direction == 1)
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_vSetPinDir+0xc8>
		{
			SET_BIT(DDRD, pin_num);
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDir+0xbe>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDir+0xba>
 1d4:	82 2b       	or	r24, r18
 1d6:	81 bb       	out	0x11, r24	; 17
 1d8:	08 95       	ret
		}
		else
		{
			RESET_BIT(DDRD, pin_num);
 1da:	21 b3       	in	r18, 0x11	; 17
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vSetPinDir+0xd4>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vSetPinDir+0xd0>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	81 bb       	out	0x11, r24	; 17
 1f0:	08 95       	ret

000001f2 <DIO_vWritePinValue>:
}

// write pin value
void DIO_vWritePinValue(unsigned char port_name, unsigned char pin_num, unsigned char pin_value)
{
	switch (port_name)
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	e1 54       	subi	r30, 0x41	; 65
 1f8:	f1 09       	sbc	r31, r1
 1fa:	e4 32       	cpi	r30, 0x24	; 36
 1fc:	f1 05       	cpc	r31, r1
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_vWritePinValue+0x10>
 200:	67 c0       	rjmp	.+206    	; 0x2d0 <DIO_vWritePinValue+0xde>
 202:	e2 5b       	subi	r30, 0xB2	; 178
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	0c 94 b8 01 	jmp	0x370	; 0x370 <__tablejump2__>
	{
	case 'A':
	case 'a':

		if (pin_value == 1)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_vWritePinValue+0x32>
		{
			SET_BIT(PORTA, pin_num);
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePinValue+0x28>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePinValue+0x24>
 21e:	82 2b       	or	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
		}
		else
		{
			RESET_BIT(PORTA, pin_num);
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_vWritePinValue+0x3e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_vWritePinValue+0x3a>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret
		break;

	case 'b':
	case 'B':

		if (pin_value == 1)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_vWritePinValue+0x64>
		{
			SET_BIT(PORTB, pin_num);
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vWritePinValue+0x5a>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vWritePinValue+0x56>
 250:	82 2b       	or	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
		}
		else
		{
			RESET_BIT(PORTB, pin_num);
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_vWritePinValue+0x70>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_vWritePinValue+0x6c>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
		break;

	case 'c':
	case 'C':

		if (pin_value == 1)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_vWritePinValue+0x96>
		{
			SET_BIT(PORTC, pin_num);
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vWritePinValue+0x8c>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vWritePinValue+0x88>
 282:	82 2b       	or	r24, r18
 284:	85 bb       	out	0x15, r24	; 21
 286:	08 95       	ret
		}
		else
		{
			RESET_BIT(PORTC, pin_num);
 288:	25 b3       	in	r18, 0x15	; 21
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vWritePinValue+0xa2>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vWritePinValue+0x9e>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	85 bb       	out	0x15, r24	; 21
 29e:	08 95       	ret
		break;

	case 'd':
	case 'D':

		if (pin_value == 1)
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_vWritePinValue+0xc8>
		{
			SET_BIT(PORTD, pin_num);
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWritePinValue+0xbe>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWritePinValue+0xba>
 2b4:	82 2b       	or	r24, r18
 2b6:	82 bb       	out	0x12, r24	; 18
 2b8:	08 95       	ret
		}
		else
		{
			RESET_BIT(PORTD, pin_num);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vWritePinValue+0xd4>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vWritePinValue+0xd0>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
	SPI_vINT_MASTER();
 2d2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SPI_vINT_MASTER>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	84 e3       	ldi	r24, 0x34	; 52
 2da:	9c e0       	ldi	r25, 0x0C	; 12
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0xa>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x14>
 2e6:	00 00       	nop
	_delay_ms(500);
	SPI_vMASTER_SEND_STRING("shadoo");
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 a0 01 	call	0x340	; 0x340 <SPI_vMASTER_SEND_STRING>
}
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <SPI_vINT_MASTER>:
	while(READ_BIT(SPSR,SPIF)==0);
	
	/*read received data*/
	return SPDR;
	
}
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	82 e6       	ldi	r24, 0x62	; 98
 2fc:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	65 e0       	ldi	r22, 0x05	; 5
 304:	82 e6       	ldi	r24, 0x62	; 98
 306:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	67 e0       	ldi	r22, 0x07	; 7
 30e:	82 e6       	ldi	r24, 0x62	; 98
 310:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 314:	6c 9a       	sbi	0x0d, 4	; 13
 316:	68 9a       	sbi	0x0d, 0	; 13
 318:	6e 9a       	sbi	0x0d, 6	; 13
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	64 e0       	ldi	r22, 0x04	; 4
 31e:	82 e6       	ldi	r24, 0x62	; 98
 320:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 324:	08 95       	ret

00000326 <SPI_u8MASTER_TRANSMITE_RECEIVE>:
 326:	cf 93       	push	r28
 328:	c8 2f       	mov	r28, r24
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	82 e6       	ldi	r24, 0x62	; 98
 330:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 334:	cf b9       	out	0x0f, r28	; 15
 336:	77 9b       	sbis	0x0e, 7	; 14
 338:	fe cf       	rjmp	.-4      	; 0x336 <SPI_u8MASTER_TRANSMITE_RECEIVE+0x10>
 33a:	8f b1       	in	r24, 0x0f	; 15
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <SPI_vMASTER_SEND_STRING>:


void SPI_vMASTER_SEND_STRING(unsigned char *ptr)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
	while( (*ptr) != 0)
 346:	88 81       	ld	r24, Y
 348:	88 23       	and	r24, r24
 34a:	79 f0       	breq	.+30     	; 0x36a <SPI_vMASTER_SEND_STRING+0x2a>
 34c:	21 96       	adiw	r28, 0x01	; 1
	{
		SPI_u8MASTER_TRANSMITE_RECEIVE(*ptr);
 34e:	0e 94 93 01 	call	0x326	; 0x326 <SPI_u8MASTER_TRANSMITE_RECEIVE>
 352:	2f e7       	ldi	r18, 0x7F	; 127
 354:	88 e3       	ldi	r24, 0x38	; 56
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <SPI_vMASTER_SEND_STRING+0x18>
 360:	00 c0       	rjmp	.+0      	; 0x362 <SPI_vMASTER_SEND_STRING+0x22>
 362:	00 00       	nop
}


void SPI_vMASTER_SEND_STRING(unsigned char *ptr)
{
	while( (*ptr) != 0)
 364:	89 91       	ld	r24, Y+
 366:	81 11       	cpse	r24, r1
 368:	f2 cf       	rjmp	.-28     	; 0x34e <SPI_vMASTER_SEND_STRING+0xe>
	{
		SPI_u8MASTER_TRANSMITE_RECEIVE(*ptr);
		*ptr++;
		_delay_ms(50);		
	}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <__tablejump2__>:
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	05 90       	lpm	r0, Z+
 376:	f4 91       	lpm	r31, Z
 378:	e0 2d       	mov	r30, r0
 37a:	09 94       	ijmp

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
