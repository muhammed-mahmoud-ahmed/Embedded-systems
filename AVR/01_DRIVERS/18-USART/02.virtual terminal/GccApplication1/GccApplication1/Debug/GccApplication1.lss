
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000592  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000592  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001493  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e5  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a37  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000067b  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dcd  00000000  00000000  00003977  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	95 00       	.word	0x0095	; ????
  56:	ae 00       	.word	0x00ae	; ????
  58:	c7 00       	.word	0x00c7	; ????
  5a:	e0 00       	.word	0x00e0	; ????
  5c:	f8 00       	.word	0x00f8	; ????
  5e:	f8 00       	.word	0x00f8	; ????
  60:	f8 00       	.word	0x00f8	; ????
  62:	f8 00       	.word	0x00f8	; ????
  64:	f8 00       	.word	0x00f8	; ????
  66:	f8 00       	.word	0x00f8	; ????
  68:	f8 00       	.word	0x00f8	; ????
  6a:	f8 00       	.word	0x00f8	; ????
  6c:	f8 00       	.word	0x00f8	; ????
  6e:	f8 00       	.word	0x00f8	; ????
  70:	f8 00       	.word	0x00f8	; ????
  72:	f8 00       	.word	0x00f8	; ????
  74:	f8 00       	.word	0x00f8	; ????
  76:	f8 00       	.word	0x00f8	; ????
  78:	f8 00       	.word	0x00f8	; ????
  7a:	f8 00       	.word	0x00f8	; ????
  7c:	f8 00       	.word	0x00f8	; ????
  7e:	f8 00       	.word	0x00f8	; ????
  80:	f8 00       	.word	0x00f8	; ????
  82:	f8 00       	.word	0x00f8	; ????
  84:	f8 00       	.word	0x00f8	; ????
  86:	f8 00       	.word	0x00f8	; ????
  88:	f8 00       	.word	0x00f8	; ????
  8a:	f8 00       	.word	0x00f8	; ????
  8c:	f8 00       	.word	0x00f8	; ????
  8e:	f8 00       	.word	0x00f8	; ????
  90:	f8 00       	.word	0x00f8	; ????
  92:	f8 00       	.word	0x00f8	; ????
  94:	95 00       	.word	0x0095	; ????
  96:	ae 00       	.word	0x00ae	; ????
  98:	c7 00       	.word	0x00c7	; ????
  9a:	e0 00       	.word	0x00e0	; ????
  9c:	05 01       	movw	r0, r10
  9e:	1e 01       	movw	r2, r28
  a0:	37 01       	movw	r6, r14
  a2:	50 01       	movw	r10, r0
  a4:	68 01       	movw	r12, r16
  a6:	68 01       	movw	r12, r16
  a8:	68 01       	movw	r12, r16
  aa:	68 01       	movw	r12, r16
  ac:	68 01       	movw	r12, r16
  ae:	68 01       	movw	r12, r16
  b0:	68 01       	movw	r12, r16
  b2:	68 01       	movw	r12, r16
  b4:	68 01       	movw	r12, r16
  b6:	68 01       	movw	r12, r16
  b8:	68 01       	movw	r12, r16
  ba:	68 01       	movw	r12, r16
  bc:	68 01       	movw	r12, r16
  be:	68 01       	movw	r12, r16
  c0:	68 01       	movw	r12, r16
  c2:	68 01       	movw	r12, r16
  c4:	68 01       	movw	r12, r16
  c6:	68 01       	movw	r12, r16
  c8:	68 01       	movw	r12, r16
  ca:	68 01       	movw	r12, r16
  cc:	68 01       	movw	r12, r16
  ce:	68 01       	movw	r12, r16
  d0:	68 01       	movw	r12, r16
  d2:	68 01       	movw	r12, r16
  d4:	68 01       	movw	r12, r16
  d6:	68 01       	movw	r12, r16
  d8:	68 01       	movw	r12, r16
  da:	68 01       	movw	r12, r16
  dc:	05 01       	movw	r0, r10
  de:	1e 01       	movw	r2, r28
  e0:	37 01       	movw	r6, r14
  e2:	50 01       	movw	r10, r0

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e2 e9       	ldi	r30, 0x92	; 146
  f8:	f5 e0       	ldi	r31, 0x05	; 5
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 36       	cpi	r26, 0x68	; 104
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
 10a:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <DIO_vSetPinDir>:
{
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e1 54       	subi	r30, 0x41	; 65
 118:	f1 09       	sbc	r31, r1
 11a:	e4 32       	cpi	r30, 0x24	; 36
 11c:	f1 05       	cpc	r31, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <DIO_vSetPinDir+0x10>
 120:	67 c0       	rjmp	.+206    	; 0x1f0 <DIO_vSetPinDir+0xde>
 122:	e6 5d       	subi	r30, 0xD6	; 214
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 c1 02 	jmp	0x582	; 0x582 <__tablejump2__>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <DIO_vSetPinDir+0x32>
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vSetPinDir+0x28>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vSetPinDir+0x24>
 13e:	82 2b       	or	r24, r18
 140:	8a bb       	out	0x1a, r24	; 26
 142:	08 95       	ret
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vSetPinDir+0x3e>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vSetPinDir+0x3a>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	08 95       	ret
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <DIO_vSetPinDir+0x64>
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0x5a>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0x56>
 170:	82 2b       	or	r24, r18
 172:	87 bb       	out	0x17, r24	; 23
 174:	08 95       	ret
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vSetPinDir+0x70>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vSetPinDir+0x6c>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	08 95       	ret
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_vSetPinDir+0x96>
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vSetPinDir+0x8c>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vSetPinDir+0x88>
 1a2:	82 2b       	or	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret
 1a8:	24 b3       	in	r18, 0x14	; 20
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vSetPinDir+0xa2>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vSetPinDir+0x9e>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_vSetPinDir+0xc8>
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDir+0xbe>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDir+0xba>
 1d4:	82 2b       	or	r24, r18
 1d6:	81 bb       	out	0x11, r24	; 17
 1d8:	08 95       	ret
 1da:	21 b3       	in	r18, 0x11	; 17
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vSetPinDir+0xd4>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vSetPinDir+0xd0>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	81 bb       	out	0x11, r24	; 17
 1f0:	08 95       	ret

000001f2 <DIO_vWritePinValue>:
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	e1 54       	subi	r30, 0x41	; 65
 1f8:	f1 09       	sbc	r31, r1
 1fa:	e4 32       	cpi	r30, 0x24	; 36
 1fc:	f1 05       	cpc	r31, r1
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_vWritePinValue+0x10>
 200:	67 c0       	rjmp	.+206    	; 0x2d0 <DIO_vWritePinValue+0xde>
 202:	e2 5b       	subi	r30, 0xB2	; 178
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	0c 94 c1 02 	jmp	0x582	; 0x582 <__tablejump2__>
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_vWritePinValue+0x32>
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePinValue+0x28>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePinValue+0x24>
 21e:	82 2b       	or	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_vWritePinValue+0x3e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_vWritePinValue+0x3a>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_vWritePinValue+0x64>
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vWritePinValue+0x5a>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vWritePinValue+0x56>
 250:	82 2b       	or	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_vWritePinValue+0x70>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_vWritePinValue+0x6c>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_vWritePinValue+0x96>
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vWritePinValue+0x8c>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vWritePinValue+0x88>
 282:	82 2b       	or	r24, r18
 284:	85 bb       	out	0x15, r24	; 21
 286:	08 95       	ret
 288:	25 b3       	in	r18, 0x15	; 21
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vWritePinValue+0xa2>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vWritePinValue+0x9e>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	85 bb       	out	0x15, r24	; 21
 29e:	08 95       	ret
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_vWritePinValue+0xc8>
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWritePinValue+0xbe>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWritePinValue+0xba>
 2b4:	82 2b       	or	r24, r18
 2b6:	82 bb       	out	0x12, r24	; 18
 2b8:	08 95       	ret
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vWritePinValue+0xd4>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vWritePinValue+0xd0>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <DIO_vSetPortLowNibble>:
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	f8 2e       	mov	r15, r24
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	06 2f       	mov	r16, r22
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	a8 01       	movw	r20, r16
 2e8:	0c 2e       	mov	r0, r28
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_vSetPortLowNibble+0x1e>
 2ec:	55 95       	asr	r21
 2ee:	47 95       	ror	r20
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_vSetPortLowNibble+0x1a>
 2f4:	41 70       	andi	r20, 0x01	; 1
 2f6:	6c 2f       	mov	r22, r28
 2f8:	8f 2d       	mov	r24, r15
 2fa:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	c4 30       	cpi	r28, 0x04	; 4
 302:	d1 05       	cpc	r29, r1
 304:	81 f7       	brne	.-32     	; 0x2e6 <DIO_vSetPortLowNibble+0x14>
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	08 95       	ret

00000312 <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	f8 2e       	mov	r15, r24
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 322:	06 2f       	mov	r16, r22
 324:	10 e0       	ldi	r17, 0x00	; 0
 326:	a8 01       	movw	r20, r16
 328:	0c 2e       	mov	r0, r28
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vWritePortLowNibble+0x1e>
 32c:	55 95       	asr	r21
 32e:	47 95       	ror	r20
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vWritePortLowNibble+0x1a>
 334:	41 70       	andi	r20, 0x01	; 1
 336:	6c 2f       	mov	r22, r28
 338:	8f 2d       	mov	r24, r15
 33a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 33e:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 340:	c4 30       	cpi	r28, 0x04	; 4
 342:	d1 05       	cpc	r29, r1
 344:	81 f7       	brne	.-32     	; 0x326 <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	08 95       	ret

00000352 <LCD_Enable_pulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	64 e0       	ldi	r22, 0x04	; 4
 356:	83 e6       	ldi	r24, 0x63	; 99
 358:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 35c:	8f e9       	ldi	r24, 0x9F	; 159
 35e:	9f e0       	ldi	r25, 0x0F	; 15
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <LCD_Enable_pulse+0xe>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_Enable_pulse+0x14>
 366:	00 00       	nop
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	83 e6       	ldi	r24, 0x63	; 99
 36e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 372:	8f e9       	ldi	r24, 0x9F	; 159
 374:	9f e0       	ldi	r25, 0x0F	; 15
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_Enable_pulse+0x24>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_Enable_pulse+0x2a>
 37c:	00 00       	nop
 37e:	08 95       	ret

00000380 <LCD_vSendCommand>:
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	65 e0       	ldi	r22, 0x05	; 5
 388:	83 e6       	ldi	r24, 0x63	; 99
 38a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 38e:	6c 2f       	mov	r22, r28
 390:	62 95       	swap	r22
 392:	6f 70       	andi	r22, 0x0F	; 15
 394:	83 e6       	ldi	r24, 0x63	; 99
 396:	0e 94 89 01 	call	0x312	; 0x312 <DIO_vWritePortLowNibble>
 39a:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_Enable_pulse>
 39e:	6c 2f       	mov	r22, r28
 3a0:	83 e6       	ldi	r24, 0x63	; 99
 3a2:	0e 94 89 01 	call	0x312	; 0x312 <DIO_vWritePortLowNibble>
 3a6:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_Enable_pulse>
 3aa:	8f ec       	ldi	r24, 0xCF	; 207
 3ac:	97 e0       	ldi	r25, 0x07	; 7
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_vSendCommand+0x2e>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_vSendCommand+0x34>
 3b4:	00 00       	nop
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <LCD_vNewLine>:
}

// new line
void LCD_vNewLine()
{
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 3c0:	08 95       	ret

000003c2 <LCD_vSendChar>:
	LCD_Enable_pulse();								   // send enable pulse
	_delay_ms(1);									   // delay to make sure that command is executed
}

void LCD_vSendChar(unsigned char data)
{
 3c2:	cf 93       	push	r28
 3c4:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 1); // RS data select
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	65 e0       	ldi	r22, 0x05	; 5
 3ca:	83 e6       	ldi	r24, 0x63	; 99
 3cc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (data >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 3d0:	6c 2f       	mov	r22, r28
 3d2:	62 95       	swap	r22
 3d4:	6f 70       	andi	r22, 0x0F	; 15
 3d6:	83 e6       	ldi	r24, 0x63	; 99
 3d8:	0e 94 89 01 	call	0x312	; 0x312 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 3dc:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, data);		// write on port low nibble and write  4 least bits of data on data reg on lcd
 3e0:	6c 2f       	mov	r22, r28
 3e2:	83 e6       	ldi	r24, 0x63	; 99
 3e4:	0e 94 89 01 	call	0x312	; 0x312 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 3e8:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_Enable_pulse>
}
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <LCD_vSendString>:
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
	while ((*string_ptr) != 0) // checks null
 3f6:	88 81       	ld	r24, Y
 3f8:	88 23       	and	r24, r24
 3fa:	79 f0       	breq	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fc:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
 3fe:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_vSendChar>
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	80 e7       	ldi	r24, 0x70	; 112
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
	while ((*string_ptr) != 0) // checks null
 414:	89 91       	ld	r24, Y+
 416:	81 11       	cpse	r24, r1
 418:	f2 cf       	rjmp	.-28     	; 0x3fe <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 420:	6f ef       	ldi	r22, 0xFF	; 255
 422:	83 e6       	ldi	r24, 0x63	; 99
 424:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	64 e0       	ldi	r22, 0x04	; 4
 42c:	83 e6       	ldi	r24, 0x63	; 99
 42e:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	83 e6       	ldi	r24, 0x63	; 99
 438:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 43c:	2f e7       	ldi	r18, 0x7F	; 127
 43e:	88 e3       	ldi	r24, 0x38	; 56
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <LCD_vInitialize+0x22>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_vInitialize+0x2c>
 44c:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 454:	8f e1       	ldi	r24, 0x1F	; 31
 456:	9e e4       	ldi	r25, 0x4E	; 78
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_vInitialize+0x38>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <LCD_vInitialize+0x3e>
 45e:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 460:	88 e2       	ldi	r24, 0x28	; 40
 462:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 466:	8f ec       	ldi	r24, 0xCF	; 207
 468:	97 e0       	ldi	r25, 0x07	; 7
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_vInitialize+0x4a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_vInitialize+0x50>
 470:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 478:	8f ec       	ldi	r24, 0xCF	; 207
 47a:	97 e0       	ldi	r25, 0x07	; 7
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCD_vInitialize+0x5c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_vInitialize+0x62>
 482:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 484:	8e e0       	ldi	r24, 0x0E	; 14
 486:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 48a:	8f ec       	ldi	r24, 0xCF	; 207
 48c:	97 e0       	ldi	r25, 0x07	; 7
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_vInitialize+0x6e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_vInitialize+0x74>
 494:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 49c:	8f ec       	ldi	r24, 0xCF	; 207
 49e:	97 e0       	ldi	r25, 0x07	; 7
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_vInitialize+0x80>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_vInitialize+0x86>
 4a6:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_vSendCommand>
 4ae:	8f ec       	ldi	r24, 0xCF	; 207
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_vInitialize+0x92>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_vInitialize+0x98>
 4b8:	00 00       	nop
 4ba:	08 95       	ret

000004bc <main>:
#include <util/delay.h>
#include "usart.h"

int main(void)
{
	UART_vINT(9600);
 4bc:	60 e8       	ldi	r22, 0x80	; 128
 4be:	75 e2       	ldi	r23, 0x25	; 37
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <UART_vINT>
	LCD_vInitialize();
 4c8:	0e 94 10 02 	call	0x420	; 0x420 <LCD_vInitialize>
	LCD_vSendString("HI YA :");
 4cc:	80 e6       	ldi	r24, 0x60	; 96
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_vSendString>
	LCD_vNewLine();
 4d4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_vNewLine>
	unsigned char x;
    /* Replace with your application code */
    while (1) 
    {
		x=UART_u8Receive_Data();
 4d8:	0e 94 9b 02 	call	0x536	; 0x536 <UART_u8Receive_Data>
		LCD_vSendChar(x);
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_vSendChar>
 4e2:	8f e1       	ldi	r24, 0x1F	; 31
 4e4:	9e e4       	ldi	r25, 0x4E	; 78
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <main+0x2a>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <main+0x30>
 4ec:	00 00       	nop
 4ee:	f4 cf       	rjmp	.-24     	; 0x4d8 <main+0x1c>

000004f0 <UART_vINT>:
{
    /*make sure that TX buffer (usart data register) is empty */
	while(READ_BIT(UCSRA,UDRE)==0);
	
	/*load data into TX buffer */
	UDR = data;
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	aa 1f       	adc	r26, r26
 4fa:	bb 1f       	adc	r27, r27
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	aa 1f       	adc	r26, r26
 502:	bb 1f       	adc	r27, r27
 504:	9c 01       	movw	r18, r24
 506:	ad 01       	movw	r20, r26
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	44 1f       	adc	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	44 1f       	adc	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	72 e1       	ldi	r23, 0x12	; 18
 51c:	8a e7       	ldi	r24, 0x7A	; 122
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 9f 02 	call	0x53e	; 0x53e <__udivmodsi4>
 524:	21 50       	subi	r18, 0x01	; 1
 526:	31 09       	sbc	r19, r1
 528:	30 bd       	out	0x20, r19	; 32
 52a:	29 b9       	out	0x09, r18	; 9
 52c:	53 9a       	sbi	0x0a, 3	; 10
 52e:	54 9a       	sbi	0x0a, 4	; 10
 530:	86 e8       	ldi	r24, 0x86	; 134
 532:	80 bd       	out	0x20, r24	; 32
 534:	08 95       	ret

00000536 <UART_u8Receive_Data>:
}

unsigned char UART_u8Receive_Data(void)
{
	/* pooling RXComplete to make sure that all received data stored in RX buffer (UDR)*/
	while(READ_BIT(UCSRA,RXC)==0);
 536:	5f 9b       	sbis	0x0b, 7	; 11
 538:	fe cf       	rjmp	.-4      	; 0x536 <UART_u8Receive_Data>
	
	/* Read received data from RX buffer (UDR) */
	return UDR;
 53a:	8c b1       	in	r24, 0x0c	; 12
}
 53c:	08 95       	ret

0000053e <__udivmodsi4>:
 53e:	a1 e2       	ldi	r26, 0x21	; 33
 540:	1a 2e       	mov	r1, r26
 542:	aa 1b       	sub	r26, r26
 544:	bb 1b       	sub	r27, r27
 546:	fd 01       	movw	r30, r26
 548:	0d c0       	rjmp	.+26     	; 0x564 <__udivmodsi4_ep>

0000054a <__udivmodsi4_loop>:
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	ee 1f       	adc	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	a2 17       	cp	r26, r18
 554:	b3 07       	cpc	r27, r19
 556:	e4 07       	cpc	r30, r20
 558:	f5 07       	cpc	r31, r21
 55a:	20 f0       	brcs	.+8      	; 0x564 <__udivmodsi4_ep>
 55c:	a2 1b       	sub	r26, r18
 55e:	b3 0b       	sbc	r27, r19
 560:	e4 0b       	sbc	r30, r20
 562:	f5 0b       	sbc	r31, r21

00000564 <__udivmodsi4_ep>:
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	1a 94       	dec	r1
 56e:	69 f7       	brne	.-38     	; 0x54a <__udivmodsi4_loop>
 570:	60 95       	com	r22
 572:	70 95       	com	r23
 574:	80 95       	com	r24
 576:	90 95       	com	r25
 578:	9b 01       	movw	r18, r22
 57a:	ac 01       	movw	r20, r24
 57c:	bd 01       	movw	r22, r26
 57e:	cf 01       	movw	r24, r30
 580:	08 95       	ret

00000582 <__tablejump2__>:
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	05 90       	lpm	r0, Z+
 588:	f4 91       	lpm	r31, Z
 58a:	e0 2d       	mov	r30, r0
 58c:	09 94       	ijmp

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
