
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004fa  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ba  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000891  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c1  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056b  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c79  00000000  00000000  0000327b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	95 00       	.word	0x0095	; ????
  56:	ae 00       	.word	0x00ae	; ????
  58:	c7 00       	.word	0x00c7	; ????
  5a:	e0 00       	.word	0x00e0	; ????
  5c:	f8 00       	.word	0x00f8	; ????
  5e:	f8 00       	.word	0x00f8	; ????
  60:	f8 00       	.word	0x00f8	; ????
  62:	f8 00       	.word	0x00f8	; ????
  64:	f8 00       	.word	0x00f8	; ????
  66:	f8 00       	.word	0x00f8	; ????
  68:	f8 00       	.word	0x00f8	; ????
  6a:	f8 00       	.word	0x00f8	; ????
  6c:	f8 00       	.word	0x00f8	; ????
  6e:	f8 00       	.word	0x00f8	; ????
  70:	f8 00       	.word	0x00f8	; ????
  72:	f8 00       	.word	0x00f8	; ????
  74:	f8 00       	.word	0x00f8	; ????
  76:	f8 00       	.word	0x00f8	; ????
  78:	f8 00       	.word	0x00f8	; ????
  7a:	f8 00       	.word	0x00f8	; ????
  7c:	f8 00       	.word	0x00f8	; ????
  7e:	f8 00       	.word	0x00f8	; ????
  80:	f8 00       	.word	0x00f8	; ????
  82:	f8 00       	.word	0x00f8	; ????
  84:	f8 00       	.word	0x00f8	; ????
  86:	f8 00       	.word	0x00f8	; ????
  88:	f8 00       	.word	0x00f8	; ????
  8a:	f8 00       	.word	0x00f8	; ????
  8c:	f8 00       	.word	0x00f8	; ????
  8e:	f8 00       	.word	0x00f8	; ????
  90:	f8 00       	.word	0x00f8	; ????
  92:	f8 00       	.word	0x00f8	; ????
  94:	95 00       	.word	0x0095	; ????
  96:	ae 00       	.word	0x00ae	; ????
  98:	c7 00       	.word	0x00c7	; ????
  9a:	e0 00       	.word	0x00e0	; ????
  9c:	05 01       	movw	r0, r10
  9e:	1e 01       	movw	r2, r28
  a0:	37 01       	movw	r6, r14
  a2:	50 01       	movw	r10, r0
  a4:	68 01       	movw	r12, r16
  a6:	68 01       	movw	r12, r16
  a8:	68 01       	movw	r12, r16
  aa:	68 01       	movw	r12, r16
  ac:	68 01       	movw	r12, r16
  ae:	68 01       	movw	r12, r16
  b0:	68 01       	movw	r12, r16
  b2:	68 01       	movw	r12, r16
  b4:	68 01       	movw	r12, r16
  b6:	68 01       	movw	r12, r16
  b8:	68 01       	movw	r12, r16
  ba:	68 01       	movw	r12, r16
  bc:	68 01       	movw	r12, r16
  be:	68 01       	movw	r12, r16
  c0:	68 01       	movw	r12, r16
  c2:	68 01       	movw	r12, r16
  c4:	68 01       	movw	r12, r16
  c6:	68 01       	movw	r12, r16
  c8:	68 01       	movw	r12, r16
  ca:	68 01       	movw	r12, r16
  cc:	68 01       	movw	r12, r16
  ce:	68 01       	movw	r12, r16
  d0:	68 01       	movw	r12, r16
  d2:	68 01       	movw	r12, r16
  d4:	68 01       	movw	r12, r16
  d6:	68 01       	movw	r12, r16
  d8:	68 01       	movw	r12, r16
  da:	68 01       	movw	r12, r16
  dc:	05 01       	movw	r0, r10
  de:	1e 01       	movw	r2, r28
  e0:	37 01       	movw	r6, r14
  e2:	50 01       	movw	r10, r0

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ea ef       	ldi	r30, 0xFA	; 250
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 37       	cpi	r26, 0x70	; 112
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
 10a:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <DIO_vSetPinDir>:
{
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, 1);
	}
}
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e1 54       	subi	r30, 0x41	; 65
 118:	f1 09       	sbc	r31, r1
 11a:	e4 32       	cpi	r30, 0x24	; 36
 11c:	f1 05       	cpc	r31, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <DIO_vSetPinDir+0x10>
 120:	67 c0       	rjmp	.+206    	; 0x1f0 <DIO_vSetPinDir+0xde>
 122:	e6 5d       	subi	r30, 0xD6	; 214
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__tablejump2__>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <DIO_vSetPinDir+0x32>
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vSetPinDir+0x28>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vSetPinDir+0x24>
 13e:	82 2b       	or	r24, r18
 140:	8a bb       	out	0x1a, r24	; 26
 142:	08 95       	ret
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vSetPinDir+0x3e>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vSetPinDir+0x3a>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	08 95       	ret
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <DIO_vSetPinDir+0x64>
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0x5a>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0x56>
 170:	82 2b       	or	r24, r18
 172:	87 bb       	out	0x17, r24	; 23
 174:	08 95       	ret
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vSetPinDir+0x70>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vSetPinDir+0x6c>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	08 95       	ret
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_vSetPinDir+0x96>
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vSetPinDir+0x8c>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vSetPinDir+0x88>
 1a2:	82 2b       	or	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret
 1a8:	24 b3       	in	r18, 0x14	; 20
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vSetPinDir+0xa2>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vSetPinDir+0x9e>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_vSetPinDir+0xc8>
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDir+0xbe>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDir+0xba>
 1d4:	82 2b       	or	r24, r18
 1d6:	81 bb       	out	0x11, r24	; 17
 1d8:	08 95       	ret
 1da:	21 b3       	in	r18, 0x11	; 17
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vSetPinDir+0xd4>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vSetPinDir+0xd0>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	81 bb       	out	0x11, r24	; 17
 1f0:	08 95       	ret

000001f2 <DIO_vWritePinValue>:
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	e1 54       	subi	r30, 0x41	; 65
 1f8:	f1 09       	sbc	r31, r1
 1fa:	e4 32       	cpi	r30, 0x24	; 36
 1fc:	f1 05       	cpc	r31, r1
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_vWritePinValue+0x10>
 200:	67 c0       	rjmp	.+206    	; 0x2d0 <DIO_vWritePinValue+0xde>
 202:	e2 5b       	subi	r30, 0xB2	; 178
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__tablejump2__>
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_vWritePinValue+0x32>
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePinValue+0x28>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePinValue+0x24>
 21e:	82 2b       	or	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_vWritePinValue+0x3e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_vWritePinValue+0x3a>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_vWritePinValue+0x64>
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vWritePinValue+0x5a>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vWritePinValue+0x56>
 250:	82 2b       	or	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_vWritePinValue+0x70>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_vWritePinValue+0x6c>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_vWritePinValue+0x96>
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vWritePinValue+0x8c>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vWritePinValue+0x88>
 282:	82 2b       	or	r24, r18
 284:	85 bb       	out	0x15, r24	; 21
 286:	08 95       	ret
 288:	25 b3       	in	r18, 0x15	; 21
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vWritePinValue+0xa2>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vWritePinValue+0x9e>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	85 bb       	out	0x15, r24	; 21
 29e:	08 95       	ret
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_vWritePinValue+0xc8>
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWritePinValue+0xbe>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWritePinValue+0xba>
 2b4:	82 2b       	or	r24, r18
 2b6:	82 bb       	out	0x12, r24	; 18
 2b8:	08 95       	ret
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vWritePinValue+0xd4>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vWritePinValue+0xd0>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <DIO_vSetPortLowNibble>:
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	d8 2f       	mov	r29, r24
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	6c 2f       	mov	r22, r28
 2de:	8d 2f       	mov	r24, r29
 2e0:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 2e4:	cf 5f       	subi	r28, 0xFF	; 255
 2e6:	c4 30       	cpi	r28, 0x04	; 4
 2e8:	c1 f7       	brne	.-16     	; 0x2da <DIO_vSetPortLowNibble+0x8>
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	f8 2e       	mov	r15, r24
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 300:	06 2f       	mov	r16, r22
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	a8 01       	movw	r20, r16
 306:	0c 2e       	mov	r0, r28
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_vWritePortLowNibble+0x1e>
 30a:	55 95       	asr	r21
 30c:	47 95       	ror	r20
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_vWritePortLowNibble+0x1a>
 312:	41 70       	andi	r20, 0x01	; 1
 314:	6c 2f       	mov	r22, r28
 316:	8f 2d       	mov	r24, r15
 318:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 31c:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 31e:	c4 30       	cpi	r28, 0x04	; 4
 320:	d1 05       	cpc	r29, r1
 322:	81 f7       	brne	.-32     	; 0x304 <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	08 95       	ret

00000330 <LCD_Enable_pulse>:
}

// new line
void LCD_vNewLine()
{
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	83 e6       	ldi	r24, 0x63	; 99
 336:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_Enable_pulse+0xe>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_Enable_pulse+0x14>
 344:	00 00       	nop
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	83 e6       	ldi	r24, 0x63	; 99
 34c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_Enable_pulse+0x24>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_Enable_pulse+0x2a>
 35a:	00 00       	nop
 35c:	08 95       	ret

0000035e <LCD_vSendCommand>:
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	83 e6       	ldi	r24, 0x63	; 99
 368:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
 36c:	6c 2f       	mov	r22, r28
 36e:	62 95       	swap	r22
 370:	6f 70       	andi	r22, 0x0F	; 15
 372:	84 e6       	ldi	r24, 0x64	; 100
 374:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_vWritePortLowNibble>
 378:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Enable_pulse>
 37c:	6c 2f       	mov	r22, r28
 37e:	84 e6       	ldi	r24, 0x64	; 100
 380:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_vWritePortLowNibble>
 384:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Enable_pulse>
 388:	8f ec       	ldi	r24, 0xCF	; 207
 38a:	97 e0       	ldi	r25, 0x07	; 7
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_vSendCommand+0x2e>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_vSendCommand+0x34>
 392:	00 00       	nop
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <LCD_vClearScreen>:
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 39e:	08 95       	ret

000003a0 <LCD_vSendChar>:
	LCD_Enable_pulse();								   // send enable pulse
	_delay_ms(1);									   // delay to make sure that command is executed
}

void LCD_vSendChar(unsigned char data)
{
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 1); // RS data select
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	83 e6       	ldi	r24, 0x63	; 99
 3aa:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (data >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 3ae:	6c 2f       	mov	r22, r28
 3b0:	62 95       	swap	r22
 3b2:	6f 70       	andi	r22, 0x0F	; 15
 3b4:	84 e6       	ldi	r24, 0x64	; 100
 3b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 3ba:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, data);		// write on port low nibble and write  4 least bits of data on data reg on lcd
 3be:	6c 2f       	mov	r22, r28
 3c0:	84 e6       	ldi	r24, 0x64	; 100
 3c2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 3c6:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Enable_pulse>
}
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <LCD_vSendString>:
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
	while ((*string_ptr) != 0) // checks null
 3d4:	88 81       	ld	r24, Y
 3d6:	88 23       	and	r24, r24
 3d8:	79 f0       	breq	.+30     	; 0x3f8 <LCD_vSendString+0x2a>
 3da:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
 3dc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_vSendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	80 e7       	ldi	r24, 0x70	; 112
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <LCD_vSendString+0x18>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_vSendString+0x22>
 3f0:	00 00       	nop
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
	while ((*string_ptr) != 0) // checks null
 3f2:	89 91       	ld	r24, Y+
 3f4:	81 11       	cpse	r24, r1
 3f6:	f2 cf       	rjmp	.-28     	; 0x3dc <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 3fe:	6f ef       	ldi	r22, 0xFF	; 255
 400:	84 e6       	ldi	r24, 0x64	; 100
 402:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	83 e6       	ldi	r24, 0x63	; 99
 40c:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	83 e6       	ldi	r24, 0x63	; 99
 416:	0e 94 89 00 	call	0x112	; 0x112 <DIO_vSetPinDir>
 41a:	2f e7       	ldi	r18, 0x7F	; 127
 41c:	88 e3       	ldi	r24, 0x38	; 56
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 432:	8f e1       	ldi	r24, 0x1F	; 31
 434:	9e e4       	ldi	r25, 0x4E	; 78
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 43e:	88 e2       	ldi	r24, 0x28	; 40
 440:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 444:	8f ec       	ldi	r24, 0xCF	; 207
 446:	97 e0       	ldi	r25, 0x07	; 7
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 456:	8f ec       	ldi	r24, 0xCF	; 207
 458:	97 e0       	ldi	r25, 0x07	; 7
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 462:	8e e0       	ldi	r24, 0x0E	; 14
 464:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 468:	8f ec       	ldi	r24, 0xCF	; 207
 46a:	97 e0       	ldi	r25, 0x07	; 7
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 474:	86 e0       	ldi	r24, 0x06	; 6
 476:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 47a:	8f ec       	ldi	r24, 0xCF	; 207
 47c:	97 e0       	ldi	r25, 0x07	; 7
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_vSendCommand>
 48c:	8f ec       	ldi	r24, 0xCF	; 207
 48e:	97 e0       	ldi	r25, 0x07	; 7
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 496:	00 00       	nop
 498:	08 95       	ret

0000049a <main>:
#include "LCD.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	LCD_vInitialize();
 49a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_vInitialize>
	LCD_vSendString("shadoo");
 49e:	80 e6       	ldi	r24, 0x60	; 96
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSendString>
 4a6:	2f ef       	ldi	r18, 0xFF	; 255
 4a8:	89 e6       	ldi	r24, 0x69	; 105
 4aa:	98 e1       	ldi	r25, 0x18	; 24
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <main+0x12>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <main+0x1c>
 4b6:	00 00       	nop
    LCD_vSendString("1234");
	_delay_ms(1000);
	*/
	
	
	LCD_vClearScreen();
 4b8:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_vClearScreen>
 4bc:	2f ef       	ldi	r18, 0xFF	; 255
 4be:	89 e6       	ldi	r24, 0x69	; 105
 4c0:	98 e1       	ldi	r25, 0x18	; 24
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <main+0x28>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <main+0x32>
 4cc:	00 00       	nop
	_delay_ms(1000);
	LCD_vSendString("test :)");
 4ce:	87 e6       	ldi	r24, 0x67	; 103
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSendString>
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	83 ed       	ldi	r24, 0xD3	; 211
 4da:	90 e3       	ldi	r25, 0x30	; 48
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <main+0x42>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <main+0x4c>
 4e6:	00 00       	nop
 4e8:	e7 cf       	rjmp	.-50     	; 0x4b8 <main+0x1e>

000004ea <__tablejump2__>:
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	05 90       	lpm	r0, Z+
 4f0:	f4 91       	lpm	r31, Z
 4f2:	e0 2d       	mov	r30, r0
 4f4:	09 94       	ijmp

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
