
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000658  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000115  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_1>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include "Common_Macros.h"
int main(void)
{
    /* Replace with your application code */
	DDRD |= (1<<7);
  6c:	8f 9a       	sbi	0x11, 7	; 17
	DDRD |= (0<<2);
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	81 bb       	out	0x11, r24	; 17
	sei();//global interrupt enable I_bit
  72:	78 94       	sei
	
	GICR |= (1<<INT0);//enable interrupt of int0
  74:	8b b7       	in	r24, 0x3b	; 59
  76:	80 64       	ori	r24, 0x40	; 64
  78:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= ((1<<ISC01)|(1<<ISC00));//select rising edge mode
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	83 60       	ori	r24, 0x03	; 3
  7e:	85 bf       	out	0x35, r24	; 53
	//MCUCR |=(1<<ISC00);
	//MCUCR |=(1<<ISC01);
	//SET_BIT(MCUCR,ISC00);
	//SET_BIT(MCUCR,ISC01);
	
	DDRD |= (1<<6);//set d6 output
  80:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1<<5);
  82:	8d 9a       	sbi	0x11, 5	; 17
	GICR |=(1<<INT1);
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=((1<<ISC10)|(1<<ISC11));
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	8c 60       	ori	r24, 0x0C	; 12
  8e:	85 bf       	out	0x35, r24	; 53
		}
		else
			PORTD &= ~(1<<7);
		*/
		
		PORTD &= ~(1<<7);//clear bit 7 
  90:	97 98       	cbi	0x12, 7	; 18
		if(READ_BIT(GIFR,7)==1)
  92:	0a b6       	in	r0, 0x3a	; 58
  94:	07 fe       	sbrs	r0, 7
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x30>
		PORTD |= (1<<6);
  98:	96 9a       	sbi	0x12, 6	; 18
  9a:	fa cf       	rjmp	.-12     	; 0x90 <main+0x24>
		
		else
		PORTD &= ~(1<<6);		
  9c:	96 98       	cbi	0x12, 6	; 18
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <main+0x24>

000000a0 <__vector_1>:
		
	}
}

ISR(INT0_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	PORTD|= (1<<7);//set bit 7
  b0:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <__vector_1+0x18>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_1+0x22>
  c2:	00 00       	nop
	
	_delay_ms(2000);//hold until i send int 1 signal
	
	if(READ_BIT(GIFR,7)==1)
  c4:	0a b6       	in	r0, 0x3a	; 58
  c6:	07 fe       	sbrs	r0, 7
  c8:	02 c0       	rjmp	.+4      	; 0xce <__vector_1+0x2e>
	PORTD |= (1<<6);
  ca:	96 9a       	sbi	0x12, 6	; 18
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <__vector_1+0x30>
	
	else
	PORTD &= ~(1<<6);
  ce:	96 98       	cbi	0x12, 6	; 18
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 e1       	ldi	r24, 0x11	; 17
  d4:	9a e7       	ldi	r25, 0x7A	; 122
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__vector_1+0x36>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__vector_1+0x40>
  e0:	00 00       	nop
	_delay_ms(5000);//delay 100 msec
	
	
	//read flag : ((GIFR&(1<<6))>>6)
	
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	2f 91       	pop	r18
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_2>:

ISR(INT1_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
	
	
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
