
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
GIFR &= (~(1<<6));//clear flag int 0
GIFR &= (~(1<<7));//clear flag int 1
*/
int main(void)
{
	sei();//enable interrupts
  6c:	78 94       	sei
	 
	GICR |=(1<<INT0);//enable interrupt 0
  6e:	8b b7       	in	r24, 0x3b	; 59
  70:	80 64       	ori	r24, 0x40	; 64
  72:	8b bf       	out	0x3b, r24	; 59
	
	GICR |=(1<<INT1);//enable interrupt 1
  74:	8b b7       	in	r24, 0x3b	; 59
  76:	80 68       	ori	r24, 0x80	; 128
  78:	8b bf       	out	0x3b, r24	; 59
	
	GICR |=(1<<INT2);//enable interrupt 2
  7a:	8b b7       	in	r24, 0x3b	; 59
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |=((1<<ISC00)|(1<<ISC01));//rising edge mode for int 0
  80:	85 b7       	in	r24, 0x35	; 53
  82:	83 60       	ori	r24, 0x03	; 3
  84:	85 bf       	out	0x35, r24	; 53
	
	MCUCR |=((1<<ISC10)|(1<<ISC11));//rising edge mode for int 1
  86:	85 b7       	in	r24, 0x35	; 53
  88:	8c 60       	ori	r24, 0x0C	; 12
  8a:	85 bf       	out	0x35, r24	; 53
	
	MCUCSR |=(1<<ISC2);//rising edge mode for int 2
  8c:	84 b7       	in	r24, 0x34	; 52
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	84 bf       	out	0x34, r24	; 52
	
	DDRA |= (1<<0);//set A0 as output
  92:	d0 9a       	sbi	0x1a, 0	; 26
	
	DDRA |= (1<<1);//set A1 as output
  94:	d1 9a       	sbi	0x1a, 1	; 26
	
	DDRA |= (1<<2);//set A2 as output
  96:	d2 9a       	sbi	0x1a, 2	; 26
	
	
	while(1)
	{
		
		PORTA &=~(1<<0);//reset A0
  98:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &=~(1<<1);//reset A1
  9a:	d9 98       	cbi	0x1b, 1	; 27
		PORTA &=~(1<<2);//reset A2
  9c:	da 98       	cbi	0x1b, 2	; 27
  9e:	fc cf       	rjmp	.-8      	; 0x98 <main+0x2c>

000000a0 <__vector_1>:
		
	}
}

ISR(INT0_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	PORTA |= (1<<0);//set A0
  b0:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <__vector_1+0x18>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_1+0x22>
  c2:	00 00       	nop
	_delay_ms(2000);
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_2>:


ISR(INT1_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	PORTA |= (1<<1);//set A1
	_delay_ms(2000);
	*/
	//enabling nested interrupt
	
	sei();//enable I bit (global interrupt enable)
  e4:	78 94       	sei
	GICR &=~(1<<INT2);//disable int 2
  e6:	8b b7       	in	r24, 0x3b	; 59
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	8b bf       	out	0x3b, r24	; 59
	PORTA |= (1<<1);//set A1
  ec:	d9 9a       	sbi	0x1b, 1	; 27
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__vector_2+0x20>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__vector_2+0x2a>
  fe:	00 00       	nop
	_delay_ms(2000);
	GICR |=(1<<INT2);//enable int 2
 100:	8b b7       	in	r24, 0x3b	; 59
 102:	80 62       	ori	r24, 0x20	; 32
 104:	8b bf       	out	0x3b, r24	; 59
	
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_3>:

ISR(INT2_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	*/
	
	
	//enabling nested interrupt
	
	sei();//enable I bit (global interrupt enable)
 126:	78 94       	sei
	PORTA |= (1<<2);//set A2
 128:	da 9a       	sbi	0x1b, 2	; 27
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	83 ed       	ldi	r24, 0xD3	; 211
 12e:	90 e3       	ldi	r25, 0x30	; 48
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_3+0x1a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_3+0x24>
 13a:	00 00       	nop
	_delay_ms(2000);
	
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
