
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000006b6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800086  00800086  00000770  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001524  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c2  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a76  00000000  00000000  000027e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dc  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de0  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	9d 00       	.word	0x009d	; ????
  56:	b6 00       	.word	0x00b6	; ????
  58:	cf 00       	.word	0x00cf	; ????
  5a:	e8 00       	.word	0x00e8	; ????
  5c:	00 01       	movw	r0, r0
  5e:	00 01       	movw	r0, r0
  60:	00 01       	movw	r0, r0
  62:	00 01       	movw	r0, r0
  64:	00 01       	movw	r0, r0
  66:	00 01       	movw	r0, r0
  68:	00 01       	movw	r0, r0
  6a:	00 01       	movw	r0, r0
  6c:	00 01       	movw	r0, r0
  6e:	00 01       	movw	r0, r0
  70:	00 01       	movw	r0, r0
  72:	00 01       	movw	r0, r0
  74:	00 01       	movw	r0, r0
  76:	00 01       	movw	r0, r0
  78:	00 01       	movw	r0, r0
  7a:	00 01       	movw	r0, r0
  7c:	00 01       	movw	r0, r0
  7e:	00 01       	movw	r0, r0
  80:	00 01       	movw	r0, r0
  82:	00 01       	movw	r0, r0
  84:	00 01       	movw	r0, r0
  86:	00 01       	movw	r0, r0
  88:	00 01       	movw	r0, r0
  8a:	00 01       	movw	r0, r0
  8c:	00 01       	movw	r0, r0
  8e:	00 01       	movw	r0, r0
  90:	00 01       	movw	r0, r0
  92:	00 01       	movw	r0, r0
  94:	9d 00       	.word	0x009d	; ????
  96:	b6 00       	.word	0x00b6	; ????
  98:	cf 00       	.word	0x00cf	; ????
  9a:	e8 00       	.word	0x00e8	; ????
  9c:	0d 01       	movw	r0, r26
  9e:	26 01       	movw	r4, r12
  a0:	3f 01       	movw	r6, r30
  a2:	58 01       	movw	r10, r16
  a4:	70 01       	movw	r14, r0
  a6:	70 01       	movw	r14, r0
  a8:	70 01       	movw	r14, r0
  aa:	70 01       	movw	r14, r0
  ac:	70 01       	movw	r14, r0
  ae:	70 01       	movw	r14, r0
  b0:	70 01       	movw	r14, r0
  b2:	70 01       	movw	r14, r0
  b4:	70 01       	movw	r14, r0
  b6:	70 01       	movw	r14, r0
  b8:	70 01       	movw	r14, r0
  ba:	70 01       	movw	r14, r0
  bc:	70 01       	movw	r14, r0
  be:	70 01       	movw	r14, r0
  c0:	70 01       	movw	r14, r0
  c2:	70 01       	movw	r14, r0
  c4:	70 01       	movw	r14, r0
  c6:	70 01       	movw	r14, r0
  c8:	70 01       	movw	r14, r0
  ca:	70 01       	movw	r14, r0
  cc:	70 01       	movw	r14, r0
  ce:	70 01       	movw	r14, r0
  d0:	70 01       	movw	r14, r0
  d2:	70 01       	movw	r14, r0
  d4:	70 01       	movw	r14, r0
  d6:	70 01       	movw	r14, r0
  d8:	70 01       	movw	r14, r0
  da:	70 01       	movw	r14, r0
  dc:	0d 01       	movw	r0, r26
  de:	26 01       	movw	r4, r12
  e0:	3f 01       	movw	r6, r30
  e2:	58 01       	movw	r10, r16

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e6 eb       	ldi	r30, 0xB6	; 182
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a6 38       	cpi	r26, 0x86	; 134
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	a6 e8       	ldi	r26, 0x86	; 134
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a7 38       	cpi	r26, 0x87	; 135
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
 11a:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <DIO_vSetPinDir>:
{
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	e1 54       	subi	r30, 0x41	; 65
 128:	f1 09       	sbc	r31, r1
 12a:	e4 32       	cpi	r30, 0x24	; 36
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <DIO_vSetPinDir+0x10>
 130:	67 c0       	rjmp	.+206    	; 0x200 <DIO_vSetPinDir+0xde>
 132:	e6 5d       	subi	r30, 0xD6	; 214
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 44 03 	jmp	0x688	; 0x688 <__tablejump2__>
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_vSetPinDir+0x32>
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vSetPinDir+0x28>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vSetPinDir+0x24>
 14e:	82 2b       	or	r24, r18
 150:	8a bb       	out	0x1a, r24	; 26
 152:	08 95       	ret
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vSetPinDir+0x3e>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vSetPinDir+0x3a>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	8a bb       	out	0x1a, r24	; 26
 16a:	08 95       	ret
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <DIO_vSetPinDir+0x64>
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vSetPinDir+0x5a>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vSetPinDir+0x56>
 180:	82 2b       	or	r24, r18
 182:	87 bb       	out	0x17, r24	; 23
 184:	08 95       	ret
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vSetPinDir+0x70>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vSetPinDir+0x6c>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_vSetPinDir+0x96>
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vSetPinDir+0x8c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vSetPinDir+0x88>
 1b2:	82 2b       	or	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
 1b6:	08 95       	ret
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_vSetPinDir+0xa2>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_vSetPinDir+0x9e>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	08 95       	ret
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_vSetPinDir+0xc8>
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_vSetPinDir+0xbe>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_vSetPinDir+0xba>
 1e4:	82 2b       	or	r24, r18
 1e6:	81 bb       	out	0x11, r24	; 17
 1e8:	08 95       	ret
 1ea:	21 b3       	in	r18, 0x11	; 17
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_vSetPinDir+0xd4>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_vSetPinDir+0xd0>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	08 95       	ret

00000202 <DIO_vWritePinValue>:
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	e1 54       	subi	r30, 0x41	; 65
 208:	f1 09       	sbc	r31, r1
 20a:	e4 32       	cpi	r30, 0x24	; 36
 20c:	f1 05       	cpc	r31, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <DIO_vWritePinValue+0x10>
 210:	67 c0       	rjmp	.+206    	; 0x2e0 <DIO_vWritePinValue+0xde>
 212:	e2 5b       	subi	r30, 0xB2	; 178
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	0c 94 44 03 	jmp	0x688	; 0x688 <__tablejump2__>
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	59 f4       	brne	.+22     	; 0x234 <DIO_vWritePinValue+0x32>
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vWritePinValue+0x28>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vWritePinValue+0x24>
 22e:	82 2b       	or	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
 232:	08 95       	ret
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_vWritePinValue+0x3e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_vWritePinValue+0x3a>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <DIO_vWritePinValue+0x64>
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vWritePinValue+0x5a>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vWritePinValue+0x56>
 260:	82 2b       	or	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
 266:	28 b3       	in	r18, 0x18	; 24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_vWritePinValue+0x70>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_vWritePinValue+0x6c>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	08 95       	ret
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <DIO_vWritePinValue+0x96>
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePinValue+0x8c>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePinValue+0x88>
 292:	82 2b       	or	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vWritePinValue+0xa2>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vWritePinValue+0x9e>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_vWritePinValue+0xc8>
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_vWritePinValue+0xbe>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_vWritePinValue+0xba>
 2c4:	82 2b       	or	r24, r18
 2c6:	82 bb       	out	0x12, r24	; 18
 2c8:	08 95       	ret
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vWritePinValue+0xd4>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vWritePinValue+0xd0>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	08 95       	ret

000002e2 <DIO_vSetPortLowNibble>:
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	f8 2e       	mov	r15, r24
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
 2f2:	06 2f       	mov	r16, r22
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	a8 01       	movw	r20, r16
 2f8:	0c 2e       	mov	r0, r28
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_vSetPortLowNibble+0x1e>
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_vSetPortLowNibble+0x1a>
 304:	41 70       	andi	r20, 0x01	; 1
 306:	6c 2f       	mov	r22, r28
 308:	8f 2d       	mov	r24, r15
 30a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
 30e:	21 96       	adiw	r28, 0x01	; 1
 310:	c4 30       	cpi	r28, 0x04	; 4
 312:	d1 05       	cpc	r29, r1
 314:	81 f7       	brne	.-32     	; 0x2f6 <DIO_vSetPortLowNibble+0x14>
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	08 95       	ret

00000322 <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	f8 2e       	mov	r15, r24
 32e:	c0 e0       	ldi	r28, 0x00	; 0
 330:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 332:	06 2f       	mov	r16, r22
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	a8 01       	movw	r20, r16
 338:	0c 2e       	mov	r0, r28
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_vWritePortLowNibble+0x1e>
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_vWritePortLowNibble+0x1a>
 344:	41 70       	andi	r20, 0x01	; 1
 346:	6c 2f       	mov	r22, r28
 348:	8f 2d       	mov	r24, r15
 34a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
 34e:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 350:	c4 30       	cpi	r28, 0x04	; 4
 352:	d1 05       	cpc	r29, r1
 354:	81 f7       	brne	.-32     	; 0x336 <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	08 95       	ret

00000362 <LCD_Enable_pulse>:

// enable function
static void LCD_Enable_pulse(void)
{
	/*enable pulse with pulse duration 2ms*/
	DIO_vWritePinValue(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	64 e0       	ldi	r22, 0x04	; 4
 366:	83 e6       	ldi	r24, 0x63	; 99
 368:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_Enable_pulse+0xe>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_Enable_pulse+0x14>
 376:	00 00       	nop
	_delay_ms(2);
	DIO_vWritePinValue(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 0);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	83 e6       	ldi	r24, 0x63	; 99
 37e:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Enable_pulse+0x24>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Enable_pulse+0x2a>
 38c:	00 00       	nop
 38e:	08 95       	ret

00000390 <LCD_vSendCommand>:
*/
#elif defined FOUR_BIT_MODE

// LCD 4bit send command on low nibble of port
void LCD_vSendCommand(unsigned char command)
{
 390:	cf 93       	push	r28
 392:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 0);	   // RS command select
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	83 e6       	ldi	r24, 0x63	; 99
 39a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (command >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 39e:	6c 2f       	mov	r22, r28
 3a0:	62 95       	swap	r22
 3a2:	6f 70       	andi	r22, 0x0F	; 15
 3a4:	83 e6       	ldi	r24, 0x63	; 99
 3a6:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								   // send enable pulse
 3aa:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, command);		   // write on port low nibble and write 4 least bits of data on data reg on lcd
 3ae:	6c 2f       	mov	r22, r28
 3b0:	83 e6       	ldi	r24, 0x63	; 99
 3b2:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								   // send enable pulse
 3b6:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
 3ba:	8f ec       	ldi	r24, 0xCF	; 207
 3bc:	97 e0       	ldi	r25, 0x07	; 7
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_vSendCommand+0x2e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_vSendCommand+0x34>
 3c4:	00 00       	nop
	_delay_ms(1);									   // delay to make sure that command is executed
}
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <LCD_vClearScreen>:
}

// Clear screen
void LCD_vClearScreen()
{
	LCD_vSendCommand(LCD_CLR_SCREEN); // call send command function
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 3d0:	08 95       	ret

000003d2 <LCD_vMoveCursor>:
}

// LCD move cursor
void LCD_vMoveCursor(unsigned char row_num, unsigned char column_number)
{
	if ((row_num > 2) || (row_num < 1) || (column_number > 16) || (column_number < 1))
 3d2:	9f ef       	ldi	r25, 0xFF	; 255
 3d4:	98 0f       	add	r25, r24
 3d6:	92 30       	cpi	r25, 0x02	; 2
 3d8:	20 f4       	brcc	.+8      	; 0x3e2 <LCD_vMoveCursor+0x10>
 3da:	9f ef       	ldi	r25, 0xFF	; 255
 3dc:	96 0f       	add	r25, r22
 3de:	90 31       	cpi	r25, 0x10	; 16
 3e0:	28 f0       	brcs	.+10     	; 0x3ec <LCD_vMoveCursor+0x1a>
	{
		LCD_vSendCommand((LCD_FIRST_ROW + (column_number - 1))); // set address counter to this location
 3e2:	8f e7       	ldi	r24, 0x7F	; 127
 3e4:	86 0f       	add	r24, r22
 3e6:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	}
	else if (row_num == 1)
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	29 f4       	brne	.+10     	; 0x3fa <LCD_vMoveCursor+0x28>
	{
		LCD_vSendCommand((LCD_FIRST_ROW + (column_number - 1))); // set address counter to this location
 3f0:	8f e7       	ldi	r24, 0x7F	; 127
 3f2:	86 0f       	add	r24, r22
 3f4:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	}
	else if (row_num == 2)
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	21 f4       	brne	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		LCD_vSendCommand((LCD_SECOND_ROW + (column_number - 1))); // set address counter to this location
 3fe:	8f eb       	ldi	r24, 0xBF	; 191
 400:	86 0f       	add	r24, r22
 402:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 406:	8f ec       	ldi	r24, 0xCF	; 207
 408:	97 e0       	ldi	r25, 0x07	; 7
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	08 95       	ret

00000414 <LCD_vNewLine>:
}

// new line
void LCD_vNewLine()
{
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
 414:	80 ec       	ldi	r24, 0xC0	; 192
 416:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 41a:	08 95       	ret

0000041c <LCD_vSendChar>:
	LCD_Enable_pulse();								   // send enable pulse
	_delay_ms(1);									   // delay to make sure that command is executed
}

void LCD_vSendChar(unsigned char data)
{
 41c:	cf 93       	push	r28
 41e:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 1); // RS data select
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	65 e0       	ldi	r22, 0x05	; 5
 424:	83 e6       	ldi	r24, 0x63	; 99
 426:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (data >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 42a:	6c 2f       	mov	r22, r28
 42c:	62 95       	swap	r22
 42e:	6f 70       	andi	r22, 0x0F	; 15
 430:	83 e6       	ldi	r24, 0x63	; 99
 432:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 436:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, data);		// write on port low nibble and write  4 least bits of data on data reg on lcd
 43a:	6c 2f       	mov	r22, r28
 43c:	83 e6       	ldi	r24, 0x63	; 99
 43e:	0e 94 91 01 	call	0x322	; 0x322 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 442:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Enable_pulse>
}
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <LCD_vSendString>:
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ec 01       	movw	r28, r24
	while ((*string_ptr) != 0) // checks null
 450:	88 81       	ld	r24, Y
 452:	88 23       	and	r24, r24
 454:	79 f0       	breq	.+30     	; 0x474 <LCD_vSendString+0x2a>
 456:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
 458:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_vSendChar>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	80 e7       	ldi	r24, 0x70	; 112
 460:	92 e0       	ldi	r25, 0x02	; 2
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <LCD_vSendString+0x18>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_vSendString+0x22>
 46c:	00 00       	nop
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
	while ((*string_ptr) != 0) // checks null
 46e:	89 91       	ld	r24, Y+
 470:	81 11       	cpse	r24, r1
 472:	f2 cf       	rjmp	.-28     	; 0x458 <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 47a:	6f ef       	ldi	r22, 0xFF	; 255
 47c:	83 e6       	ldi	r24, 0x63	; 99
 47e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	64 e0       	ldi	r22, 0x04	; 4
 486:	83 e6       	ldi	r24, 0x63	; 99
 488:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	65 e0       	ldi	r22, 0x05	; 5
 490:	83 e6       	ldi	r24, 0x63	; 99
 492:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
 496:	2f e7       	ldi	r18, 0x7F	; 127
 498:	88 e3       	ldi	r24, 0x38	; 56
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <LCD_vInitialize+0x22>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_vInitialize+0x2c>
 4a6:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4ae:	8f e1       	ldi	r24, 0x1F	; 31
 4b0:	9e e4       	ldi	r25, 0x4E	; 78
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_vInitialize+0x38>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_vInitialize+0x3e>
 4b8:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 4ba:	88 e2       	ldi	r24, 0x28	; 40
 4bc:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4c0:	8f ec       	ldi	r24, 0xCF	; 207
 4c2:	97 e0       	ldi	r25, 0x07	; 7
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_vInitialize+0x4a>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_vInitialize+0x50>
 4ca:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4d2:	8f ec       	ldi	r24, 0xCF	; 207
 4d4:	97 e0       	ldi	r25, 0x07	; 7
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_vInitialize+0x5c>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_vInitialize+0x62>
 4dc:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 4de:	8e e0       	ldi	r24, 0x0E	; 14
 4e0:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4e4:	8f ec       	ldi	r24, 0xCF	; 207
 4e6:	97 e0       	ldi	r25, 0x07	; 7
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCD_vInitialize+0x6e>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <LCD_vInitialize+0x74>
 4ee:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 4f6:	8f ec       	ldi	r24, 0xCF	; 207
 4f8:	97 e0       	ldi	r25, 0x07	; 7
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_vInitialize+0x80>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_vInitialize+0x86>
 500:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCommand>
 508:	8f ec       	ldi	r24, 0xCF	; 207
 50a:	97 e0       	ldi	r25, 0x07	; 7
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <LCD_vInitialize+0x92>
 510:	00 c0       	rjmp	.+0      	; 0x512 <LCD_vInitialize+0x98>
 512:	00 00       	nop
 514:	08 95       	ret

00000516 <ultra_sonic_distance>:
	unsigned short b;
	unsigned short period;
	unsigned char distance;
	

	TCCR1A=0;// i am working in normal mode with | i am not generating signal i am capturing
 516:	1f bc       	out	0x2f, r1	; 47
	TIFR = (1<<ICF1);//clear flag --> don't remove
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	88 bf       	out	0x38, r24	; 56
	
	/*trigger pulse*/
	DIO_vWritePinValue(ULTRA_SONIC_PORT,ULTRA_SONIC_TRIGGER_PIN,1);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	81 e6       	ldi	r24, 0x61	; 97
 522:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 526:	85 e8       	ldi	r24, 0x85	; 133
 528:	8a 95       	dec	r24
 52a:	f1 f7       	brne	.-4      	; 0x528 <ultra_sonic_distance+0x12>
 52c:	00 00       	nop
	_delay_us(50);
	DIO_vWritePinValue(ULTRA_SONIC_PORT,ULTRA_SONIC_TRIGGER_PIN,0);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	81 e6       	ldi	r24, 0x61	; 97
 534:	0e 94 01 01 	call	0x202	; 0x202 <DIO_vWritePinValue>

	/*first rising edge*/
	SET_BIT(TCCR1B,0);//select no prescaller 
 538:	8e b5       	in	r24, 0x2e	; 46
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,6);//trigger on rising edge
 53e:	8e b5       	in	r24, 0x2e	; 46
 540:	80 64       	ori	r24, 0x40	; 64
 542:	8e bd       	out	0x2e, r24	; 46
	while(READ_BIT(TIFR,ICF1)==0);//pooling on flag until it's got triggerd
 544:	08 b6       	in	r0, 0x38	; 56
 546:	05 fe       	sbrs	r0, 5
 548:	fd cf       	rjmp	.-6      	; 0x544 <ultra_sonic_distance+0x2e>
	a=ICR1;//load value from start to first rising edge
 54a:	46 b5       	in	r20, 0x26	; 38
 54c:	57 b5       	in	r21, 0x27	; 39
	SET_BIT(TIFR,ICF1);//clear flag by writing one on it
 54e:	88 b7       	in	r24, 0x38	; 56
 550:	80 62       	ori	r24, 0x20	; 32
 552:	88 bf       	out	0x38, r24	; 56
	
	/*first falling edge*/
	RESET_BIT(TCCR1B,6);//trigger on falling edge
 554:	8e b5       	in	r24, 0x2e	; 46
 556:	8f 7b       	andi	r24, 0xBF	; 191
 558:	8e bd       	out	0x2e, r24	; 46
	while(READ_BIT(TIFR,ICF1)==0);//pooling on flag until it's got triggerd
 55a:	08 b6       	in	r0, 0x38	; 56
 55c:	05 fe       	sbrs	r0, 5
 55e:	fd cf       	rjmp	.-6      	; 0x55a <ultra_sonic_distance+0x44>
	b=ICR1;//load value from start to first falling
 560:	26 b5       	in	r18, 0x26	; 38
 562:	37 b5       	in	r19, 0x27	; 39
	SET_BIT(TIFR,ICF1);//clear flag by writing one on it
 564:	88 b7       	in	r24, 0x38	; 56
 566:	80 62       	ori	r24, 0x20	; 32
 568:	88 bf       	out	0x38, r24	; 56

	TCNT1=0;//too important to reset counter
 56a:	1d bc       	out	0x2d, r1	; 45
 56c:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;  		/* Stop the timer */
 56e:	1e bc       	out	0x2e, r1	; 46

	period = (b-a);
	distance=((period*34600)/(F_CPU*2));//we divided over 2 because the period is that taken to go and return
	
	return distance;
 570:	24 1b       	sub	r18, r20
 572:	35 0b       	sbc	r19, r21
 574:	a8 e2       	ldi	r26, 0x28	; 40
 576:	b7 e8       	ldi	r27, 0x87	; 135
 578:	0e 94 4a 03 	call	0x694	; 0x694 <__umulhisi3>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	34 e2       	ldi	r19, 0x24	; 36
 580:	44 ef       	ldi	r20, 0xF4	; 244
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	0e 94 22 03 	call	0x644	; 0x644 <__udivmodsi4>
 588:	82 2f       	mov	r24, r18
	
	

 58a:	08 95       	ret

0000058c <main>:

unsigned char distance;

int main(void)
{
	LCD_vInitialize();
 58c:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_vInitialize>
	DIO_vSetPinDir('a',0,1);
 590:	41 e0       	ldi	r20, 0x01	; 1
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	81 e6       	ldi	r24, 0x61	; 97
 596:	0e 94 91 00 	call	0x122	; 0x122 <DIO_vSetPinDir>
	LCD_vSendString("Distance=--");
 59a:	80 e6       	ldi	r24, 0x60	; 96
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_vSendString>
			LCD_vSendString("Distance=--");
		}
		else
		{
			LCD_vMoveCursor(1,10);
			LCD_vSendChar((distance/10)+48);
 5a2:	cd ec       	ldi	r28, 0xCD	; 205
	DIO_vSetPinDir('a',0,1);
	LCD_vSendString("Distance=--");
	while(1)
	{
		
		distance=ultra_sonic_distance();
 5a4:	0e 94 8b 02 	call	0x516	; 0x516 <ultra_sonic_distance>
 5a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
		if (distance>=80)
 5ac:	80 35       	cpi	r24, 0x50	; 80
 5ae:	e0 f0       	brcs	.+56     	; 0x5e8 <main+0x5c>
		{
			LCD_vClearScreen();
 5b0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_vClearScreen>
			LCD_vSendString("no object");
 5b4:	8c e6       	ldi	r24, 0x6C	; 108
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_vSendString>
			LCD_vNewLine();
 5bc:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_vNewLine>
			LCD_vSendString("out of Range");
 5c0:	86 e7       	ldi	r24, 0x76	; 118
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_vSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	89 e6       	ldi	r24, 0x69	; 105
 5cc:	98 e1       	ldi	r25, 0x18	; 24
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x42>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x4c>
 5d8:	00 00       	nop
			_delay_ms(1000);
			LCD_vClearScreen();
 5da:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_vClearScreen>
			LCD_vSendString("Distance=--");
 5de:	80 e6       	ldi	r24, 0x60	; 96
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_vSendString>
 5e6:	de cf       	rjmp	.-68     	; 0x5a4 <main+0x18>
		}
		else
		{
			LCD_vMoveCursor(1,10);
 5e8:	6a e0       	ldi	r22, 0x0A	; 10
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_vMoveCursor>
			LCD_vSendChar((distance/10)+48);
 5f0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 5f4:	8c 9f       	mul	r24, r28
 5f6:	81 2d       	mov	r24, r1
 5f8:	11 24       	eor	r1, r1
 5fa:	86 95       	lsr	r24
 5fc:	86 95       	lsr	r24
 5fe:	86 95       	lsr	r24
 600:	80 5d       	subi	r24, 0xD0	; 208
 602:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_vSendChar>
			LCD_vSendChar((distance%10)+48);
 606:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 60a:	8c 9f       	mul	r24, r28
 60c:	91 2d       	mov	r25, r1
 60e:	11 24       	eor	r1, r1
 610:	96 95       	lsr	r25
 612:	96 95       	lsr	r25
 614:	96 95       	lsr	r25
 616:	99 0f       	add	r25, r25
 618:	29 2f       	mov	r18, r25
 61a:	22 0f       	add	r18, r18
 61c:	22 0f       	add	r18, r18
 61e:	92 0f       	add	r25, r18
 620:	89 1b       	sub	r24, r25
 622:	80 5d       	subi	r24, 0xD0	; 208
 624:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_vSendChar>
			LCD_vSendString("cm");
 628:	83 e8       	ldi	r24, 0x83	; 131
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_vSendString>
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	84 e3       	ldi	r24, 0x34	; 52
 634:	9c e0       	ldi	r25, 0x0C	; 12
 636:	21 50       	subi	r18, 0x01	; 1
 638:	80 40       	sbci	r24, 0x00	; 0
 63a:	90 40       	sbci	r25, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <main+0xaa>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <main+0xb4>
 640:	00 00       	nop
 642:	b0 cf       	rjmp	.-160    	; 0x5a4 <main+0x18>

00000644 <__udivmodsi4>:
 644:	a1 e2       	ldi	r26, 0x21	; 33
 646:	1a 2e       	mov	r1, r26
 648:	aa 1b       	sub	r26, r26
 64a:	bb 1b       	sub	r27, r27
 64c:	fd 01       	movw	r30, r26
 64e:	0d c0       	rjmp	.+26     	; 0x66a <__udivmodsi4_ep>

00000650 <__udivmodsi4_loop>:
 650:	aa 1f       	adc	r26, r26
 652:	bb 1f       	adc	r27, r27
 654:	ee 1f       	adc	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	a2 17       	cp	r26, r18
 65a:	b3 07       	cpc	r27, r19
 65c:	e4 07       	cpc	r30, r20
 65e:	f5 07       	cpc	r31, r21
 660:	20 f0       	brcs	.+8      	; 0x66a <__udivmodsi4_ep>
 662:	a2 1b       	sub	r26, r18
 664:	b3 0b       	sbc	r27, r19
 666:	e4 0b       	sbc	r30, r20
 668:	f5 0b       	sbc	r31, r21

0000066a <__udivmodsi4_ep>:
 66a:	66 1f       	adc	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	1a 94       	dec	r1
 674:	69 f7       	brne	.-38     	; 0x650 <__udivmodsi4_loop>
 676:	60 95       	com	r22
 678:	70 95       	com	r23
 67a:	80 95       	com	r24
 67c:	90 95       	com	r25
 67e:	9b 01       	movw	r18, r22
 680:	ac 01       	movw	r20, r24
 682:	bd 01       	movw	r22, r26
 684:	cf 01       	movw	r24, r30
 686:	08 95       	ret

00000688 <__tablejump2__>:
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	05 90       	lpm	r0, Z+
 68e:	f4 91       	lpm	r31, Z
 690:	e0 2d       	mov	r30, r0
 692:	09 94       	ijmp

00000694 <__umulhisi3>:
 694:	a2 9f       	mul	r26, r18
 696:	b0 01       	movw	r22, r0
 698:	b3 9f       	mul	r27, r19
 69a:	c0 01       	movw	r24, r0
 69c:	a3 9f       	mul	r26, r19
 69e:	70 0d       	add	r23, r0
 6a0:	81 1d       	adc	r24, r1
 6a2:	11 24       	eor	r1, r1
 6a4:	91 1d       	adc	r25, r1
 6a6:	b2 9f       	mul	r27, r18
 6a8:	70 0d       	add	r23, r0
 6aa:	81 1d       	adc	r24, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	91 1d       	adc	r25, r1
 6b0:	08 95       	ret

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
