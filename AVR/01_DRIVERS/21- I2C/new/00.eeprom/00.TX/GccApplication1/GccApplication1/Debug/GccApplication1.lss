
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001628  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009dd  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bce  00000000  00000000  00002871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000718  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f24  00000000  00000000  00003e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	8a 00       	.word	0x008a	; ????
  56:	a3 00       	.word	0x00a3	; ????
  58:	bc 00       	.word	0x00bc	; ????
  5a:	d5 00       	.word	0x00d5	; ????
  5c:	ed 00       	.word	0x00ed	; ????
  5e:	ed 00       	.word	0x00ed	; ????
  60:	ed 00       	.word	0x00ed	; ????
  62:	ed 00       	.word	0x00ed	; ????
  64:	ed 00       	.word	0x00ed	; ????
  66:	ed 00       	.word	0x00ed	; ????
  68:	ed 00       	.word	0x00ed	; ????
  6a:	ed 00       	.word	0x00ed	; ????
  6c:	ed 00       	.word	0x00ed	; ????
  6e:	ed 00       	.word	0x00ed	; ????
  70:	ed 00       	.word	0x00ed	; ????
  72:	ed 00       	.word	0x00ed	; ????
  74:	ed 00       	.word	0x00ed	; ????
  76:	ed 00       	.word	0x00ed	; ????
  78:	ed 00       	.word	0x00ed	; ????
  7a:	ed 00       	.word	0x00ed	; ????
  7c:	ed 00       	.word	0x00ed	; ????
  7e:	ed 00       	.word	0x00ed	; ????
  80:	ed 00       	.word	0x00ed	; ????
  82:	ed 00       	.word	0x00ed	; ????
  84:	ed 00       	.word	0x00ed	; ????
  86:	ed 00       	.word	0x00ed	; ????
  88:	ed 00       	.word	0x00ed	; ????
  8a:	ed 00       	.word	0x00ed	; ????
  8c:	ed 00       	.word	0x00ed	; ????
  8e:	ed 00       	.word	0x00ed	; ????
  90:	ed 00       	.word	0x00ed	; ????
  92:	ed 00       	.word	0x00ed	; ????
  94:	8a 00       	.word	0x008a	; ????
  96:	a3 00       	.word	0x00a3	; ????
  98:	bc 00       	.word	0x00bc	; ????
  9a:	d5 00       	.word	0x00d5	; ????
  9c:	fa 00       	.word	0x00fa	; ????
  9e:	13 01       	movw	r2, r6
  a0:	2c 01       	movw	r4, r24
  a2:	45 01       	movw	r8, r10
  a4:	5d 01       	movw	r10, r26
  a6:	5d 01       	movw	r10, r26
  a8:	5d 01       	movw	r10, r26
  aa:	5d 01       	movw	r10, r26
  ac:	5d 01       	movw	r10, r26
  ae:	5d 01       	movw	r10, r26
  b0:	5d 01       	movw	r10, r26
  b2:	5d 01       	movw	r10, r26
  b4:	5d 01       	movw	r10, r26
  b6:	5d 01       	movw	r10, r26
  b8:	5d 01       	movw	r10, r26
  ba:	5d 01       	movw	r10, r26
  bc:	5d 01       	movw	r10, r26
  be:	5d 01       	movw	r10, r26
  c0:	5d 01       	movw	r10, r26
  c2:	5d 01       	movw	r10, r26
  c4:	5d 01       	movw	r10, r26
  c6:	5d 01       	movw	r10, r26
  c8:	5d 01       	movw	r10, r26
  ca:	5d 01       	movw	r10, r26
  cc:	5d 01       	movw	r10, r26
  ce:	5d 01       	movw	r10, r26
  d0:	5d 01       	movw	r10, r26
  d2:	5d 01       	movw	r10, r26
  d4:	5d 01       	movw	r10, r26
  d6:	5d 01       	movw	r10, r26
  d8:	5d 01       	movw	r10, r26
  da:	5d 01       	movw	r10, r26
  dc:	fa 00       	.word	0x00fa	; ????
  de:	13 01       	movw	r2, r6
  e0:	2c 01       	movw	r4, r24
  e2:	45 01       	movw	r8, r10

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  f4:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <DIO_vSetPinDir>:
{
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	e1 54       	subi	r30, 0x41	; 65
 102:	f1 09       	sbc	r31, r1
 104:	e4 32       	cpi	r30, 0x24	; 36
 106:	f1 05       	cpc	r31, r1
 108:	08 f0       	brcs	.+2      	; 0x10c <DIO_vSetPinDir+0x10>
 10a:	67 c0       	rjmp	.+206    	; 0x1da <DIO_vSetPinDir+0xde>
 10c:	e6 5d       	subi	r30, 0xD6	; 214
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	0c 94 05 03 	jmp	0x60a	; 0x60a <__tablejump2__>
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <DIO_vSetPinDir+0x32>
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vSetPinDir+0x28>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vSetPinDir+0x24>
 128:	82 2b       	or	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26
 12c:	08 95       	ret
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vSetPinDir+0x3e>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vSetPinDir+0x3a>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	8a bb       	out	0x1a, r24	; 26
 144:	08 95       	ret
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	59 f4       	brne	.+22     	; 0x160 <DIO_vSetPinDir+0x64>
 14a:	27 b3       	in	r18, 0x17	; 23
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vSetPinDir+0x5a>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vSetPinDir+0x56>
 15a:	82 2b       	or	r24, r18
 15c:	87 bb       	out	0x17, r24	; 23
 15e:	08 95       	ret
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vSetPinDir+0x70>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vSetPinDir+0x6c>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	87 bb       	out	0x17, r24	; 23
 176:	08 95       	ret
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	59 f4       	brne	.+22     	; 0x192 <DIO_vSetPinDir+0x96>
 17c:	24 b3       	in	r18, 0x14	; 20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_vSetPinDir+0x8c>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_vSetPinDir+0x88>
 18c:	82 2b       	or	r24, r18
 18e:	84 bb       	out	0x14, r24	; 20
 190:	08 95       	ret
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vSetPinDir+0xa2>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vSetPinDir+0x9e>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	84 bb       	out	0x14, r24	; 20
 1a8:	08 95       	ret
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <DIO_vSetPinDir+0xc8>
 1ae:	21 b3       	in	r18, 0x11	; 17
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_vSetPinDir+0xbe>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_vSetPinDir+0xba>
 1be:	82 2b       	or	r24, r18
 1c0:	81 bb       	out	0x11, r24	; 17
 1c2:	08 95       	ret
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDir+0xd4>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDir+0xd0>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	08 95       	ret

000001dc <DIO_vWritePinValue>:
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	e1 54       	subi	r30, 0x41	; 65
 1e2:	f1 09       	sbc	r31, r1
 1e4:	e4 32       	cpi	r30, 0x24	; 36
 1e6:	f1 05       	cpc	r31, r1
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_vWritePinValue+0x10>
 1ea:	67 c0       	rjmp	.+206    	; 0x2ba <DIO_vWritePinValue+0xde>
 1ec:	e2 5b       	subi	r30, 0xB2	; 178
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	0c 94 05 03 	jmp	0x60a	; 0x60a <__tablejump2__>
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_vWritePinValue+0x32>
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_vWritePinValue+0x28>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_vWritePinValue+0x24>
 208:	82 2b       	or	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27
 20c:	08 95       	ret
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePinValue+0x3e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePinValue+0x3a>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	8b bb       	out	0x1b, r24	; 27
 224:	08 95       	ret
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	59 f4       	brne	.+22     	; 0x240 <DIO_vWritePinValue+0x64>
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_vWritePinValue+0x5a>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_vWritePinValue+0x56>
 23a:	82 2b       	or	r24, r18
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	08 95       	ret
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vWritePinValue+0x70>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vWritePinValue+0x6c>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	08 95       	ret
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	59 f4       	brne	.+22     	; 0x272 <DIO_vWritePinValue+0x96>
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_vWritePinValue+0x8c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_vWritePinValue+0x88>
 26c:	82 2b       	or	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
 270:	08 95       	ret
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vWritePinValue+0xa2>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vWritePinValue+0x9e>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	85 bb       	out	0x15, r24	; 21
 288:	08 95       	ret
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <DIO_vWritePinValue+0xc8>
 28e:	22 b3       	in	r18, 0x12	; 18
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_vWritePinValue+0xbe>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_vWritePinValue+0xba>
 29e:	82 2b       	or	r24, r18
 2a0:	82 bb       	out	0x12, r24	; 18
 2a2:	08 95       	ret
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWritePinValue+0xd4>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWritePinValue+0xd0>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	08 95       	ret

000002bc <DIO_vSetPortLowNibble>:
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	f8 2e       	mov	r15, r24
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	06 2f       	mov	r16, r22
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	a8 01       	movw	r20, r16
 2d2:	0c 2e       	mov	r0, r28
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_vSetPortLowNibble+0x1e>
 2d6:	55 95       	asr	r21
 2d8:	47 95       	ror	r20
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_vSetPortLowNibble+0x1a>
 2de:	41 70       	andi	r20, 0x01	; 1
 2e0:	6c 2f       	mov	r22, r28
 2e2:	8f 2d       	mov	r24, r15
 2e4:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_vSetPinDir>
 2e8:	21 96       	adiw	r28, 0x01	; 1
 2ea:	c4 30       	cpi	r28, 0x04	; 4
 2ec:	d1 05       	cpc	r29, r1
 2ee:	81 f7       	brne	.-32     	; 0x2d0 <DIO_vSetPortLowNibble+0x14>
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	08 95       	ret

000002fc <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	f8 2e       	mov	r15, r24
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 30c:	06 2f       	mov	r16, r22
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	a8 01       	movw	r20, r16
 312:	0c 2e       	mov	r0, r28
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_vWritePortLowNibble+0x1e>
 316:	55 95       	asr	r21
 318:	47 95       	ror	r20
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_vWritePortLowNibble+0x1a>
 31e:	41 70       	andi	r20, 0x01	; 1
 320:	6c 2f       	mov	r22, r28
 322:	8f 2d       	mov	r24, r15
 324:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vWritePinValue>
 328:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 32a:	c4 30       	cpi	r28, 0x04	; 4
 32c:	d1 05       	cpc	r29, r1
 32e:	81 f7       	brne	.-32     	; 0x310 <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	08 95       	ret

0000033c <EEPROM_I2C_vWRITE_DATA>:
*/

#include "I2C.h"

void EEPROM_I2C_vWRITE_DATA(unsigned char eeprom_address, unsigned char data_address, unsigned char data)
{
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	18 2f       	mov	r17, r24
 344:	d6 2f       	mov	r29, r22
 346:	c4 2f       	mov	r28, r20
    I2C_vSTART();
 348:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <I2C_vSTART>
    I2C_vSEND_ADDRESS(eeprom_address,I2C_WRITE);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	81 2f       	mov	r24, r17
 350:	0e 94 04 02 	call	0x408	; 0x408 <I2C_vSEND_ADDRESS>
    I2C_vWRITE_DATA(data_address);
 354:	8d 2f       	mov	r24, r29
 356:	0e 94 19 02 	call	0x432	; 0x432 <I2C_vWRITE_DATA>
    I2C_vWRITE_DATA(data);
 35a:	8c 2f       	mov	r24, r28
 35c:	0e 94 19 02 	call	0x432	; 0x432 <I2C_vWRITE_DATA>
    I2C_vSTOP();
 360:	0e 94 01 02 	call	0x402	; 0x402 <I2C_vSTOP>
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	08 95       	ret

0000036c <EEPROM_I2C_u8READ_DATA>:

unsigned char EEPROM_I2C_u8READ_DATA(unsigned char eeprom_address, unsigned char data_address)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	c8 2f       	mov	r28, r24
 372:	d6 2f       	mov	r29, r22
    I2C_vSTART();
 374:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <I2C_vSTART>
    I2C_vSEND_ADDRESS(eeprom_address,I2C_WRITE);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 04 02 	call	0x408	; 0x408 <I2C_vSEND_ADDRESS>
    I2C_vWRITE_DATA(data_address);
 380:	8d 2f       	mov	r24, r29
 382:	0e 94 19 02 	call	0x432	; 0x432 <I2C_vWRITE_DATA>
    I2C_vSTART_REPEAT();
 386:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <I2C_vSTART_REPEAT>
    I2C_vSEND_ADDRESS(eeprom_address,I2C_READ);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 04 02 	call	0x408	; 0x408 <I2C_vSEND_ADDRESS>
    return I2C_read_with_NO_ACK();
 392:	0e 94 f6 01 	call	0x3ec	; 0x3ec <I2C_read_with_NO_ACK>
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <I2C_vMASTER_INT>:
}


void I2C_vSET_ADDRESS(unsigned char address)
{
	TWAR = address;
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	72 e1       	ldi	r23, 0x12	; 18
 3a4:	8a e7       	ldi	r24, 0x7A	; 122
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__udivmodsi4>
 3ac:	da 01       	movw	r26, r20
 3ae:	c9 01       	movw	r24, r18
 3b0:	40 97       	sbiw	r24, 0x10	; 16
 3b2:	a1 09       	sbc	r26, r1
 3b4:	b1 09       	sbc	r27, r1
 3b6:	b6 95       	lsr	r27
 3b8:	a7 95       	ror	r26
 3ba:	97 95       	ror	r25
 3bc:	87 95       	ror	r24
 3be:	80 b9       	out	0x00, r24	; 0
 3c0:	11 b8       	out	0x01, r1	; 1
 3c2:	08 95       	ret

000003c4 <I2C_vSTART>:
 3c4:	84 ea       	ldi	r24, 0xA4	; 164
 3c6:	86 bf       	out	0x36, r24	; 54
 3c8:	06 b6       	in	r0, 0x36	; 54
 3ca:	07 fe       	sbrs	r0, 7
 3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <I2C_vSTART+0x4>
 3ce:	81 b1       	in	r24, 0x01	; 1
 3d0:	88 7f       	andi	r24, 0xF8	; 248
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <I2C_vSTART+0xa>
 3d6:	08 95       	ret

000003d8 <I2C_vSTART_REPEAT>:
 3d8:	84 ea       	ldi	r24, 0xA4	; 164
 3da:	86 bf       	out	0x36, r24	; 54
 3dc:	06 b6       	in	r0, 0x36	; 54
 3de:	07 fe       	sbrs	r0, 7
 3e0:	fd cf       	rjmp	.-6      	; 0x3dc <I2C_vSTART_REPEAT+0x4>
 3e2:	81 b1       	in	r24, 0x01	; 1
 3e4:	88 7f       	andi	r24, 0xF8	; 248
 3e6:	80 31       	cpi	r24, 0x10	; 16
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <I2C_vSTART_REPEAT+0xa>
 3ea:	08 95       	ret

000003ec <I2C_read_with_NO_ACK>:
 3ec:	84 e8       	ldi	r24, 0x84	; 132
 3ee:	86 bf       	out	0x36, r24	; 54
 3f0:	06 b6       	in	r0, 0x36	; 54
 3f2:	07 fe       	sbrs	r0, 7
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <I2C_read_with_NO_ACK+0x4>
 3f6:	81 b1       	in	r24, 0x01	; 1
 3f8:	88 7f       	andi	r24, 0xF8	; 248
 3fa:	88 35       	cpi	r24, 0x58	; 88
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <I2C_read_with_NO_ACK+0xa>
 3fe:	83 b1       	in	r24, 0x03	; 3
 400:	08 95       	ret

00000402 <I2C_vSTOP>:
 402:	84 e9       	ldi	r24, 0x94	; 148
 404:	86 bf       	out	0x36, r24	; 54
 406:	08 95       	ret

00000408 <I2C_vSEND_ADDRESS>:
}


void I2C_vSEND_ADDRESS(unsigned char address , unsigned char R_W)
{
	TWDR= address | (R_W<<0);
 408:	86 2b       	or	r24, r22
 40a:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 40c:	84 e8       	ldi	r24, 0x84	; 132
 40e:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 410:	06 b6       	in	r0, 0x36	; 54
 412:	07 fe       	sbrs	r0, 7
 414:	fd cf       	rjmp	.-6      	; 0x410 <I2C_vSEND_ADDRESS+0x8>
	if(R_W == I2C_WRITE)
 416:	61 11       	cpse	r22, r1
 418:	05 c0       	rjmp	.+10     	; 0x424 <I2C_vSEND_ADDRESS+0x1c>
	{
		while ((TWSR & 0XF8) != 0x18); // SLA+write has been transmitted and ACK has been received		
 41a:	81 b1       	in	r24, 0x01	; 1
 41c:	88 7f       	andi	r24, 0xF8	; 248
 41e:	88 31       	cpi	r24, 0x18	; 24
 420:	e1 f7       	brne	.-8      	; 0x41a <I2C_vSEND_ADDRESS+0x12>
 422:	08 95       	ret
	}
	else if (R_W==I2C_READ)
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	21 f4       	brne	.+8      	; 0x430 <I2C_vSEND_ADDRESS+0x28>
	{
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received			
 428:	81 b1       	in	r24, 0x01	; 1
 42a:	88 7f       	andi	r24, 0xF8	; 248
 42c:	80 34       	cpi	r24, 0x40	; 64
 42e:	e1 f7       	brne	.-8      	; 0x428 <I2C_vSEND_ADDRESS+0x20>
 430:	08 95       	ret

00000432 <I2C_vWRITE_DATA>:
	}
}

void I2C_vWRITE_DATA(unsigned char data)
{
	TWDR=data;
 432:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 434:	84 e8       	ldi	r24, 0x84	; 132
 436:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 438:	06 b6       	in	r0, 0x36	; 54
 43a:	07 fe       	sbrs	r0, 7
 43c:	fd cf       	rjmp	.-6      	; 0x438 <I2C_vWRITE_DATA+0x6>
	while ((TWSR & 0XF8) != 0x28); // data has been transmitted and ACK has been received
 43e:	81 b1       	in	r24, 0x01	; 1
 440:	88 7f       	andi	r24, 0xF8	; 248
 442:	88 32       	cpi	r24, 0x28	; 40
 444:	e1 f7       	brne	.-8      	; 0x43e <I2C_vWRITE_DATA+0xc>
}
 446:	08 95       	ret

00000448 <LCD_Enable_pulse>:
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	64 e0       	ldi	r22, 0x04	; 4
 44c:	84 e6       	ldi	r24, 0x64	; 100
 44e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vWritePinValue>
 452:	8f e9       	ldi	r24, 0x9F	; 159
 454:	9f e0       	ldi	r25, 0x0F	; 15
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <LCD_Enable_pulse+0xe>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_Enable_pulse+0x14>
 45c:	00 00       	nop
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	64 e0       	ldi	r22, 0x04	; 4
 462:	84 e6       	ldi	r24, 0x64	; 100
 464:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vWritePinValue>
 468:	8f e9       	ldi	r24, 0x9F	; 159
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_Enable_pulse+0x24>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_Enable_pulse+0x2a>
 472:	00 00       	nop
 474:	08 95       	ret

00000476 <LCD_vSendCommand>:
 476:	cf 93       	push	r28
 478:	c8 2f       	mov	r28, r24
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	65 e0       	ldi	r22, 0x05	; 5
 47e:	84 e6       	ldi	r24, 0x64	; 100
 480:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vWritePinValue>
 484:	6c 2f       	mov	r22, r28
 486:	62 95       	swap	r22
 488:	6f 70       	andi	r22, 0x0F	; 15
 48a:	84 e6       	ldi	r24, 0x64	; 100
 48c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vWritePortLowNibble>
 490:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_pulse>
 494:	6c 2f       	mov	r22, r28
 496:	84 e6       	ldi	r24, 0x64	; 100
 498:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vWritePortLowNibble>
 49c:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_pulse>
 4a0:	8f ec       	ldi	r24, 0xCF	; 207
 4a2:	97 e0       	ldi	r25, 0x07	; 7
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LCD_vSendCommand+0x2e>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_vSendCommand+0x34>
 4aa:	00 00       	nop
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <LCD_vSendChar>:
 4b0:	cf 93       	push	r28
 4b2:	c8 2f       	mov	r28, r24
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	65 e0       	ldi	r22, 0x05	; 5
 4b8:	84 e6       	ldi	r24, 0x64	; 100
 4ba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vWritePinValue>
 4be:	6c 2f       	mov	r22, r28
 4c0:	62 95       	swap	r22
 4c2:	6f 70       	andi	r22, 0x0F	; 15
 4c4:	84 e6       	ldi	r24, 0x64	; 100
 4c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vWritePortLowNibble>
 4ca:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_pulse>
 4ce:	6c 2f       	mov	r22, r28
 4d0:	84 e6       	ldi	r24, 0x64	; 100
 4d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vWritePortLowNibble>
 4d6:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_pulse>
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 4de:	6f ef       	ldi	r22, 0xFF	; 255
 4e0:	84 e6       	ldi	r24, 0x64	; 100
 4e2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	84 e6       	ldi	r24, 0x64	; 100
 4ec:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	65 e0       	ldi	r22, 0x05	; 5
 4f4:	84 e6       	ldi	r24, 0x64	; 100
 4f6:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_vSetPinDir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fa:	2f e7       	ldi	r18, 0x7F	; 127
 4fc:	88 e3       	ldi	r24, 0x38	; 56
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <LCD_vInitialize+0x22>
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_vInitialize+0x2c>
 50a:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_vSendCommand>
 512:	8f e1       	ldi	r24, 0x1F	; 31
 514:	9e e4       	ldi	r25, 0x4E	; 78
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCD_vInitialize+0x38>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_vInitialize+0x3e>
 51c:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 51e:	88 e2       	ldi	r24, 0x28	; 40
 520:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_vSendCommand>
 524:	8f ec       	ldi	r24, 0xCF	; 207
 526:	97 e0       	ldi	r25, 0x07	; 7
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_vInitialize+0x4a>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_vInitialize+0x50>
 52e:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_vSendCommand>
 536:	8f ec       	ldi	r24, 0xCF	; 207
 538:	97 e0       	ldi	r25, 0x07	; 7
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_vInitialize+0x5c>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_vInitialize+0x62>
 540:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 542:	8e e0       	ldi	r24, 0x0E	; 14
 544:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_vSendCommand>
 548:	8f ec       	ldi	r24, 0xCF	; 207
 54a:	97 e0       	ldi	r25, 0x07	; 7
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_vInitialize+0x6e>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_vInitialize+0x74>
 552:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 554:	86 e0       	ldi	r24, 0x06	; 6
 556:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_vSendCommand>
 55a:	8f ec       	ldi	r24, 0xCF	; 207
 55c:	97 e0       	ldi	r25, 0x07	; 7
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <LCD_vInitialize+0x80>
 562:	00 c0       	rjmp	.+0      	; 0x564 <LCD_vInitialize+0x86>
 564:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_vSendCommand>
 56c:	8f ec       	ldi	r24, 0xCF	; 207
 56e:	97 e0       	ldi	r25, 0x07	; 7
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <LCD_vInitialize+0x92>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LCD_vInitialize+0x98>
 576:	00 00       	nop
 578:	08 95       	ret

0000057a <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "EEPROM_I2C.h"

int main(void)
{
 57a:	cf 93       	push	r28
	LCD_vInitialize();
 57c:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_vInitialize>
	unsigned char x;
	I2C_vMASTER_INT(50000);
 580:	60 e5       	ldi	r22, 0x50	; 80
 582:	73 ec       	ldi	r23, 0xC3	; 195
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_vMASTER_INT>
	
		EEPROM_I2C_vWRITE_DATA(0b10100000,0x00,0x39);
 58c:	49 e3       	ldi	r20, 0x39	; 57
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	80 ea       	ldi	r24, 0xA0	; 160
 592:	0e 94 9e 01 	call	0x33c	; 0x33c <EEPROM_I2C_vWRITE_DATA>
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	84 e3       	ldi	r24, 0x34	; 52
 59a:	9c e0       	ldi	r25, 0x0C	; 12
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x22>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x2c>
 5a6:	00 00       	nop
		
		_delay_ms(500);
	
		x=EEPROM_I2C_u8READ_DATA(0b10100000,0x00);
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	80 ea       	ldi	r24, 0xA0	; 160
 5ac:	0e 94 b6 01 	call	0x36c	; 0x36c <EEPROM_I2C_u8READ_DATA>
 5b0:	c8 2f       	mov	r28, r24
		I2C_vSTOP();
 5b2:	0e 94 01 02 	call	0x402	; 0x402 <I2C_vSTOP>
	 
		LCD_vSendChar(x);
 5b6:	8c 2f       	mov	r24, r28
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LCD_vSendChar>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <__udivmodsi4>:
 5c6:	a1 e2       	ldi	r26, 0x21	; 33
 5c8:	1a 2e       	mov	r1, r26
 5ca:	aa 1b       	sub	r26, r26
 5cc:	bb 1b       	sub	r27, r27
 5ce:	fd 01       	movw	r30, r26
 5d0:	0d c0       	rjmp	.+26     	; 0x5ec <__udivmodsi4_ep>

000005d2 <__udivmodsi4_loop>:
 5d2:	aa 1f       	adc	r26, r26
 5d4:	bb 1f       	adc	r27, r27
 5d6:	ee 1f       	adc	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	a2 17       	cp	r26, r18
 5dc:	b3 07       	cpc	r27, r19
 5de:	e4 07       	cpc	r30, r20
 5e0:	f5 07       	cpc	r31, r21
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <__udivmodsi4_ep>
 5e4:	a2 1b       	sub	r26, r18
 5e6:	b3 0b       	sbc	r27, r19
 5e8:	e4 0b       	sbc	r30, r20
 5ea:	f5 0b       	sbc	r31, r21

000005ec <__udivmodsi4_ep>:
 5ec:	66 1f       	adc	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	1a 94       	dec	r1
 5f6:	69 f7       	brne	.-38     	; 0x5d2 <__udivmodsi4_loop>
 5f8:	60 95       	com	r22
 5fa:	70 95       	com	r23
 5fc:	80 95       	com	r24
 5fe:	90 95       	com	r25
 600:	9b 01       	movw	r18, r22
 602:	ac 01       	movw	r20, r24
 604:	bd 01       	movw	r22, r26
 606:	cf 01       	movw	r24, r30
 608:	08 95       	ret

0000060a <__tablejump2__>:
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	05 90       	lpm	r0, Z+
 610:	f4 91       	lpm	r31, Z
 612:	e0 2d       	mov	r30, r0
 614:	09 94       	ijmp

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
