
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000876  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003da  00000000  00000000  00001213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  7a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_vMASTER_INT>:
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(READ_BIT(TWCR,TWINT)==0);
	while ((TWSR & 0XF8) != 0x80); // previously addressed with own SLA+W : data has been received : ACK has been returned
	return TWDR ;
	
}
  82:	9b 01       	movw	r18, r22
  84:	ac 01       	movw	r20, r24
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	72 e1       	ldi	r23, 0x12	; 18
  8a:	8a e7       	ldi	r24, 0x7A	; 122
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 b4 00 	call	0x168	; 0x168 <__udivmodsi4>
  92:	da 01       	movw	r26, r20
  94:	c9 01       	movw	r24, r18
  96:	40 97       	sbiw	r24, 0x10	; 16
  98:	a1 09       	sbc	r26, r1
  9a:	b1 09       	sbc	r27, r1
  9c:	b6 95       	lsr	r27
  9e:	a7 95       	ror	r26
  a0:	97 95       	ror	r25
  a2:	87 95       	ror	r24
  a4:	80 b9       	out	0x00, r24	; 0
  a6:	11 b8       	out	0x01, r1	; 1
  a8:	08 95       	ret

000000aa <I2C_vSTART>:
  aa:	84 ea       	ldi	r24, 0xA4	; 164
  ac:	86 bf       	out	0x36, r24	; 54
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <I2C_vSTART+0x4>
  b4:	81 b1       	in	r24, 0x01	; 1
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	e1 f7       	brne	.-8      	; 0xb4 <I2C_vSTART+0xa>
  bc:	08 95       	ret

000000be <I2C_vSET_ADDRESS>:
  be:	82 b9       	out	0x02, r24	; 2
  c0:	08 95       	ret

000000c2 <I2C_vSEND_ADDRESS>:
  c2:	83 b9       	out	0x03, r24	; 3
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	86 bf       	out	0x36, r24	; 54
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <I2C_vSEND_ADDRESS+0x6>
  ce:	61 11       	cpse	r22, r1
  d0:	04 c0       	rjmp	.+8      	; 0xda <I2C_vSEND_ADDRESS+0x18>
  d2:	81 b1       	in	r24, 0x01	; 1
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	88 31       	cpi	r24, 0x18	; 24
  d8:	e1 f7       	brne	.-8      	; 0xd2 <I2C_vSEND_ADDRESS+0x10>
  da:	08 95       	ret

000000dc <I2C_vWRITE_DATA>:
  dc:	83 b9       	out	0x03, r24	; 3
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	86 bf       	out	0x36, r24	; 54
  e2:	06 b6       	in	r0, 0x36	; 54
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <I2C_vWRITE_DATA+0x6>
  e8:	81 b1       	in	r24, 0x01	; 1
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	88 32       	cpi	r24, 0x28	; 40
  ee:	e1 f7       	brne	.-8      	; 0xe8 <I2C_vWRITE_DATA+0xc>
  f0:	08 95       	ret

000000f2 <I2C_vSTOP>:



void I2C_vSTOP(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	86 bf       	out	0x36, r24	; 54
  f6:	08 95       	ret

000000f8 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
unsigned char x[]="test";

int main(void)
{
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	I2C_vMASTER_INT(50000);
 100:	60 e5       	ldi	r22, 0x50	; 80
 102:	73 ec       	ldi	r23, 0xC3	; 195
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 41 00 	call	0x82	; 0x82 <I2C_vMASTER_INT>
	I2C_vSET_ADDRESS(0x08);
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_vSET_ADDRESS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 e6       	ldi	r24, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x20>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x2a>
 122:	00 00       	nop
 124:	c0 e6       	ldi	r28, 0x60	; 96
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	06 e6       	ldi	r16, 0x66	; 102
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x3a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x44>
 13c:	00 00       	nop
	_delay_ms(1000);
	
	while(counter<6)
	{
		_delay_ms(100);
		I2C_vSTART();
 13e:	0e 94 55 00 	call	0xaa	; 0xaa <I2C_vSTART>
		I2C_vSEND_ADDRESS(0x04,I2C_WRITE);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	0e 94 61 00 	call	0xc2	; 0xc2 <I2C_vSEND_ADDRESS>
		I2C_vWRITE_DATA(x[counter]);
 14a:	89 91       	ld	r24, Y+
 14c:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_vWRITE_DATA>
		I2C_vSTOP();
 150:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_vSTOP>
	I2C_vMASTER_INT(50000);
	I2C_vSET_ADDRESS(0x08);
	unsigned char counter=0;
	_delay_ms(1000);
	
	while(counter<6)
 154:	c0 17       	cp	r28, r16
 156:	d1 07       	cpc	r29, r17
 158:	49 f7       	brne	.-46     	; 0x12c <main+0x34>
		I2C_vSEND_ADDRESS(0x04,I2C_WRITE);
		I2C_vWRITE_DATA(x[counter]);
		I2C_vSTOP();
		counter++;
	}
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <__udivmodsi4>:
 168:	a1 e2       	ldi	r26, 0x21	; 33
 16a:	1a 2e       	mov	r1, r26
 16c:	aa 1b       	sub	r26, r26
 16e:	bb 1b       	sub	r27, r27
 170:	fd 01       	movw	r30, r26
 172:	0d c0       	rjmp	.+26     	; 0x18e <__udivmodsi4_ep>

00000174 <__udivmodsi4_loop>:
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	ee 1f       	adc	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	a2 17       	cp	r26, r18
 17e:	b3 07       	cpc	r27, r19
 180:	e4 07       	cpc	r30, r20
 182:	f5 07       	cpc	r31, r21
 184:	20 f0       	brcs	.+8      	; 0x18e <__udivmodsi4_ep>
 186:	a2 1b       	sub	r26, r18
 188:	b3 0b       	sbc	r27, r19
 18a:	e4 0b       	sbc	r30, r20
 18c:	f5 0b       	sbc	r31, r21

0000018e <__udivmodsi4_ep>:
 18e:	66 1f       	adc	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	88 1f       	adc	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	1a 94       	dec	r1
 198:	69 f7       	brne	.-38     	; 0x174 <__udivmodsi4_loop>
 19a:	60 95       	com	r22
 19c:	70 95       	com	r23
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	9b 01       	movw	r18, r22
 1a4:	ac 01       	movw	r20, r24
 1a6:	bd 01       	movw	r22, r26
 1a8:	cf 01       	movw	r24, r30
 1aa:	08 95       	ret

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
