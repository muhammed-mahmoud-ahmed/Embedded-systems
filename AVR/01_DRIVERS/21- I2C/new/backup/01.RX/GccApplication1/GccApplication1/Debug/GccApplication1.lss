
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001321  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b9  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b6  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000691  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d55  00000000  00000000  000035bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	92 00       	.word	0x0092	; ????
  56:	ab 00       	.word	0x00ab	; ????
  58:	c4 00       	.word	0x00c4	; ????
  5a:	dd 00       	.word	0x00dd	; ????
  5c:	f5 00       	.word	0x00f5	; ????
  5e:	f5 00       	.word	0x00f5	; ????
  60:	f5 00       	.word	0x00f5	; ????
  62:	f5 00       	.word	0x00f5	; ????
  64:	f5 00       	.word	0x00f5	; ????
  66:	f5 00       	.word	0x00f5	; ????
  68:	f5 00       	.word	0x00f5	; ????
  6a:	f5 00       	.word	0x00f5	; ????
  6c:	f5 00       	.word	0x00f5	; ????
  6e:	f5 00       	.word	0x00f5	; ????
  70:	f5 00       	.word	0x00f5	; ????
  72:	f5 00       	.word	0x00f5	; ????
  74:	f5 00       	.word	0x00f5	; ????
  76:	f5 00       	.word	0x00f5	; ????
  78:	f5 00       	.word	0x00f5	; ????
  7a:	f5 00       	.word	0x00f5	; ????
  7c:	f5 00       	.word	0x00f5	; ????
  7e:	f5 00       	.word	0x00f5	; ????
  80:	f5 00       	.word	0x00f5	; ????
  82:	f5 00       	.word	0x00f5	; ????
  84:	f5 00       	.word	0x00f5	; ????
  86:	f5 00       	.word	0x00f5	; ????
  88:	f5 00       	.word	0x00f5	; ????
  8a:	f5 00       	.word	0x00f5	; ????
  8c:	f5 00       	.word	0x00f5	; ????
  8e:	f5 00       	.word	0x00f5	; ????
  90:	f5 00       	.word	0x00f5	; ????
  92:	f5 00       	.word	0x00f5	; ????
  94:	92 00       	.word	0x0092	; ????
  96:	ab 00       	.word	0x00ab	; ????
  98:	c4 00       	.word	0x00c4	; ????
  9a:	dd 00       	.word	0x00dd	; ????
  9c:	02 01       	movw	r0, r4
  9e:	1b 01       	movw	r2, r22
  a0:	34 01       	movw	r6, r8
  a2:	4d 01       	movw	r8, r26
  a4:	65 01       	movw	r12, r10
  a6:	65 01       	movw	r12, r10
  a8:	65 01       	movw	r12, r10
  aa:	65 01       	movw	r12, r10
  ac:	65 01       	movw	r12, r10
  ae:	65 01       	movw	r12, r10
  b0:	65 01       	movw	r12, r10
  b2:	65 01       	movw	r12, r10
  b4:	65 01       	movw	r12, r10
  b6:	65 01       	movw	r12, r10
  b8:	65 01       	movw	r12, r10
  ba:	65 01       	movw	r12, r10
  bc:	65 01       	movw	r12, r10
  be:	65 01       	movw	r12, r10
  c0:	65 01       	movw	r12, r10
  c2:	65 01       	movw	r12, r10
  c4:	65 01       	movw	r12, r10
  c6:	65 01       	movw	r12, r10
  c8:	65 01       	movw	r12, r10
  ca:	65 01       	movw	r12, r10
  cc:	65 01       	movw	r12, r10
  ce:	65 01       	movw	r12, r10
  d0:	65 01       	movw	r12, r10
  d2:	65 01       	movw	r12, r10
  d4:	65 01       	movw	r12, r10
  d6:	65 01       	movw	r12, r10
  d8:	65 01       	movw	r12, r10
  da:	65 01       	movw	r12, r10
  dc:	02 01       	movw	r0, r4
  de:	1b 01       	movw	r2, r22
  e0:	34 01       	movw	r6, r8
  e2:	4d 01       	movw	r8, r26

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a0 36       	cpi	r26, 0x60	; 96
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
 104:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <DIO_vSetPinDir>:
{
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	e1 54       	subi	r30, 0x41	; 65
 112:	f1 09       	sbc	r31, r1
 114:	e4 32       	cpi	r30, 0x24	; 36
 116:	f1 05       	cpc	r31, r1
 118:	08 f0       	brcs	.+2      	; 0x11c <DIO_vSetPinDir+0x10>
 11a:	67 c0       	rjmp	.+206    	; 0x1ea <DIO_vSetPinDir+0xde>
 11c:	e6 5d       	subi	r30, 0xD6	; 214
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__tablejump2__>
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <DIO_vSetPinDir+0x32>
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vSetPinDir+0x28>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vSetPinDir+0x24>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vSetPinDir+0x3e>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vSetPinDir+0x3a>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	8a bb       	out	0x1a, r24	; 26
 154:	08 95       	ret
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	59 f4       	brne	.+22     	; 0x170 <DIO_vSetPinDir+0x64>
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vSetPinDir+0x5a>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vSetPinDir+0x56>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vSetPinDir+0x70>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vSetPinDir+0x6c>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	87 bb       	out	0x17, r24	; 23
 186:	08 95       	ret
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	59 f4       	brne	.+22     	; 0x1a2 <DIO_vSetPinDir+0x96>
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vSetPinDir+0x8c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vSetPinDir+0x88>
 19c:	82 2b       	or	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vSetPinDir+0xa2>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vSetPinDir+0x9e>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	84 bb       	out	0x14, r24	; 20
 1b8:	08 95       	ret
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_vSetPinDir+0xc8>
 1be:	21 b3       	in	r18, 0x11	; 17
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_vSetPinDir+0xbe>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_vSetPinDir+0xba>
 1ce:	82 2b       	or	r24, r18
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_vSetPinDir+0xd4>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_vSetPinDir+0xd0>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
 1ea:	08 95       	ret

000001ec <DIO_vWritePinValue>:
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	e1 54       	subi	r30, 0x41	; 65
 1f2:	f1 09       	sbc	r31, r1
 1f4:	e4 32       	cpi	r30, 0x24	; 36
 1f6:	f1 05       	cpc	r31, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <DIO_vWritePinValue+0x10>
 1fa:	67 c0       	rjmp	.+206    	; 0x2ca <DIO_vWritePinValue+0xde>
 1fc:	e2 5b       	subi	r30, 0xB2	; 178
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__tablejump2__>
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_vWritePinValue+0x32>
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vWritePinValue+0x28>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vWritePinValue+0x24>
 218:	82 2b       	or	r24, r18
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	08 95       	ret
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vWritePinValue+0x3e>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vWritePinValue+0x3a>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	8b bb       	out	0x1b, r24	; 27
 234:	08 95       	ret
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <DIO_vWritePinValue+0x64>
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_vWritePinValue+0x5a>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_vWritePinValue+0x56>
 24a:	82 2b       	or	r24, r18
 24c:	88 bb       	out	0x18, r24	; 24
 24e:	08 95       	ret
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vWritePinValue+0x70>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vWritePinValue+0x6c>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	88 bb       	out	0x18, r24	; 24
 266:	08 95       	ret
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_vWritePinValue+0x96>
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_vWritePinValue+0x8c>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_vWritePinValue+0x88>
 27c:	82 2b       	or	r24, r18
 27e:	85 bb       	out	0x15, r24	; 21
 280:	08 95       	ret
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePinValue+0xa2>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePinValue+0x9e>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_vWritePinValue+0xc8>
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_vWritePinValue+0xbe>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_vWritePinValue+0xba>
 2ae:	82 2b       	or	r24, r18
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	08 95       	ret
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_vWritePinValue+0xd4>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_vWritePinValue+0xd0>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	82 bb       	out	0x12, r24	; 18
 2ca:	08 95       	ret

000002cc <DIO_vSetPortLowNibble>:
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	f8 2e       	mov	r15, r24
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	06 2f       	mov	r16, r22
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	a8 01       	movw	r20, r16
 2e2:	0c 2e       	mov	r0, r28
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_vSetPortLowNibble+0x1e>
 2e6:	55 95       	asr	r21
 2e8:	47 95       	ror	r20
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_vSetPortLowNibble+0x1a>
 2ee:	41 70       	andi	r20, 0x01	; 1
 2f0:	6c 2f       	mov	r22, r28
 2f2:	8f 2d       	mov	r24, r15
 2f4:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_vSetPinDir>
 2f8:	21 96       	adiw	r28, 0x01	; 1
 2fa:	c4 30       	cpi	r28, 0x04	; 4
 2fc:	d1 05       	cpc	r29, r1
 2fe:	81 f7       	brne	.-32     	; 0x2e0 <DIO_vSetPortLowNibble+0x14>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	08 95       	ret

0000030c <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	f8 2e       	mov	r15, r24
 318:	c0 e0       	ldi	r28, 0x00	; 0
 31a:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 31c:	06 2f       	mov	r16, r22
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	a8 01       	movw	r20, r16
 322:	0c 2e       	mov	r0, r28
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_vWritePortLowNibble+0x1e>
 326:	55 95       	asr	r21
 328:	47 95       	ror	r20
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_vWritePortLowNibble+0x1a>
 32e:	41 70       	andi	r20, 0x01	; 1
 330:	6c 2f       	mov	r22, r28
 332:	8f 2d       	mov	r24, r15
 334:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_vWritePinValue>
 338:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 33a:	c4 30       	cpi	r28, 0x04	; 4
 33c:	d1 05       	cpc	r29, r1
 33e:	81 f7       	brne	.-32     	; 0x320 <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	08 95       	ret

0000034c <I2C_vSET_ADDRESS>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	
	while(READ_BIT(TWCR,TWINT)==0);
	
	while((TWSR & 0xf8)==0x18);// data transmitted and ack received
}
 34c:	82 b9       	out	0x02, r24	; 2
 34e:	08 95       	ret

00000350 <I2C_u8SLAVE_READ>:

unsigned char	I2C_u8SLAVE_READ(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 350:	84 ec       	ldi	r24, 0xC4	; 196
 352:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 354:	06 b6       	in	r0, 0x36	; 54
 356:	07 fe       	sbrs	r0, 7
 358:	fd cf       	rjmp	.-6      	; 0x354 <I2C_u8SLAVE_READ+0x4>
	while ((TWSR & 0XF8) != 0x60); // own SLA+W has been received and ACK has been returned
 35a:	81 b1       	in	r24, 0x01	; 1
 35c:	88 7f       	andi	r24, 0xF8	; 248
 35e:	80 36       	cpi	r24, 0x60	; 96
 360:	e1 f7       	brne	.-8      	; 0x35a <I2C_u8SLAVE_READ+0xa>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 362:	84 ec       	ldi	r24, 0xC4	; 196
 364:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 366:	06 b6       	in	r0, 0x36	; 54
 368:	07 fe       	sbrs	r0, 7
 36a:	fd cf       	rjmp	.-6      	; 0x366 <I2C_u8SLAVE_READ+0x16>
	while ((TWSR & 0XF8) != 0x80); // previously addressed with own SLA+W : data has been received : ACK has been returned
 36c:	81 b1       	in	r24, 0x01	; 1
 36e:	88 7f       	andi	r24, 0xF8	; 248
 370:	80 38       	cpi	r24, 0x80	; 128
 372:	e1 f7       	brne	.-8      	; 0x36c <I2C_u8SLAVE_READ+0x1c>
	return TWDR ;
 374:	83 b1       	in	r24, 0x03	; 3
	
}
 376:	08 95       	ret

00000378 <LCD_Enable_pulse>:
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	84 e4       	ldi	r24, 0x44	; 68
 37e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_vWritePinValue>
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Enable_pulse+0xe>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Enable_pulse+0x14>
 38c:	00 00       	nop
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	84 e4       	ldi	r24, 0x44	; 68
 394:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_vWritePinValue>
 398:	8f e9       	ldi	r24, 0x9F	; 159
 39a:	9f e0       	ldi	r25, 0x0F	; 15
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_Enable_pulse+0x24>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_Enable_pulse+0x2a>
 3a2:	00 00       	nop
 3a4:	08 95       	ret

000003a6 <LCD_vSendCommand>:
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	65 e0       	ldi	r22, 0x05	; 5
 3ae:	84 e4       	ldi	r24, 0x44	; 68
 3b0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_vWritePinValue>
 3b4:	6c 2f       	mov	r22, r28
 3b6:	62 95       	swap	r22
 3b8:	6f 70       	andi	r22, 0x0F	; 15
 3ba:	84 e4       	ldi	r24, 0x44	; 68
 3bc:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vWritePortLowNibble>
 3c0:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_Enable_pulse>
 3c4:	6c 2f       	mov	r22, r28
 3c6:	84 e4       	ldi	r24, 0x44	; 68
 3c8:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vWritePortLowNibble>
 3cc:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_Enable_pulse>
 3d0:	8f ec       	ldi	r24, 0xCF	; 207
 3d2:	97 e0       	ldi	r25, 0x07	; 7
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_vSendCommand+0x2e>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_vSendCommand+0x34>
 3da:	00 00       	nop
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <LCD_vSendChar>:
 3e0:	cf 93       	push	r28
 3e2:	c8 2f       	mov	r28, r24
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	65 e0       	ldi	r22, 0x05	; 5
 3e8:	84 e4       	ldi	r24, 0x44	; 68
 3ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_vWritePinValue>
 3ee:	6c 2f       	mov	r22, r28
 3f0:	62 95       	swap	r22
 3f2:	6f 70       	andi	r22, 0x0F	; 15
 3f4:	84 e4       	ldi	r24, 0x44	; 68
 3f6:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vWritePortLowNibble>
 3fa:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_Enable_pulse>
 3fe:	6c 2f       	mov	r22, r28
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vWritePortLowNibble>
 406:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_Enable_pulse>
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 40e:	6f ef       	ldi	r22, 0xFF	; 255
 410:	84 e4       	ldi	r24, 0x44	; 68
 412:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	64 e0       	ldi	r22, 0x04	; 4
 41a:	84 e4       	ldi	r24, 0x44	; 68
 41c:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	65 e0       	ldi	r22, 0x05	; 5
 424:	84 e4       	ldi	r24, 0x44	; 68
 426:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_vSetPinDir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42a:	2f e7       	ldi	r18, 0x7F	; 127
 42c:	88 e3       	ldi	r24, 0x38	; 56
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <LCD_vInitialize+0x22>
 438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_vInitialize+0x2c>
 43a:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_vSendCommand>
 442:	8f e1       	ldi	r24, 0x1F	; 31
 444:	9e e4       	ldi	r25, 0x4E	; 78
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <LCD_vInitialize+0x38>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_vInitialize+0x3e>
 44c:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 44e:	88 e2       	ldi	r24, 0x28	; 40
 450:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_vSendCommand>
 454:	8f ec       	ldi	r24, 0xCF	; 207
 456:	97 e0       	ldi	r25, 0x07	; 7
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_vInitialize+0x4a>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <LCD_vInitialize+0x50>
 45e:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_vSendCommand>
 466:	8f ec       	ldi	r24, 0xCF	; 207
 468:	97 e0       	ldi	r25, 0x07	; 7
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_vInitialize+0x5c>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_vInitialize+0x62>
 470:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 472:	8e e0       	ldi	r24, 0x0E	; 14
 474:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_vSendCommand>
 478:	8f ec       	ldi	r24, 0xCF	; 207
 47a:	97 e0       	ldi	r25, 0x07	; 7
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCD_vInitialize+0x6e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_vInitialize+0x74>
 482:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_vSendCommand>
 48a:	8f ec       	ldi	r24, 0xCF	; 207
 48c:	97 e0       	ldi	r25, 0x07	; 7
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_vInitialize+0x80>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_vInitialize+0x86>
 494:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_vSendCommand>
 49c:	8f ec       	ldi	r24, 0xCF	; 207
 49e:	97 e0       	ldi	r25, 0x07	; 7
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_vInitialize+0x92>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_vInitialize+0x98>
 4a6:	00 00       	nop
 4a8:	08 95       	ret

000004aa <main>:
#include <util/delay.h>
unsigned char x;

int main(void)
{
	I2C_vSET_ADDRESS(0x04);
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_vSET_ADDRESS>
	LCD_vInitialize();
 4b0:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_vInitialize>
	
	while(1)
	{
		LCD_vSendChar(I2C_u8SLAVE_READ());
 4b4:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_u8SLAVE_READ>
 4b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_vSendChar>
 4bc:	fb cf       	rjmp	.-10     	; 0x4b4 <main+0xa>

000004be <__tablejump2__>:
 4be:	ee 0f       	add	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	05 90       	lpm	r0, Z+
 4c4:	f4 91       	lpm	r31, Z
 4c6:	e0 2d       	mov	r30, r0
 4c8:	09 94       	ijmp

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
