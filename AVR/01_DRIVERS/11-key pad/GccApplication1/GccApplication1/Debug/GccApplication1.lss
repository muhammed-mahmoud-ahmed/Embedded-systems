
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000076a  000007de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165f  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a17  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a5d  00000000  00000000  00002a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060d  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ee5  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004c46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	bc 00       	.word	0x00bc	; ????
  56:	d5 00       	.word	0x00d5	; ????
  58:	ee 00       	.word	0x00ee	; ????
  5a:	07 01       	movw	r0, r14
  5c:	1f 01       	movw	r2, r30
  5e:	1f 01       	movw	r2, r30
  60:	1f 01       	movw	r2, r30
  62:	1f 01       	movw	r2, r30
  64:	1f 01       	movw	r2, r30
  66:	1f 01       	movw	r2, r30
  68:	1f 01       	movw	r2, r30
  6a:	1f 01       	movw	r2, r30
  6c:	1f 01       	movw	r2, r30
  6e:	1f 01       	movw	r2, r30
  70:	1f 01       	movw	r2, r30
  72:	1f 01       	movw	r2, r30
  74:	1f 01       	movw	r2, r30
  76:	1f 01       	movw	r2, r30
  78:	1f 01       	movw	r2, r30
  7a:	1f 01       	movw	r2, r30
  7c:	1f 01       	movw	r2, r30
  7e:	1f 01       	movw	r2, r30
  80:	1f 01       	movw	r2, r30
  82:	1f 01       	movw	r2, r30
  84:	1f 01       	movw	r2, r30
  86:	1f 01       	movw	r2, r30
  88:	1f 01       	movw	r2, r30
  8a:	1f 01       	movw	r2, r30
  8c:	1f 01       	movw	r2, r30
  8e:	1f 01       	movw	r2, r30
  90:	1f 01       	movw	r2, r30
  92:	1f 01       	movw	r2, r30
  94:	bc 00       	.word	0x00bc	; ????
  96:	d5 00       	.word	0x00d5	; ????
  98:	ee 00       	.word	0x00ee	; ????
  9a:	07 01       	movw	r0, r14
  9c:	2c 01       	movw	r4, r24
  9e:	45 01       	movw	r8, r10
  a0:	5e 01       	movw	r10, r28
  a2:	77 01       	movw	r14, r14
  a4:	8f 01       	movw	r16, r30
  a6:	8f 01       	movw	r16, r30
  a8:	8f 01       	movw	r16, r30
  aa:	8f 01       	movw	r16, r30
  ac:	8f 01       	movw	r16, r30
  ae:	8f 01       	movw	r16, r30
  b0:	8f 01       	movw	r16, r30
  b2:	8f 01       	movw	r16, r30
  b4:	8f 01       	movw	r16, r30
  b6:	8f 01       	movw	r16, r30
  b8:	8f 01       	movw	r16, r30
  ba:	8f 01       	movw	r16, r30
  bc:	8f 01       	movw	r16, r30
  be:	8f 01       	movw	r16, r30
  c0:	8f 01       	movw	r16, r30
  c2:	8f 01       	movw	r16, r30
  c4:	8f 01       	movw	r16, r30
  c6:	8f 01       	movw	r16, r30
  c8:	8f 01       	movw	r16, r30
  ca:	8f 01       	movw	r16, r30
  cc:	8f 01       	movw	r16, r30
  ce:	8f 01       	movw	r16, r30
  d0:	8f 01       	movw	r16, r30
  d2:	8f 01       	movw	r16, r30
  d4:	8f 01       	movw	r16, r30
  d6:	8f 01       	movw	r16, r30
  d8:	8f 01       	movw	r16, r30
  da:	8f 01       	movw	r16, r30
  dc:	2c 01       	movw	r4, r24
  de:	45 01       	movw	r8, r10
  e0:	5e 01       	movw	r10, r28
  e2:	77 01       	movw	r14, r14
  e4:	9e 01       	movw	r18, r28
  e6:	b1 01       	movw	r22, r2
  e8:	c4 01       	movw	r24, r8
  ea:	d7 01       	movw	r26, r14
  ec:	e9 01       	movw	r28, r18
  ee:	e9 01       	movw	r28, r18
  f0:	e9 01       	movw	r28, r18
  f2:	e9 01       	movw	r28, r18
  f4:	e9 01       	movw	r28, r18
  f6:	e9 01       	movw	r28, r18
  f8:	e9 01       	movw	r28, r18
  fa:	e9 01       	movw	r28, r18
  fc:	e9 01       	movw	r28, r18
  fe:	e9 01       	movw	r28, r18
 100:	e9 01       	movw	r28, r18
 102:	e9 01       	movw	r28, r18
 104:	e9 01       	movw	r28, r18
 106:	e9 01       	movw	r28, r18
 108:	e9 01       	movw	r28, r18
 10a:	e9 01       	movw	r28, r18
 10c:	e9 01       	movw	r28, r18
 10e:	e9 01       	movw	r28, r18
 110:	e9 01       	movw	r28, r18
 112:	e9 01       	movw	r28, r18
 114:	e9 01       	movw	r28, r18
 116:	e9 01       	movw	r28, r18
 118:	e9 01       	movw	r28, r18
 11a:	e9 01       	movw	r28, r18
 11c:	e9 01       	movw	r28, r18
 11e:	e9 01       	movw	r28, r18
 120:	e9 01       	movw	r28, r18
 122:	e9 01       	movw	r28, r18
 124:	9e 01       	movw	r18, r28
 126:	b1 01       	movw	r22, r2
 128:	c4 01       	movw	r24, r8
 12a:	d7 01       	movw	r26, r14

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	a0 e6       	ldi	r26, 0x60	; 96
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ea e6       	ldi	r30, 0x6A	; 106
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	a8 38       	cpi	r26, 0x88	; 136
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>
 14e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <main>
 152:	0c 94 b3 03 	jmp	0x766	; 0x766 <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <button_ucRead>:
}

//button read
unsigned char button_ucRead(unsigned char port_name,unsigned char pin_num)
{
    return DIO_u8ReadPin(port_name,pin_num);
 15a:	0e 94 90 01 	call	0x320	; 0x320 <DIO_u8ReadPin>
}
 15e:	08 95       	ret

00000160 <DIO_vSetPinDir>:
	{
		DIO_vWritePortValue(port_name, 255);
	}
	else
	{
		DIO_vWritePortValue(port_name, 0);
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	e1 54       	subi	r30, 0x41	; 65
 166:	f1 09       	sbc	r31, r1
 168:	e4 32       	cpi	r30, 0x24	; 36
 16a:	f1 05       	cpc	r31, r1
 16c:	08 f0       	brcs	.+2      	; 0x170 <DIO_vSetPinDir+0x10>
 16e:	67 c0       	rjmp	.+206    	; 0x23e <DIO_vSetPinDir+0xde>
 170:	e6 5d       	subi	r30, 0xD6	; 214
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__tablejump2__>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	59 f4       	brne	.+22     	; 0x192 <DIO_vSetPinDir+0x32>
 17c:	2a b3       	in	r18, 0x1a	; 26
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_vSetPinDir+0x28>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_vSetPinDir+0x24>
 18c:	82 2b       	or	r24, r18
 18e:	8a bb       	out	0x1a, r24	; 26
 190:	08 95       	ret
 192:	2a b3       	in	r18, 0x1a	; 26
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vSetPinDir+0x3e>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vSetPinDir+0x3a>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	8a bb       	out	0x1a, r24	; 26
 1a8:	08 95       	ret
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <DIO_vSetPinDir+0x64>
 1ae:	27 b3       	in	r18, 0x17	; 23
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_vSetPinDir+0x5a>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_vSetPinDir+0x56>
 1be:	82 2b       	or	r24, r18
 1c0:	87 bb       	out	0x17, r24	; 23
 1c2:	08 95       	ret
 1c4:	27 b3       	in	r18, 0x17	; 23
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDir+0x70>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDir+0x6c>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	87 bb       	out	0x17, r24	; 23
 1da:	08 95       	ret
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	59 f4       	brne	.+22     	; 0x1f6 <DIO_vSetPinDir+0x96>
 1e0:	24 b3       	in	r18, 0x14	; 20
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_vSetPinDir+0x8c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_vSetPinDir+0x88>
 1f0:	82 2b       	or	r24, r18
 1f2:	84 bb       	out	0x14, r24	; 20
 1f4:	08 95       	ret
 1f6:	24 b3       	in	r18, 0x14	; 20
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vSetPinDir+0xa2>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vSetPinDir+0x9e>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	84 bb       	out	0x14, r24	; 20
 20c:	08 95       	ret
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	59 f4       	brne	.+22     	; 0x228 <DIO_vSetPinDir+0xc8>
 212:	21 b3       	in	r18, 0x11	; 17
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_vSetPinDir+0xbe>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_vSetPinDir+0xba>
 222:	82 2b       	or	r24, r18
 224:	81 bb       	out	0x11, r24	; 17
 226:	08 95       	ret
 228:	21 b3       	in	r18, 0x11	; 17
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_vSetPinDir+0xd4>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_vSetPinDir+0xd0>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	08 95       	ret

00000240 <DIO_vWritePinValue>:
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	e1 54       	subi	r30, 0x41	; 65
 246:	f1 09       	sbc	r31, r1
 248:	e4 32       	cpi	r30, 0x24	; 36
 24a:	f1 05       	cpc	r31, r1
 24c:	08 f0       	brcs	.+2      	; 0x250 <DIO_vWritePinValue+0x10>
 24e:	67 c0       	rjmp	.+206    	; 0x31e <DIO_vWritePinValue+0xde>
 250:	e2 5b       	subi	r30, 0xB2	; 178
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__tablejump2__>
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	59 f4       	brne	.+22     	; 0x272 <DIO_vWritePinValue+0x32>
 25c:	2b b3       	in	r18, 0x1b	; 27
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_vWritePinValue+0x28>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_vWritePinValue+0x24>
 26c:	82 2b       	or	r24, r18
 26e:	8b bb       	out	0x1b, r24	; 27
 270:	08 95       	ret
 272:	2b b3       	in	r18, 0x1b	; 27
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vWritePinValue+0x3e>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vWritePinValue+0x3a>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	8b bb       	out	0x1b, r24	; 27
 288:	08 95       	ret
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <DIO_vWritePinValue+0x64>
 28e:	28 b3       	in	r18, 0x18	; 24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_vWritePinValue+0x5a>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_vWritePinValue+0x56>
 29e:	82 2b       	or	r24, r18
 2a0:	88 bb       	out	0x18, r24	; 24
 2a2:	08 95       	ret
 2a4:	28 b3       	in	r18, 0x18	; 24
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWritePinValue+0x70>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWritePinValue+0x6c>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	88 bb       	out	0x18, r24	; 24
 2ba:	08 95       	ret
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	59 f4       	brne	.+22     	; 0x2d6 <DIO_vWritePinValue+0x96>
 2c0:	25 b3       	in	r18, 0x15	; 21
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_vWritePinValue+0x8c>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_vWritePinValue+0x88>
 2d0:	82 2b       	or	r24, r18
 2d2:	85 bb       	out	0x15, r24	; 21
 2d4:	08 95       	ret
 2d6:	25 b3       	in	r18, 0x15	; 21
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vWritePinValue+0xa2>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_vWritePinValue+0x9e>
 2e6:	80 95       	com	r24
 2e8:	82 23       	and	r24, r18
 2ea:	85 bb       	out	0x15, r24	; 21
 2ec:	08 95       	ret
 2ee:	41 30       	cpi	r20, 0x01	; 1
 2f0:	59 f4       	brne	.+22     	; 0x308 <DIO_vWritePinValue+0xc8>
 2f2:	22 b3       	in	r18, 0x12	; 18
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_vWritePinValue+0xbe>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_vWritePinValue+0xba>
 302:	82 2b       	or	r24, r18
 304:	82 bb       	out	0x12, r24	; 18
 306:	08 95       	ret
 308:	22 b3       	in	r18, 0x12	; 18
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vWritePinValue+0xd4>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vWritePinValue+0xd0>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	82 bb       	out	0x12, r24	; 18
 31e:	08 95       	ret

00000320 <DIO_u8ReadPin>:
 320:	a6 2f       	mov	r26, r22
 322:	48 2f       	mov	r20, r24
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	fa 01       	movw	r30, r20
 328:	e1 54       	subi	r30, 0x41	; 65
 32a:	f1 09       	sbc	r31, r1
 32c:	e4 32       	cpi	r30, 0x24	; 36
 32e:	f1 05       	cpc	r31, r1
 330:	08 f0       	brcs	.+2      	; 0x334 <DIO_u8ReadPin+0x14>
 332:	4f c0       	rjmp	.+158    	; 0x3d2 <DIO_u8ReadPin+0xb2>
 334:	ee 58       	subi	r30, 0x8E	; 142
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__tablejump2__>
 33c:	29 b3       	in	r18, 0x19	; 25
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0a 2e       	mov	r0, r26
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_u8ReadPin+0x2a>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_u8ReadPin+0x26>
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	82 23       	and	r24, r18
 352:	93 23       	and	r25, r19
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_u8ReadPin+0x3a>
 356:	95 95       	asr	r25
 358:	87 95       	ror	r24
 35a:	aa 95       	dec	r26
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_u8ReadPin+0x36>
 35e:	98 2f       	mov	r25, r24
 360:	38 c0       	rjmp	.+112    	; 0x3d2 <DIO_u8ReadPin+0xb2>
 362:	26 b3       	in	r18, 0x16	; 22
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0a 2e       	mov	r0, r26
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8ReadPin+0x50>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8ReadPin+0x4c>
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	82 23       	and	r24, r18
 378:	93 23       	and	r25, r19
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8ReadPin+0x60>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	aa 95       	dec	r26
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8ReadPin+0x5c>
 384:	98 2f       	mov	r25, r24
 386:	25 c0       	rjmp	.+74     	; 0x3d2 <DIO_u8ReadPin+0xb2>
 388:	23 b3       	in	r18, 0x13	; 19
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0a 2e       	mov	r0, r26
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8ReadPin+0x76>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8ReadPin+0x72>
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	82 23       	and	r24, r18
 39e:	93 23       	and	r25, r19
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_u8ReadPin+0x86>
 3a2:	95 95       	asr	r25
 3a4:	87 95       	ror	r24
 3a6:	aa 95       	dec	r26
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_u8ReadPin+0x82>
 3aa:	98 2f       	mov	r25, r24
 3ac:	12 c0       	rjmp	.+36     	; 0x3d2 <DIO_u8ReadPin+0xb2>
 3ae:	20 b3       	in	r18, 0x10	; 16
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0a 2e       	mov	r0, r26
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_u8ReadPin+0x9c>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_u8ReadPin+0x98>
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	82 23       	and	r24, r18
 3c4:	93 23       	and	r25, r19
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_u8ReadPin+0xac>
 3c8:	95 95       	asr	r25
 3ca:	87 95       	ror	r24
 3cc:	aa 95       	dec	r26
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_u8ReadPin+0xa8>
 3d0:	98 2f       	mov	r25, r24
 3d2:	89 2f       	mov	r24, r25
 3d4:	08 95       	ret

000003d6 <DIO_vPinPullUp>:
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <DIO_vPinPullUp+0xa>
 3da:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
 3de:	08 95       	ret
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
 3e6:	08 95       	ret

000003e8 <DIO_vSetPortLowNibble>:
	}
}

// Set low nibble
void DIO_vSetPortLowNibble(unsigned char port_name, unsigned char port_value)
{
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	f8 2e       	mov	r15, r24
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
 3f8:	06 2f       	mov	r16, r22
 3fa:	10 e0       	ldi	r17, 0x00	; 0
 3fc:	a8 01       	movw	r20, r16
 3fe:	0c 2e       	mov	r0, r28
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	55 95       	asr	r21
 404:	47 95       	ror	r20
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	41 70       	andi	r20, 0x01	; 1
 40c:	6c 2f       	mov	r22, r28
 40e:	8f 2d       	mov	r24, r15
 410:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_vSetPinDir>
 414:	21 96       	adiw	r28, 0x01	; 1
}

// Set low nibble
void DIO_vSetPortLowNibble(unsigned char port_name, unsigned char port_value)
{
	for (unsigned char i = 0; i < 4; i++)
 416:	c4 30       	cpi	r28, 0x04	; 4
 418:	d1 05       	cpc	r29, r1
 41a:	81 f7       	brne	.-32     	; 0x3fc <DIO_vSetPortLowNibble+0x14>
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	08 95       	ret

00000428 <DIO_vSetPortHighNibble>:

// set high nibble
void DIO_vSetPortHighNibble(unsigned char port_name, unsigned char port_value)
{
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	f8 2e       	mov	r15, r24
 434:	c4 e0       	ldi	r28, 0x04	; 4
 436:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i = 4; i < 8; i++)
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
 438:	06 2f       	mov	r16, r22
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	a8 01       	movw	r20, r16
 43e:	0c 2e       	mov	r0, r28
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_vSetPortHighNibble+0x1e>
 442:	55 95       	asr	r21
 444:	47 95       	ror	r20
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_vSetPortHighNibble+0x1a>
 44a:	41 70       	andi	r20, 0x01	; 1
 44c:	6c 2f       	mov	r22, r28
 44e:	8f 2d       	mov	r24, r15
 450:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_vSetPinDir>
 454:	21 96       	adiw	r28, 0x01	; 1
}

// set high nibble
void DIO_vSetPortHighNibble(unsigned char port_name, unsigned char port_value)
{
	for (unsigned char i = 4; i < 8; i++)
 456:	c8 30       	cpi	r28, 0x08	; 8
 458:	d1 05       	cpc	r29, r1
 45a:	81 f7       	brne	.-32     	; 0x43c <DIO_vSetPortHighNibble+0x14>
	{
		DIO_vSetPinDir(port_name, i, (port_value >> i) & 1);
	}
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	08 95       	ret

00000468 <DIO_vWritePortLowNibble>:

// Write low nibble
void DIO_vWritePortLowNibble(unsigned char port_name, unsigned char port_value)
{
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	f8 2e       	mov	r15, r24
 474:	c0 e0       	ldi	r28, 0x00	; 0
 476:	d0 e0       	ldi	r29, 0x00	; 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
 478:	06 2f       	mov	r16, r22
 47a:	10 e0       	ldi	r17, 0x00	; 0
 47c:	a8 01       	movw	r20, r16
 47e:	0c 2e       	mov	r0, r28
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_vWritePortLowNibble+0x1e>
 482:	55 95       	asr	r21
 484:	47 95       	ror	r20
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_vWritePortLowNibble+0x1a>
 48a:	41 70       	andi	r20, 0x01	; 1
 48c:	6c 2f       	mov	r22, r28
 48e:	8f 2d       	mov	r24, r15
 490:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
 494:	21 96       	adiw	r28, 0x01	; 1
{
	// DIO_vWritePinValue(port_name, 0, ((1 & port_value) >> 0)); // read bit 0
	// DIO_vWritePinValue(port_name, 1, ((1 & port_value) >> 1)); // read bit 1
	// DIO_vWritePinValue(port_name, 2, ((1 & port_value) >> 2)); // read bit 2
	// DIO_vWritePinValue(port_name, 3, ((1 & port_value) >> 3)); // read bit 3
	for (unsigned char i = 0; i < 4; i++)
 496:	c4 30       	cpi	r28, 0x04	; 4
 498:	d1 05       	cpc	r29, r1
 49a:	81 f7       	brne	.-32     	; 0x47c <DIO_vWritePortLowNibble+0x14>
	{
		DIO_vWritePinValue(port_name, i, ((port_value >> i) & 1));
	}
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	08 95       	ret

000004a8 <key_pad_initialize>:
/* ---------------- Implementation section ---------------- */

/* Key_pad initialization function */
void key_pad_initialize(void)
{
    DIO_vSetPortLowNibble(KEY_PAD_PORT, 0x0F);  /* set low nipple bits of port as output*/
 4a8:	6f e0       	ldi	r22, 0x0F	; 15
 4aa:	82 e4       	ldi	r24, 0x42	; 66
 4ac:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_vSetPortLowNibble>
    DIO_vSetPortHighNibble(KEY_PAD_PORT, 0x0F); /* set high nipple bits of port as input*/
 4b0:	6f e0       	ldi	r22, 0x0F	; 15
 4b2:	82 e4       	ldi	r24, 0x42	; 66
 4b4:	0e 94 14 02 	call	0x428	; 0x428 <DIO_vSetPortHighNibble>
    DIO_vPinPullUp(KEY_PAD_PORT, 4, 1);         /* enable internal pull up on pin 4*/
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	64 e0       	ldi	r22, 0x04	; 4
 4bc:	82 e4       	ldi	r24, 0x42	; 66
 4be:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_vPinPullUp>
    DIO_vPinPullUp(KEY_PAD_PORT, 5, 1);         /* enable internal pull up on pin 5*/
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	65 e0       	ldi	r22, 0x05	; 5
 4c6:	82 e4       	ldi	r24, 0x42	; 66
 4c8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_vPinPullUp>
    DIO_vPinPullUp(KEY_PAD_PORT, 6, 1);         /* enable internal pull up on pin 6*/
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	66 e0       	ldi	r22, 0x06	; 6
 4d0:	82 e4       	ldi	r24, 0x42	; 66
 4d2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_vPinPullUp>
    DIO_vPinPullUp(KEY_PAD_PORT, 7, 1);         /* enable internal pull up on pin 7*/
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	67 e0       	ldi	r22, 0x07	; 7
 4da:	82 e4       	ldi	r24, 0x42	; 66
 4dc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_vPinPullUp>
 4e0:	08 95       	ret

000004e2 <key_pad_read_u8Read>:
}

/* Key_pad read function */
unsigned char key_pad_read_u8Read(void)
{
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	60 97       	sbiw	r28, 0x10	; 16
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
    /* values of buttons to send it lcd as chars */
    unsigned char value[4][4] = {{'1', '2', '3', '+'}, {'4', '5', '6', '-'}, {'7', '8', '9', '*'}, {'%', '0', '=', '/'}};
 4fa:	80 e1       	ldi	r24, 0x10	; 16
 4fc:	e0 e6       	ldi	r30, 0x60	; 96
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	de 01       	movw	r26, r28
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	01 90       	ld	r0, Z+
 506:	0d 92       	st	X+, r0
 508:	8a 95       	dec	r24
 50a:	e1 f7       	brne	.-8      	; 0x504 <key_pad_read_u8Read+0x22>
    unsigned char row_counter;                          /* rows counter */
    unsigned char column_counter;                       /* column counter */
    unsigned char pin_value;                            /* pin value */
    unsigned char returned_value = KEY_PAD_NOT_PRESSED; /*any value not included in array is acceptable*/
    unsigned char x;
    for (row_counter = 0; row_counter < 4; row_counter++)
 50c:	00 e0       	ldi	r16, 0x00	; 0
    {
        DIO_vWritePortLowNibble(KEY_PAD_PORT, 0x0F);      /* output high on low nibble of port */
 50e:	6f e0       	ldi	r22, 0x0F	; 15
 510:	82 e4       	ldi	r24, 0x42	; 66
 512:	0e 94 34 02 	call	0x468	; 0x468 <DIO_vWritePortLowNibble>
        DIO_vWritePinValue(KEY_PAD_PORT, row_counter, 0); /* output low on specific row */
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	60 2f       	mov	r22, r16
 51a:	82 e4       	ldi	r24, 0x42	; 66
 51c:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
        for (column_counter = 0; column_counter < 4; column_counter++)
 520:	10 e0       	ldi	r17, 0x00	; 0
        {
            x=button_ucRead(KEY_PAD_PORT, column_counter + 4);
 522:	64 e0       	ldi	r22, 0x04	; 4
 524:	61 0f       	add	r22, r17
 526:	82 e4       	ldi	r24, 0x42	; 66
 528:	0e 94 ad 00 	call	0x15a	; 0x15a <button_ucRead>
            if ( x == 0) /* to read pin value & +4 because we are writing on high nipple */
 52c:	81 11       	cpse	r24, r1
 52e:	0d c0       	rjmp	.+26     	; 0x54a <key_pad_read_u8Read+0x68>
            {
                returned_value = value[row_counter][column_counter]; /* return saved value of button */
 530:	e1 e0       	ldi	r30, 0x01	; 1
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	ec 0f       	add	r30, r28
 536:	fd 1f       	adc	r31, r29
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	08 9f       	mul	r16, r24
 53c:	e0 0d       	add	r30, r0
 53e:	f1 1d       	adc	r31, r1
 540:	11 24       	eor	r1, r1
 542:	e1 0f       	add	r30, r17
 544:	f1 1d       	adc	r31, r1
 546:	80 81       	ld	r24, Z
 548:	07 c0       	rjmp	.+14     	; 0x558 <key_pad_read_u8Read+0x76>
    unsigned char x;
    for (row_counter = 0; row_counter < 4; row_counter++)
    {
        DIO_vWritePortLowNibble(KEY_PAD_PORT, 0x0F);      /* output high on low nibble of port */
        DIO_vWritePinValue(KEY_PAD_PORT, row_counter, 0); /* output low on specific row */
        for (column_counter = 0; column_counter < 4; column_counter++)
 54a:	1f 5f       	subi	r17, 0xFF	; 255
 54c:	14 30       	cpi	r17, 0x04	; 4
 54e:	49 f7       	brne	.-46     	; 0x522 <key_pad_read_u8Read+0x40>
    unsigned char row_counter;                          /* rows counter */
    unsigned char column_counter;                       /* column counter */
    unsigned char pin_value;                            /* pin value */
    unsigned char returned_value = KEY_PAD_NOT_PRESSED; /*any value not included in array is acceptable*/
    unsigned char x;
    for (row_counter = 0; row_counter < 4; row_counter++)
 550:	0f 5f       	subi	r16, 0xFF	; 255
 552:	04 30       	cpi	r16, 0x04	; 4
 554:	e1 f6       	brne	.-72     	; 0x50e <key_pad_read_u8Read+0x2c>
                returned_value = value[row_counter][column_counter]; /* return saved value of button */
                break;
            }
            else
            {
                returned_value = KEY_PAD_NOT_PRESSED; /* if no button is pressed return the default value */
 556:	8f ef       	ldi	r24, 0xFF	; 255
        {
            break;
        }
    }
    return returned_value;
}
 558:	60 96       	adiw	r28, 0x10	; 16
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <LCD_Enable_pulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	64 e0       	ldi	r22, 0x04	; 4
 572:	81 e6       	ldi	r24, 0x61	; 97
 574:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
 578:	8f e9       	ldi	r24, 0x9F	; 159
 57a:	9f e0       	ldi	r25, 0x0F	; 15
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_Enable_pulse+0xe>
 580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_Enable_pulse+0x14>
 582:	00 00       	nop
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	64 e0       	ldi	r22, 0x04	; 4
 588:	81 e6       	ldi	r24, 0x61	; 97
 58a:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
 58e:	8f e9       	ldi	r24, 0x9F	; 159
 590:	9f e0       	ldi	r25, 0x0F	; 15
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <LCD_Enable_pulse+0x24>
 596:	00 c0       	rjmp	.+0      	; 0x598 <LCD_Enable_pulse+0x2a>
 598:	00 00       	nop
 59a:	08 95       	ret

0000059c <LCD_vSendCommand>:
 59c:	cf 93       	push	r28
 59e:	c8 2f       	mov	r28, r24
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	65 e0       	ldi	r22, 0x05	; 5
 5a4:	81 e4       	ldi	r24, 0x41	; 65
 5a6:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
 5aa:	6c 2f       	mov	r22, r28
 5ac:	62 95       	swap	r22
 5ae:	6f 70       	andi	r22, 0x0F	; 15
 5b0:	81 e4       	ldi	r24, 0x41	; 65
 5b2:	0e 94 34 02 	call	0x468	; 0x468 <DIO_vWritePortLowNibble>
 5b6:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_Enable_pulse>
 5ba:	6c 2f       	mov	r22, r28
 5bc:	81 e4       	ldi	r24, 0x41	; 65
 5be:	0e 94 34 02 	call	0x468	; 0x468 <DIO_vWritePortLowNibble>
 5c2:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_Enable_pulse>
 5c6:	8f ec       	ldi	r24, 0xCF	; 207
 5c8:	97 e0       	ldi	r25, 0x07	; 7
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_vSendCommand+0x2e>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_vSendCommand+0x34>
 5d0:	00 00       	nop
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <LCD_vClearScreen>:
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 5dc:	08 95       	ret

000005de <LCD_vNewLine>:
}

// new line
void LCD_vNewLine()
{
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
 5de:	80 ec       	ldi	r24, 0xC0	; 192
 5e0:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 5e4:	08 95       	ret

000005e6 <LCD_vSendChar>:
	LCD_Enable_pulse();								   // send enable pulse
	_delay_ms(1);									   // delay to make sure that command is executed
}

void LCD_vSendChar(unsigned char data)
{
 5e6:	cf 93       	push	r28
 5e8:	c8 2f       	mov	r28, r24
	DIO_vWritePinValue(LCD_RS_PORT, LCD_RS_PIN, 1); // RS data select
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	65 e0       	ldi	r22, 0x05	; 5
 5ee:	81 e4       	ldi	r24, 0x41	; 65
 5f0:	0e 94 20 01 	call	0x240	; 0x240 <DIO_vWritePinValue>
	DIO_vWritePortLowNibble(LCD_PORT, (data >> 4)); // write on port low nibble and write 4 most bits of data on data reg on lcd
 5f4:	6c 2f       	mov	r22, r28
 5f6:	62 95       	swap	r22
 5f8:	6f 70       	andi	r22, 0x0F	; 15
 5fa:	81 e4       	ldi	r24, 0x41	; 65
 5fc:	0e 94 34 02 	call	0x468	; 0x468 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 600:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_Enable_pulse>
	DIO_vWritePortLowNibble(LCD_PORT, data);		// write on port low nibble and write  4 least bits of data on data reg on lcd
 604:	6c 2f       	mov	r22, r28
 606:	81 e4       	ldi	r24, 0x41	; 65
 608:	0e 94 34 02 	call	0x468	; 0x468 <DIO_vWritePortLowNibble>
	LCD_Enable_pulse();								// send enable pulse
 60c:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_Enable_pulse>
}
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <LCD_vSendString>:
	LCD_vSendCommand(LCD_SECOND_ROW); // go to second row first column
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	ec 01       	movw	r28, r24
	while ((*string_ptr) != 0) // checks null
 61a:	88 81       	ld	r24, Y
 61c:	88 23       	and	r24, r24
 61e:	79 f0       	breq	.+30     	; 0x63e <LCD_vSendString+0x2a>
 620:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
 622:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_vSendChar>
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	80 e7       	ldi	r24, 0x70	; 112
 62a:	92 e0       	ldi	r25, 0x02	; 2
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <LCD_vSendString+0x18>
 634:	00 c0       	rjmp	.+0      	; 0x636 <LCD_vSendString+0x22>
 636:	00 00       	nop
}

// send string function
void LCD_vSendString(const unsigned char *string_ptr)
{
	while ((*string_ptr) != 0) // checks null
 638:	89 91       	ld	r24, Y+
 63a:	81 11       	cpse	r24, r1
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*string_ptr); // send char to LCD data lines
		_delay_ms(100);				// to see the writing operation
		string_ptr++;				// pointer ++
	}
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <LCD_vInitialize>:
	LCD_Enable_pulse();								// send enable pulse
}

void LCD_vInitialize()
{
	DIO_vSetPortLowNibble(LCD_PORT, 0xff);				// set port connected to lcd as output
 644:	6f ef       	ldi	r22, 0xFF	; 255
 646:	81 e4       	ldi	r24, 0x41	; 65
 648:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_vSetPortLowNibble>
	DIO_vSetPinDir(LCD_ENABLE_PORT, LCD_ENABLE_PIN, 1); // set pin connected to enable pin as output
 64c:	41 e0       	ldi	r20, 0x01	; 1
 64e:	64 e0       	ldi	r22, 0x04	; 4
 650:	81 e6       	ldi	r24, 0x61	; 97
 652:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, 1);			// set pin connected to RS pin as output
 656:	41 e0       	ldi	r20, 0x01	; 1
 658:	65 e0       	ldi	r22, 0x05	; 5
 65a:	81 e4       	ldi	r24, 0x41	; 65
 65c:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_vSetPinDir>
 660:	2f e7       	ldi	r18, 0x7F	; 127
 662:	88 e3       	ldi	r24, 0x38	; 56
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <LCD_vInitialize+0x22>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <LCD_vInitialize+0x2c>
 670:	00 00       	nop
	_delay_ms(50);										// delay to make sure that vdd reached 4.5v
	LCD_vSendCommand(LCD_RETURN_HOME);					// mandatory command
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 678:	8f e1       	ldi	r24, 0x1F	; 31
 67a:	9e e4       	ldi	r25, 0x4E	; 78
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <LCD_vInitialize+0x38>
 680:	00 c0       	rjmp	.+0      	; 0x682 <LCD_vInitialize+0x3e>
 682:	00 00       	nop
	_delay_ms(10);										// to make sure that command is executed
	LCD_vSendCommand(LCD_FOUR_BIT_MODE);				// set lcd at 4-bit mode
 684:	88 e2       	ldi	r24, 0x28	; 40
 686:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 68a:	8f ec       	ldi	r24, 0xCF	; 207
 68c:	97 e0       	ldi	r25, 0x07	; 7
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <LCD_vInitialize+0x4a>
 692:	00 c0       	rjmp	.+0      	; 0x694 <LCD_vInitialize+0x50>
 694:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_CLR_SCREEN);					// clear screen
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 69c:	8f ec       	ldi	r24, 0xCF	; 207
 69e:	97 e0       	ldi	r25, 0x07	; 7
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_vInitialize+0x5c>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCD_vInitialize+0x62>
 6a6:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_DISP_ON_CURSOR_ON); // make cursor and display on
 6a8:	8e e0       	ldi	r24, 0x0E	; 14
 6aa:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 6ae:	8f ec       	ldi	r24, 0xCF	; 207
 6b0:	97 e0       	ldi	r25, 0x07	; 7
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <LCD_vInitialize+0x6e>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCD_vInitialize+0x74>
 6b8:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_ENTRY_MODE_CURSOR_RIGHT);				// make cursor move right
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 6c0:	8f ec       	ldi	r24, 0xCF	; 207
 6c2:	97 e0       	ldi	r25, 0x07	; 7
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <LCD_vInitialize+0x80>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <LCD_vInitialize+0x86>
 6ca:	00 00       	nop
	_delay_ms(1);										// to make sure that command is executed
	LCD_vSendCommand(LCD_RETURN_HOME);					// set lcd in entry mode
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_vSendCommand>
 6d2:	8f ec       	ldi	r24, 0xCF	; 207
 6d4:	97 e0       	ldi	r25, 0x07	; 7
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_vInitialize+0x92>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_vInitialize+0x98>
 6dc:	00 00       	nop
 6de:	08 95       	ret

000006e0 <main>:
#include <util/delay.h>


int main(void)
{
	key_pad_initialize();
 6e0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <key_pad_initialize>
	LCD_vInitialize();
 6e4:	0e 94 22 03 	call	0x644	; 0x644 <LCD_vInitialize>
	LCD_vSendString("welcome :)");
 6e8:	80 e7       	ldi	r24, 0x70	; 112
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_vSendString>
 6f0:	2f ef       	ldi	r18, 0xFF	; 255
 6f2:	83 ed       	ldi	r24, 0xD3	; 211
 6f4:	90 e3       	ldi	r25, 0x30	; 48
 6f6:	21 50       	subi	r18, 0x01	; 1
 6f8:	80 40       	sbci	r24, 0x00	; 0
 6fa:	90 40       	sbci	r25, 0x00	; 0
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <main+0x16>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <main+0x20>
 700:	00 00       	nop
	_delay_ms(2000);
	LCD_vClearScreen();
 702:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_vClearScreen>
	LCD_vSendString("press keys:");
 706:	8b e7       	ldi	r24, 0x7B	; 123
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_vSendString>
	LCD_vNewLine();
 70e:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vNewLine>
	//LCD_vSendString("test");
	unsigned char x;
	unsigned char flag=0;
 712:	c0 e0       	ldi	r28, 0x00	; 0
			flag=1; //to solve holding button problem
			
		}
		else if(x == KEY_PAD_NOT_PRESSED)
		{
			flag=0; // if button is not pressed the flag will retrurn to 0
 714:	10 e0       	ldi	r17, 0x00	; 0
			}
			else
			{
				LCD_vSendChar(x);
			}
			flag=1; //to solve holding button problem
 716:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char x;
	unsigned char flag=0;
    /* Replace with your application code */
    while (1) 
    {
		x =key_pad_read_u8Read();
 718:	0e 94 71 02 	call	0x4e2	; 0x4e2 <key_pad_read_u8Read>
		if( (x !=KEY_PAD_NOT_PRESSED) && (flag == 0))
 71c:	8f 3f       	cpi	r24, 0xFF	; 255
 71e:	91 f0       	breq	.+36     	; 0x744 <main+0x64>
 720:	c1 11       	cpse	r28, r1
 722:	11 c0       	rjmp	.+34     	; 0x746 <main+0x66>
		{
			if(x=='%')
 724:	85 32       	cpi	r24, 0x25	; 37
 726:	51 f4       	brne	.+20     	; 0x73c <main+0x5c>
			{
				LCD_vClearScreen();
 728:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_vClearScreen>
				LCD_vSendString("press keys:");
 72c:	8b e7       	ldi	r24, 0x7B	; 123
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_vSendString>
				LCD_vNewLine();
 734:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_vNewLine>
			}
			else
			{
				LCD_vSendChar(x);
			}
			flag=1; //to solve holding button problem
 738:	cd 2f       	mov	r28, r29
 73a:	05 c0       	rjmp	.+10     	; 0x746 <main+0x66>
				LCD_vSendString("press keys:");
				LCD_vNewLine();
			}
			else
			{
				LCD_vSendChar(x);
 73c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_vSendChar>
			}
			flag=1; //to solve holding button problem
 740:	cd 2f       	mov	r28, r29
 742:	01 c0       	rjmp	.+2      	; 0x746 <main+0x66>
			
		}
		else if(x == KEY_PAD_NOT_PRESSED)
		{
			flag=0; // if button is not pressed the flag will retrurn to 0
 744:	c1 2f       	mov	r28, r17
 746:	2f ef       	ldi	r18, 0xFF	; 255
 748:	80 e7       	ldi	r24, 0x70	; 112
 74a:	92 e0       	ldi	r25, 0x02	; 2
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	80 40       	sbci	r24, 0x00	; 0
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <main+0x6c>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0x76>
 756:	00 00       	nop
 758:	df cf       	rjmp	.-66     	; 0x718 <main+0x38>

0000075a <__tablejump2__>:
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	05 90       	lpm	r0, Z+
 760:	f4 91       	lpm	r31, Z
 762:	e0 2d       	mov	r30, r0
 764:	09 94       	ijmp

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
