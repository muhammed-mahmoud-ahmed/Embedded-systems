
7-seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073a  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000652  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000325  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	94 00       	.word	0x0094	; ????
  56:	97 00       	.word	0x0097	; ????
  58:	9a 00       	.word	0x009a	; ????
  5a:	9d 00       	.word	0x009d	; ????
  5c:	9f 00       	.word	0x009f	; ????
  5e:	9f 00       	.word	0x009f	; ????
  60:	9f 00       	.word	0x009f	; ????
  62:	9f 00       	.word	0x009f	; ????
  64:	9f 00       	.word	0x009f	; ????
  66:	9f 00       	.word	0x009f	; ????
  68:	9f 00       	.word	0x009f	; ????
  6a:	9f 00       	.word	0x009f	; ????
  6c:	9f 00       	.word	0x009f	; ????
  6e:	9f 00       	.word	0x009f	; ????
  70:	9f 00       	.word	0x009f	; ????
  72:	9f 00       	.word	0x009f	; ????
  74:	9f 00       	.word	0x009f	; ????
  76:	9f 00       	.word	0x009f	; ????
  78:	9f 00       	.word	0x009f	; ????
  7a:	9f 00       	.word	0x009f	; ????
  7c:	9f 00       	.word	0x009f	; ????
  7e:	9f 00       	.word	0x009f	; ????
  80:	9f 00       	.word	0x009f	; ????
  82:	9f 00       	.word	0x009f	; ????
  84:	9f 00       	.word	0x009f	; ????
  86:	9f 00       	.word	0x009f	; ????
  88:	9f 00       	.word	0x009f	; ????
  8a:	9f 00       	.word	0x009f	; ????
  8c:	9f 00       	.word	0x009f	; ????
  8e:	9f 00       	.word	0x009f	; ????
  90:	9f 00       	.word	0x009f	; ????
  92:	9f 00       	.word	0x009f	; ????
  94:	94 00       	.word	0x0094	; ????
  96:	97 00       	.word	0x0097	; ????
  98:	9a 00       	.word	0x009a	; ????
  9a:	9d 00       	.word	0x009d	; ????
  9c:	be 00       	.word	0x00be	; ????
  9e:	c4 00       	.word	0x00c4	; ????
  a0:	ca 00       	.word	0x00ca	; ????
  a2:	d0 00       	.word	0x00d0	; ????
  a4:	d5 00       	.word	0x00d5	; ????
  a6:	d5 00       	.word	0x00d5	; ????
  a8:	d5 00       	.word	0x00d5	; ????
  aa:	d5 00       	.word	0x00d5	; ????
  ac:	d5 00       	.word	0x00d5	; ????
  ae:	d5 00       	.word	0x00d5	; ????
  b0:	d5 00       	.word	0x00d5	; ????
  b2:	d5 00       	.word	0x00d5	; ????
  b4:	d5 00       	.word	0x00d5	; ????
  b6:	d5 00       	.word	0x00d5	; ????
  b8:	d5 00       	.word	0x00d5	; ????
  ba:	d5 00       	.word	0x00d5	; ????
  bc:	d5 00       	.word	0x00d5	; ????
  be:	d5 00       	.word	0x00d5	; ????
  c0:	d5 00       	.word	0x00d5	; ????
  c2:	d5 00       	.word	0x00d5	; ????
  c4:	d5 00       	.word	0x00d5	; ????
  c6:	d5 00       	.word	0x00d5	; ????
  c8:	d5 00       	.word	0x00d5	; ????
  ca:	d5 00       	.word	0x00d5	; ????
  cc:	d5 00       	.word	0x00d5	; ????
  ce:	d5 00       	.word	0x00d5	; ????
  d0:	d5 00       	.word	0x00d5	; ????
  d2:	d5 00       	.word	0x00d5	; ????
  d4:	d5 00       	.word	0x00d5	; ????
  d6:	d5 00       	.word	0x00d5	; ????
  d8:	d5 00       	.word	0x00d5	; ????
  da:	d5 00       	.word	0x00d5	; ????
  dc:	be 00       	.word	0x00be	; ????
  de:	c4 00       	.word	0x00c4	; ????
  e0:	ca 00       	.word	0x00ca	; ????
  e2:	d0 00       	.word	0x00d0	; ????

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e6 ef       	ldi	r30, 0xF6	; 246
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 37       	cpi	r26, 0x70	; 112
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
 10a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <seven_segment_vinitialize>:
#define ca

// initialize 7 seg
void seven_segment_vinitialize(unsigned char port_name)
{
    switch (port_name)
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e1 54       	subi	r30, 0x41	; 65
 118:	f1 09       	sbc	r31, r1
 11a:	e4 32       	cpi	r30, 0x24	; 36
 11c:	f1 05       	cpc	r31, r1
 11e:	78 f4       	brcc	.+30     	; 0x13e <seven_segment_vinitialize+0x2c>
 120:	e6 5d       	subi	r30, 0xD6	; 214
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__tablejump2__>
    {
    case 'a':
    case 'A':
        DDRA = 0xff;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
        break;
 12c:	08 95       	ret

    case 'b':
    case 'B':
        DDRB = 0xff;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	87 bb       	out	0x17, r24	; 23
        break;
 132:	08 95       	ret

    case 'c':
    case 'C':
        DDRC = 0xff;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	84 bb       	out	0x14, r24	; 20
        break;
 138:	08 95       	ret

    case 'd':
    case 'D':
        DDRD = 0xff;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret

00000140 <seven_segment_vWrite>:
    }
}

// 7-seg write
void seven_segment_vWrite(unsigned char port_name, unsigned char value)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	60 97       	sbiw	r28, 0x10	; 16
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
    #if defined  cc
    unsigned char seven_segment[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    #elif defined ca
    unsigned char seven_segment[16] = {~0x3f, ~0x06, ~0x5b, ~0x4f, ~0x66, ~0x6d,~0x7d, ~0x07, ~0x7f, ~0x6f, ~0x77, ~0x7c, ~0x39, ~0x5e, ~0x79, ~0x71};
 154:	90 e1       	ldi	r25, 0x10	; 16
 156:	e0 e6       	ldi	r30, 0x60	; 96
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	de 01       	movw	r26, r28
 15c:	11 96       	adiw	r26, 0x01	; 1
 15e:	01 90       	ld	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	9a 95       	dec	r25
 164:	e1 f7       	brne	.-8      	; 0x15e <seven_segment_vWrite+0x1e>
    #endif
    switch (port_name)
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	e1 54       	subi	r30, 0x41	; 65
 16c:	f1 09       	sbc	r31, r1
 16e:	e4 32       	cpi	r30, 0x24	; 36
 170:	f1 05       	cpc	r31, r1
 172:	d8 f4       	brcc	.+54     	; 0x1aa <seven_segment_vWrite+0x6a>
 174:	e2 5b       	subi	r30, 0xB2	; 178
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__tablejump2__>
    {
    case 'a':
    case 'A':
        PORTA = seven_segment[value];
 17c:	fe 01       	movw	r30, r28
 17e:	e6 0f       	add	r30, r22
 180:	f1 1d       	adc	r31, r1
 182:	81 81       	ldd	r24, Z+1	; 0x01
 184:	8b bb       	out	0x1b, r24	; 27
        break;
 186:	11 c0       	rjmp	.+34     	; 0x1aa <seven_segment_vWrite+0x6a>

    case 'b':
    case 'B':
        PORTB = seven_segment[value];
 188:	fe 01       	movw	r30, r28
 18a:	e6 0f       	add	r30, r22
 18c:	f1 1d       	adc	r31, r1
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	88 bb       	out	0x18, r24	; 24
        break;
 192:	0b c0       	rjmp	.+22     	; 0x1aa <seven_segment_vWrite+0x6a>

    case 'c':
    case 'C':
        PORTC = seven_segment[value];
 194:	fe 01       	movw	r30, r28
 196:	e6 0f       	add	r30, r22
 198:	f1 1d       	adc	r31, r1
 19a:	81 81       	ldd	r24, Z+1	; 0x01
 19c:	85 bb       	out	0x15, r24	; 21
        break;
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <seven_segment_vWrite+0x6a>

    case 'd':
    case 'D':
        PORTD = seven_segment[value];
 1a0:	fe 01       	movw	r30, r28
 1a2:	e6 0f       	add	r30, r22
 1a4:	f1 1d       	adc	r31, r1
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	82 bb       	out	0x12, r24	; 18
        break;

    default:
        break;
    }
 1aa:	60 96       	adiw	r28, 0x10	; 16
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <main>:
#include <util/delay.h>
#include "7_seg.h"

int main(void)
{
	seven_segment_vinitialize('d');
 1bc:	84 e6       	ldi	r24, 0x64	; 100
 1be:	0e 94 89 00 	call	0x112	; 0x112 <seven_segment_vinitialize>
#define F_CPU 8000000UL
#include <util/delay.h>
#include "7_seg.h"

int main(void)
{
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0;i<16;i++)
		{
			seven_segment_vWrite('d',i);
 1c4:	6c 2f       	mov	r22, r28
 1c6:	84 e6       	ldi	r24, 0x64	; 100
 1c8:	0e 94 a0 00 	call	0x140	; 0x140 <seven_segment_vWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	9c e0       	ldi	r25, 0x0C	; 12
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x16>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x20>
 1dc:	00 00       	nop
 1de:	cf 5f       	subi	r28, 0xFF	; 255
{
	seven_segment_vinitialize('d');
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0;i<16;i++)
 1e0:	c0 31       	cpi	r28, 0x10	; 16
 1e2:	81 f7       	brne	.-32     	; 0x1c4 <main+0x8>
 1e4:	ee cf       	rjmp	.-36     	; 0x1c2 <main+0x6>

000001e6 <__tablejump2__>:
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	05 90       	lpm	r0, Z+
 1ec:	f4 91       	lpm	r31, Z
 1ee:	e0 2d       	mov	r30, r0
 1f0:	09 94       	ijmp

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
